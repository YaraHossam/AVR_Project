
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a44  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007cf  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <main>
  64:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vSetPin>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vSetPin(u8 Copy_u8PORT ,u8 Copy_u8PinNumber)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_vSetPin+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_vSetPin+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	28 2f       	mov	r18, r24
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	3c 83       	std	Y+4, r19	; 0x04
  84:	2b 83       	std	Y+3, r18	; 0x03
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	9c 81       	ldd	r25, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	91 05       	cpc	r25, r1
  8e:	49 f1       	breq	.+82     	; 0xe2 <DIO_vSetPin+0x76>
  90:	2b 81       	ldd	r18, Y+3	; 0x03
  92:	3c 81       	ldd	r19, Y+4	; 0x04
  94:	22 30       	cpi	r18, 0x02	; 2
  96:	31 05       	cpc	r19, r1
  98:	2c f4       	brge	.+10     	; 0xa4 <DIO_vSetPin+0x38>
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	61 f0       	breq	.+24     	; 0xba <DIO_vSetPin+0x4e>
  a2:	5a c0       	rjmp	.+180    	; 0x158 <DIO_vSetPin+0xec>
  a4:	2b 81       	ldd	r18, Y+3	; 0x03
  a6:	3c 81       	ldd	r19, Y+4	; 0x04
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	71 f1       	breq	.+92     	; 0x10a <DIO_vSetPin+0x9e>
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	9c 81       	ldd	r25, Y+4	; 0x04
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	91 05       	cpc	r25, r1
  b6:	e9 f1       	breq	.+122    	; 0x132 <DIO_vSetPin+0xc6>
  b8:	4f c0       	rjmp	.+158    	; 0x158 <DIO_vSetPin+0xec>
	{
	case DIO_PORTA : setbit(PORTA , Copy_u8PinNumber) ;
  ba:	ab e3       	ldi	r26, 0x3B	; 59
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e3       	ldi	r30, 0x3B	; 59
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	48 2f       	mov	r20, r24
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 2e       	mov	r0, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_vSetPin+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_vSetPin+0x68>
  dc:	84 2b       	or	r24, r20
  de:	8c 93       	st	X, r24
  e0:	3b c0       	rjmp	.+118    	; 0x158 <DIO_vSetPin+0xec>
	break;
	case DIO_PORTB : setbit(PORTB , Copy_u8PinNumber) ;
  e2:	a8 e3       	ldi	r26, 0x38	; 56
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e8 e3       	ldi	r30, 0x38	; 56
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	48 2f       	mov	r20, r24
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vSetPin+0x94>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vSetPin+0x90>
 104:	84 2b       	or	r24, r20
 106:	8c 93       	st	X, r24
 108:	27 c0       	rjmp	.+78     	; 0x158 <DIO_vSetPin+0xec>
	break;
	case DIO_PORTC : setbit(PORTC , Copy_u8PinNumber) ;
 10a:	a5 e3       	ldi	r26, 0x35	; 53
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e3       	ldi	r30, 0x35	; 53
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_vSetPin+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_vSetPin+0xb8>
 12c:	84 2b       	or	r24, r20
 12e:	8c 93       	st	X, r24
 130:	13 c0       	rjmp	.+38     	; 0x158 <DIO_vSetPin+0xec>
	break;
	case DIO_PORTD : setbit(PORTD , Copy_u8PinNumber) ;
 132:	a2 e3       	ldi	r26, 0x32	; 50
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e2 e3       	ldi	r30, 0x32	; 50
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	48 2f       	mov	r20, r24
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vSetPin+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vSetPin+0xe0>
 154:	84 2b       	or	r24, r20
 156:	8c 93       	st	X, r24
	break;
	}

}
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <DIO_vClrPin>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vClrPin(u8 Copy_u8PORT ,u8 Copy_u8PinNumber)
{
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <DIO_vClrPin+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <DIO_vClrPin+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORT)
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	3c 83       	std	Y+4, r19	; 0x04
 17e:	2b 83       	std	Y+3, r18	; 0x03
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	9c 81       	ldd	r25, Y+4	; 0x04
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 05       	cpc	r25, r1
 188:	59 f1       	breq	.+86     	; 0x1e0 <DIO_vClrPin+0x7a>
 18a:	2b 81       	ldd	r18, Y+3	; 0x03
 18c:	3c 81       	ldd	r19, Y+4	; 0x04
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	31 05       	cpc	r19, r1
 192:	2c f4       	brge	.+10     	; 0x19e <DIO_vClrPin+0x38>
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	69 f0       	breq	.+26     	; 0x1b6 <DIO_vClrPin+0x50>
 19c:	5f c0       	rjmp	.+190    	; 0x25c <DIO_vClrPin+0xf6>
 19e:	2b 81       	ldd	r18, Y+3	; 0x03
 1a0:	3c 81       	ldd	r19, Y+4	; 0x04
 1a2:	22 30       	cpi	r18, 0x02	; 2
 1a4:	31 05       	cpc	r19, r1
 1a6:	89 f1       	breq	.+98     	; 0x20a <DIO_vClrPin+0xa4>
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	9c 81       	ldd	r25, Y+4	; 0x04
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	91 05       	cpc	r25, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_vClrPin+0x4e>
 1b2:	40 c0       	rjmp	.+128    	; 0x234 <DIO_vClrPin+0xce>
 1b4:	53 c0       	rjmp	.+166    	; 0x25c <DIO_vClrPin+0xf6>
	{
	case DIO_PORTA : clrbit(PORTA , Copy_u8PinNumber) ;
 1b6:	ab e3       	ldi	r26, 0x3B	; 59
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	eb e3       	ldi	r30, 0x3B	; 59
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_vClrPin+0x6e>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_vClrPin+0x6a>
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	3e c0       	rjmp	.+124    	; 0x25c <DIO_vClrPin+0xf6>
	break;
	case DIO_PORTB : clrbit(PORTB , Copy_u8PinNumber) ;
 1e0:	a8 e3       	ldi	r26, 0x38	; 56
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e8 e3       	ldi	r30, 0x38	; 56
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_vClrPin+0x98>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_vClrPin+0x94>
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	8c 93       	st	X, r24
 208:	29 c0       	rjmp	.+82     	; 0x25c <DIO_vClrPin+0xf6>
	break;
	case DIO_PORTC : clrbit(PORTC , Copy_u8PinNumber) ;
 20a:	a5 e3       	ldi	r26, 0x35	; 53
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e5 e3       	ldi	r30, 0x35	; 53
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_vClrPin+0xc2>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_vClrPin+0xbe>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
 232:	14 c0       	rjmp	.+40     	; 0x25c <DIO_vClrPin+0xf6>
	break;
	case DIO_PORTD : clrbit(PORTD , Copy_u8PinNumber) ;
 234:	a2 e3       	ldi	r26, 0x32	; 50
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e2 e3       	ldi	r30, 0x32	; 50
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_vClrPin+0xec>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_vClrPin+0xe8>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	8c 93       	st	X, r24
	break;
	}
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	cf 91       	pop	r28
 266:	df 91       	pop	r29
 268:	08 95       	ret

0000026a <DIO_vToggletPin>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vToggletPin(u8 Copy_u8PORT ,u8 Copy_u8PinNumber)
{
 26a:	df 93       	push	r29
 26c:	cf 93       	push	r28
 26e:	00 d0       	rcall	.+0      	; 0x270 <DIO_vToggletPin+0x6>
 270:	00 d0       	rcall	.+0      	; 0x272 <DIO_vToggletPin+0x8>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORT)
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	3c 83       	std	Y+4, r19	; 0x04
 282:	2b 83       	std	Y+3, r18	; 0x03
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	9c 81       	ldd	r25, Y+4	; 0x04
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	91 05       	cpc	r25, r1
 28c:	49 f1       	breq	.+82     	; 0x2e0 <DIO_vToggletPin+0x76>
 28e:	2b 81       	ldd	r18, Y+3	; 0x03
 290:	3c 81       	ldd	r19, Y+4	; 0x04
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	2c f4       	brge	.+10     	; 0x2a2 <DIO_vToggletPin+0x38>
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	9c 81       	ldd	r25, Y+4	; 0x04
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	61 f0       	breq	.+24     	; 0x2b8 <DIO_vToggletPin+0x4e>
 2a0:	5a c0       	rjmp	.+180    	; 0x356 <DIO_vToggletPin+0xec>
 2a2:	2b 81       	ldd	r18, Y+3	; 0x03
 2a4:	3c 81       	ldd	r19, Y+4	; 0x04
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	31 05       	cpc	r19, r1
 2aa:	71 f1       	breq	.+92     	; 0x308 <DIO_vToggletPin+0x9e>
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	9c 81       	ldd	r25, Y+4	; 0x04
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	91 05       	cpc	r25, r1
 2b4:	e9 f1       	breq	.+122    	; 0x330 <DIO_vToggletPin+0xc6>
 2b6:	4f c0       	rjmp	.+158    	; 0x356 <DIO_vToggletPin+0xec>
	{
	case DIO_PORTA : togglebit(PORTA , Copy_u8PinNumber) ;
 2b8:	ab e3       	ldi	r26, 0x3B	; 59
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	eb e3       	ldi	r30, 0x3B	; 59
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vToggletPin+0x6c>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vToggletPin+0x68>
 2da:	84 27       	eor	r24, r20
 2dc:	8c 93       	st	X, r24
 2de:	3b c0       	rjmp	.+118    	; 0x356 <DIO_vToggletPin+0xec>
	break;
	case DIO_PORTB : togglebit(PORTB , Copy_u8PinNumber) ;
 2e0:	a8 e3       	ldi	r26, 0x38	; 56
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	e8 e3       	ldi	r30, 0x38	; 56
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	48 2f       	mov	r20, r24
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	28 2f       	mov	r18, r24
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 2e       	mov	r0, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_vToggletPin+0x94>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_vToggletPin+0x90>
 302:	84 27       	eor	r24, r20
 304:	8c 93       	st	X, r24
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vToggletPin+0xec>
	break;
	case DIO_PORTC : togglebit(PORTC , Copy_u8PinNumber) ;
 308:	a5 e3       	ldi	r26, 0x35	; 53
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	e5 e3       	ldi	r30, 0x35	; 53
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	48 2f       	mov	r20, r24
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 2e       	mov	r0, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_vToggletPin+0xbc>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_vToggletPin+0xb8>
 32a:	84 27       	eor	r24, r20
 32c:	8c 93       	st	X, r24
 32e:	13 c0       	rjmp	.+38     	; 0x356 <DIO_vToggletPin+0xec>
	break;
	case DIO_PORTD : togglebit(PORTD , Copy_u8PinNumber) ;
 330:	a2 e3       	ldi	r26, 0x32	; 50
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e2 e3       	ldi	r30, 0x32	; 50
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	48 2f       	mov	r20, r24
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 2e       	mov	r0, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_vToggletPin+0xe4>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_vToggletPin+0xe0>
 352:	84 27       	eor	r24, r20
 354:	8c 93       	st	X, r24
	break;
	}


}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	08 95       	ret

00000364 <DIO_vSetPort>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vSetPort(u8 Copy_u8PORT)
{
 364:	df 93       	push	r29
 366:	cf 93       	push	r28
 368:	00 d0       	rcall	.+0      	; 0x36a <DIO_vSetPort+0x6>
 36a:	0f 92       	push	r0
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORT)
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	3b 83       	std	Y+3, r19	; 0x03
 37a:	2a 83       	std	Y+2, r18	; 0x02
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	9b 81       	ldd	r25, Y+3	; 0x03
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	d1 f0       	breq	.+52     	; 0x3ba <DIO_vSetPort+0x56>
 386:	2a 81       	ldd	r18, Y+2	; 0x02
 388:	3b 81       	ldd	r19, Y+3	; 0x03
 38a:	22 30       	cpi	r18, 0x02	; 2
 38c:	31 05       	cpc	r19, r1
 38e:	2c f4       	brge	.+10     	; 0x39a <DIO_vSetPort+0x36>
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	9b 81       	ldd	r25, Y+3	; 0x03
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	61 f0       	breq	.+24     	; 0x3b0 <DIO_vSetPort+0x4c>
 398:	1e c0       	rjmp	.+60     	; 0x3d6 <DIO_vSetPort+0x72>
 39a:	2a 81       	ldd	r18, Y+2	; 0x02
 39c:	3b 81       	ldd	r19, Y+3	; 0x03
 39e:	22 30       	cpi	r18, 0x02	; 2
 3a0:	31 05       	cpc	r19, r1
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <DIO_vSetPort+0x60>
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	9b 81       	ldd	r25, Y+3	; 0x03
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	91 05       	cpc	r25, r1
 3ac:	81 f0       	breq	.+32     	; 0x3ce <DIO_vSetPort+0x6a>
 3ae:	13 c0       	rjmp	.+38     	; 0x3d6 <DIO_vSetPort+0x72>
	{
	case DIO_PORTA : PORTA=0xff ;
 3b0:	eb e3       	ldi	r30, 0x3B	; 59
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 83       	st	Z, r24
 3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <DIO_vSetPort+0x72>
	break;
	case DIO_PORTB : PORTB=0xff ;
 3ba:	e8 e3       	ldi	r30, 0x38	; 56
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	80 83       	st	Z, r24
 3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <DIO_vSetPort+0x72>
	break;
	case DIO_PORTC : PORTC=0xff ;
 3c4:	e5 e3       	ldi	r30, 0x35	; 53
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	80 83       	st	Z, r24
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <DIO_vSetPort+0x72>
	break;
	case DIO_PORTD : PORTD=0xff ;
 3ce:	e2 e3       	ldi	r30, 0x32	; 50
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	80 83       	st	Z, r24
	break;
	}
}
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	cf 91       	pop	r28
 3de:	df 91       	pop	r29
 3e0:	08 95       	ret

000003e2 <DIO_vClrPort>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vClrPort(u8 Copy_u8PORT)
{
 3e2:	df 93       	push	r29
 3e4:	cf 93       	push	r28
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <DIO_vClrPort+0x6>
 3e8:	0f 92       	push	r0
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORT)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3b 83       	std	Y+3, r19	; 0x03
 3f8:	2a 83       	std	Y+2, r18	; 0x02
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	9b 81       	ldd	r25, Y+3	; 0x03
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	91 05       	cpc	r25, r1
 402:	c9 f0       	breq	.+50     	; 0x436 <DIO_vClrPort+0x54>
 404:	2a 81       	ldd	r18, Y+2	; 0x02
 406:	3b 81       	ldd	r19, Y+3	; 0x03
 408:	22 30       	cpi	r18, 0x02	; 2
 40a:	31 05       	cpc	r19, r1
 40c:	2c f4       	brge	.+10     	; 0x418 <DIO_vClrPort+0x36>
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	9b 81       	ldd	r25, Y+3	; 0x03
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	61 f0       	breq	.+24     	; 0x42e <DIO_vClrPort+0x4c>
 416:	1a c0       	rjmp	.+52     	; 0x44c <DIO_vClrPort+0x6a>
 418:	2a 81       	ldd	r18, Y+2	; 0x02
 41a:	3b 81       	ldd	r19, Y+3	; 0x03
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	31 05       	cpc	r19, r1
 420:	71 f0       	breq	.+28     	; 0x43e <DIO_vClrPort+0x5c>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	91 05       	cpc	r25, r1
 42a:	69 f0       	breq	.+26     	; 0x446 <DIO_vClrPort+0x64>
 42c:	0f c0       	rjmp	.+30     	; 0x44c <DIO_vClrPort+0x6a>
	{
	case DIO_PORTA : PORTA=0 ;
 42e:	eb e3       	ldi	r30, 0x3B	; 59
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	10 82       	st	Z, r1
 434:	0b c0       	rjmp	.+22     	; 0x44c <DIO_vClrPort+0x6a>
	break;
	case DIO_PORTB : PORTB=0 ;
 436:	e8 e3       	ldi	r30, 0x38	; 56
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	10 82       	st	Z, r1
 43c:	07 c0       	rjmp	.+14     	; 0x44c <DIO_vClrPort+0x6a>
	break;
	case DIO_PORTC : PORTC=0 ;
 43e:	e5 e3       	ldi	r30, 0x35	; 53
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	10 82       	st	Z, r1
 444:	03 c0       	rjmp	.+6      	; 0x44c <DIO_vClrPort+0x6a>
	break;
	case DIO_PORTD : PORTD=0 ;
 446:	e2 e3       	ldi	r30, 0x32	; 50
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	10 82       	st	Z, r1
	break;
	}


}
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	08 95       	ret

00000458 <DIO_vPin_Direction>:
 * 1 -> DDRB
 * 2 -> DDRC
 * 3 -> DDRD
 */
void DIO_vPin_Direction(u8 Copy_u8PORT ,u8 Copy_u8PinNumber, u8 Copy_u8PortDirection)
{
 458:	df 93       	push	r29
 45a:	cf 93       	push	r28
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	27 97       	sbiw	r28, 0x07	; 7
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	89 83       	std	Y+1, r24	; 0x01
 46e:	6a 83       	std	Y+2, r22	; 0x02
 470:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortDirection == DIO_Input) // check if the direction is input
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	88 23       	and	r24, r24
 476:	09 f0       	breq	.+2      	; 0x47a <__stack+0x1b>
 478:	6f c0       	rjmp	.+222    	; 0x558 <__stack+0xf9>
	{
	switch(Copy_u8PORT)
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	3f 83       	std	Y+7, r19	; 0x07
 482:	2e 83       	std	Y+6, r18	; 0x06
 484:	8e 81       	ldd	r24, Y+6	; 0x06
 486:	9f 81       	ldd	r25, Y+7	; 0x07
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	91 05       	cpc	r25, r1
 48c:	49 f1       	breq	.+82     	; 0x4e0 <__stack+0x81>
 48e:	2e 81       	ldd	r18, Y+6	; 0x06
 490:	3f 81       	ldd	r19, Y+7	; 0x07
 492:	22 30       	cpi	r18, 0x02	; 2
 494:	31 05       	cpc	r19, r1
 496:	2c f4       	brge	.+10     	; 0x4a2 <__stack+0x43>
 498:	8e 81       	ldd	r24, Y+6	; 0x06
 49a:	9f 81       	ldd	r25, Y+7	; 0x07
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	61 f0       	breq	.+24     	; 0x4b8 <__stack+0x59>
 4a0:	d2 c0       	rjmp	.+420    	; 0x646 <__stack+0x1e7>
 4a2:	2e 81       	ldd	r18, Y+6	; 0x06
 4a4:	3f 81       	ldd	r19, Y+7	; 0x07
 4a6:	22 30       	cpi	r18, 0x02	; 2
 4a8:	31 05       	cpc	r19, r1
 4aa:	71 f1       	breq	.+92     	; 0x508 <__stack+0xa9>
 4ac:	8e 81       	ldd	r24, Y+6	; 0x06
 4ae:	9f 81       	ldd	r25, Y+7	; 0x07
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	91 05       	cpc	r25, r1
 4b4:	e9 f1       	breq	.+122    	; 0x530 <__stack+0xd1>
 4b6:	c7 c0       	rjmp	.+398    	; 0x646 <__stack+0x1e7>
	{
	case DIO_DDRA : setbit(DDRA , Copy_u8PinNumber) ;
 4b8:	aa e3       	ldi	r26, 0x3A	; 58
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	ea e3       	ldi	r30, 0x3A	; 58
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__stack+0x77>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__stack+0x73>
 4da:	84 2b       	or	r24, r20
 4dc:	8c 93       	st	X, r24
 4de:	b3 c0       	rjmp	.+358    	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRB : setbit(DDRB , Copy_u8PinNumber) ;
 4e0:	a7 e3       	ldi	r26, 0x37	; 55
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e7 e3       	ldi	r30, 0x37	; 55
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__stack+0x9f>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <__stack+0x9b>
 502:	84 2b       	or	r24, r20
 504:	8c 93       	st	X, r24
 506:	9f c0       	rjmp	.+318    	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRC : setbit(DDRC , Copy_u8PinNumber) ;
 508:	a4 e3       	ldi	r26, 0x34	; 52
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	e4 e3       	ldi	r30, 0x34	; 52
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <__stack+0xc7>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <__stack+0xc3>
 52a:	84 2b       	or	r24, r20
 52c:	8c 93       	st	X, r24
 52e:	8b c0       	rjmp	.+278    	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRD : setbit(DDRD , Copy_u8PinNumber) ;
 530:	a1 e3       	ldi	r26, 0x31	; 49
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e1 e3       	ldi	r30, 0x31	; 49
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <__stack+0xef>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <__stack+0xeb>
 552:	84 2b       	or	r24, r20
 554:	8c 93       	st	X, r24
 556:	77 c0       	rjmp	.+238    	; 0x646 <__stack+0x1e7>
	break;
	}
	}

	else if(Copy_u8PortDirection == DIO_Output) // check if the direction is output
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	09 f0       	breq	.+2      	; 0x560 <__stack+0x101>
 55e:	73 c0       	rjmp	.+230    	; 0x646 <__stack+0x1e7>
	{
	switch(Copy_u8PORT)
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	3d 83       	std	Y+5, r19	; 0x05
 568:	2c 83       	std	Y+4, r18	; 0x04
 56a:	8c 81       	ldd	r24, Y+4	; 0x04
 56c:	9d 81       	ldd	r25, Y+5	; 0x05
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	91 05       	cpc	r25, r1
 572:	59 f1       	breq	.+86     	; 0x5ca <__stack+0x16b>
 574:	2c 81       	ldd	r18, Y+4	; 0x04
 576:	3d 81       	ldd	r19, Y+5	; 0x05
 578:	22 30       	cpi	r18, 0x02	; 2
 57a:	31 05       	cpc	r19, r1
 57c:	2c f4       	brge	.+10     	; 0x588 <__stack+0x129>
 57e:	8c 81       	ldd	r24, Y+4	; 0x04
 580:	9d 81       	ldd	r25, Y+5	; 0x05
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	69 f0       	breq	.+26     	; 0x5a0 <__stack+0x141>
 586:	5f c0       	rjmp	.+190    	; 0x646 <__stack+0x1e7>
 588:	2c 81       	ldd	r18, Y+4	; 0x04
 58a:	3d 81       	ldd	r19, Y+5	; 0x05
 58c:	22 30       	cpi	r18, 0x02	; 2
 58e:	31 05       	cpc	r19, r1
 590:	89 f1       	breq	.+98     	; 0x5f4 <__stack+0x195>
 592:	8c 81       	ldd	r24, Y+4	; 0x04
 594:	9d 81       	ldd	r25, Y+5	; 0x05
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	91 05       	cpc	r25, r1
 59a:	09 f4       	brne	.+2      	; 0x59e <__stack+0x13f>
 59c:	40 c0       	rjmp	.+128    	; 0x61e <__stack+0x1bf>
 59e:	53 c0       	rjmp	.+166    	; 0x646 <__stack+0x1e7>
	{
	case DIO_DDRA : clrbit(DDRA , Copy_u8PinNumber) ;
 5a0:	aa e3       	ldi	r26, 0x3A	; 58
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	ea e3       	ldi	r30, 0x3A	; 58
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	48 2f       	mov	r20, r24
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 2e       	mov	r0, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__stack+0x15f>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <__stack+0x15b>
 5c2:	80 95       	com	r24
 5c4:	84 23       	and	r24, r20
 5c6:	8c 93       	st	X, r24
 5c8:	3e c0       	rjmp	.+124    	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRB : clrbit(DDRB , Copy_u8PinNumber) ;
 5ca:	a7 e3       	ldi	r26, 0x37	; 55
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	e7 e3       	ldi	r30, 0x37	; 55
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	48 2f       	mov	r20, r24
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 2e       	mov	r0, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__stack+0x189>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <__stack+0x185>
 5ec:	80 95       	com	r24
 5ee:	84 23       	and	r24, r20
 5f0:	8c 93       	st	X, r24
 5f2:	29 c0       	rjmp	.+82     	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRC : clrbit(DDRC , Copy_u8PinNumber) ;
 5f4:	a4 e3       	ldi	r26, 0x34	; 52
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e4 e3       	ldi	r30, 0x34	; 52
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	48 2f       	mov	r20, r24
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 2e       	mov	r0, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <__stack+0x1b3>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	0a 94       	dec	r0
 614:	e2 f7       	brpl	.-8      	; 0x60e <__stack+0x1af>
 616:	80 95       	com	r24
 618:	84 23       	and	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__stack+0x1e7>
	break;
	case DIO_DDRD : clrbit(DDRD , Copy_u8PinNumber) ;
 61e:	a1 e3       	ldi	r26, 0x31	; 49
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e1 e3       	ldi	r30, 0x31	; 49
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 2e       	mov	r0, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <__stack+0x1dd>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <__stack+0x1d9>
 640:	80 95       	com	r24
 642:	84 23       	and	r24, r20
 644:	8c 93       	st	X, r24
	break;
	}
	}

	else{}
}
 646:	27 96       	adiw	r28, 0x07	; 7
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	08 95       	ret

00000658 <DIO_vPort_Direction>:
 * 1 -> DDRB
 * 2 -> DDRC
 * 3 -> DDRD
 */
void DIO_vPort_Direction(u8 Copy_u8PORT , u8 Copy_u8PortDirection)
{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_vPort_Direction+0x6>
 65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_vPort_Direction+0x8>
 660:	00 d0       	rcall	.+0      	; 0x662 <DIO_vPort_Direction+0xa>
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDirection == DIO_Input) // check if the direction is input
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	88 23       	and	r24, r24
 66e:	71 f5       	brne	.+92     	; 0x6cc <DIO_vPort_Direction+0x74>
	{
	switch(Copy_u8PORT)
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	3e 83       	std	Y+6, r19	; 0x06
 678:	2d 83       	std	Y+5, r18	; 0x05
 67a:	8d 81       	ldd	r24, Y+5	; 0x05
 67c:	9e 81       	ldd	r25, Y+6	; 0x06
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	91 05       	cpc	r25, r1
 682:	c9 f0       	breq	.+50     	; 0x6b6 <DIO_vPort_Direction+0x5e>
 684:	2d 81       	ldd	r18, Y+5	; 0x05
 686:	3e 81       	ldd	r19, Y+6	; 0x06
 688:	22 30       	cpi	r18, 0x02	; 2
 68a:	31 05       	cpc	r19, r1
 68c:	2c f4       	brge	.+10     	; 0x698 <DIO_vPort_Direction+0x40>
 68e:	8d 81       	ldd	r24, Y+5	; 0x05
 690:	9e 81       	ldd	r25, Y+6	; 0x06
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	61 f0       	breq	.+24     	; 0x6ae <DIO_vPort_Direction+0x56>
 696:	1a c0       	rjmp	.+52     	; 0x6cc <DIO_vPort_Direction+0x74>
 698:	2d 81       	ldd	r18, Y+5	; 0x05
 69a:	3e 81       	ldd	r19, Y+6	; 0x06
 69c:	22 30       	cpi	r18, 0x02	; 2
 69e:	31 05       	cpc	r19, r1
 6a0:	71 f0       	breq	.+28     	; 0x6be <DIO_vPort_Direction+0x66>
 6a2:	8d 81       	ldd	r24, Y+5	; 0x05
 6a4:	9e 81       	ldd	r25, Y+6	; 0x06
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	91 05       	cpc	r25, r1
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <DIO_vPort_Direction+0x6e>
 6ac:	0f c0       	rjmp	.+30     	; 0x6cc <DIO_vPort_Direction+0x74>
	{
	case DIO_DDRA : DDRA=0 ;
 6ae:	ea e3       	ldi	r30, 0x3A	; 58
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	10 82       	st	Z, r1
 6b4:	0b c0       	rjmp	.+22     	; 0x6cc <DIO_vPort_Direction+0x74>
	break;
	case DIO_DDRB : DDRB=0 ;
 6b6:	e7 e3       	ldi	r30, 0x37	; 55
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	10 82       	st	Z, r1
 6bc:	07 c0       	rjmp	.+14     	; 0x6cc <DIO_vPort_Direction+0x74>
	break;
	case DIO_DDRC : DDRC=0 ;
 6be:	e4 e3       	ldi	r30, 0x34	; 52
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	10 82       	st	Z, r1
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <DIO_vPort_Direction+0x74>
	break;
	case DIO_DDRD : DDRD=0 ;
 6c6:	e1 e3       	ldi	r30, 0x31	; 49
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	10 82       	st	Z, r1
	break;
	}
	}

	if(Copy_u8PortDirection == DIO_Output) // check if the direction is output
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	91 f5       	brne	.+100    	; 0x736 <DIO_vPort_Direction+0xde>
	{
		switch(Copy_u8PORT)
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	3c 83       	std	Y+4, r19	; 0x04
 6da:	2b 83       	std	Y+3, r18	; 0x03
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	9c 81       	ldd	r25, Y+4	; 0x04
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	91 05       	cpc	r25, r1
 6e4:	d1 f0       	breq	.+52     	; 0x71a <DIO_vPort_Direction+0xc2>
 6e6:	2b 81       	ldd	r18, Y+3	; 0x03
 6e8:	3c 81       	ldd	r19, Y+4	; 0x04
 6ea:	22 30       	cpi	r18, 0x02	; 2
 6ec:	31 05       	cpc	r19, r1
 6ee:	2c f4       	brge	.+10     	; 0x6fa <DIO_vPort_Direction+0xa2>
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	9c 81       	ldd	r25, Y+4	; 0x04
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	61 f0       	breq	.+24     	; 0x710 <DIO_vPort_Direction+0xb8>
 6f8:	1e c0       	rjmp	.+60     	; 0x736 <DIO_vPort_Direction+0xde>
 6fa:	2b 81       	ldd	r18, Y+3	; 0x03
 6fc:	3c 81       	ldd	r19, Y+4	; 0x04
 6fe:	22 30       	cpi	r18, 0x02	; 2
 700:	31 05       	cpc	r19, r1
 702:	81 f0       	breq	.+32     	; 0x724 <DIO_vPort_Direction+0xcc>
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	9c 81       	ldd	r25, Y+4	; 0x04
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	91 05       	cpc	r25, r1
 70c:	81 f0       	breq	.+32     	; 0x72e <DIO_vPort_Direction+0xd6>
 70e:	13 c0       	rjmp	.+38     	; 0x736 <DIO_vPort_Direction+0xde>
		{
		case DIO_DDRA : DDRA=0xff ;
 710:	ea e3       	ldi	r30, 0x3A	; 58
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	80 83       	st	Z, r24
 718:	0e c0       	rjmp	.+28     	; 0x736 <DIO_vPort_Direction+0xde>
		break;
		case DIO_DDRB : DDRB=0xff ;
 71a:	e7 e3       	ldi	r30, 0x37	; 55
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	80 83       	st	Z, r24
 722:	09 c0       	rjmp	.+18     	; 0x736 <DIO_vPort_Direction+0xde>
		break;
		case DIO_DDRC : DDRC=0xff ;
 724:	e4 e3       	ldi	r30, 0x34	; 52
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	80 83       	st	Z, r24
 72c:	04 c0       	rjmp	.+8      	; 0x736 <DIO_vPort_Direction+0xde>
		break;
		case DIO_DDRD : DDRD=0xff ;
 72e:	e1 e3       	ldi	r30, 0x31	; 49
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	80 83       	st	Z, r24
		break;
		}
	}

}
 736:	26 96       	adiw	r28, 0x06	; 6
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
 742:	cf 91       	pop	r28
 744:	df 91       	pop	r29
 746:	08 95       	ret

00000748 <DIO_vGetPin>:
 * 1 -> PINB
 * 2 -> PINC
 * 3 -> PIND
 */
u8 DIO_vGetPin(u8 Copy_u8PIN , u8 Copy_u8PinNumber)
{
 748:	df 93       	push	r29
 74a:	cf 93       	push	r28
 74c:	00 d0       	rcall	.+0      	; 0x74e <DIO_vGetPin+0x6>
 74e:	00 d0       	rcall	.+0      	; 0x750 <DIO_vGetPin+0x8>
 750:	0f 92       	push	r0
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	8a 83       	std	Y+2, r24	; 0x02
 758:	6b 83       	std	Y+3, r22	; 0x03
	u8 temp=0 ;
 75a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PIN)
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	3d 83       	std	Y+5, r19	; 0x05
 764:	2c 83       	std	Y+4, r18	; 0x04
 766:	6c 81       	ldd	r22, Y+4	; 0x04
 768:	7d 81       	ldd	r23, Y+5	; 0x05
 76a:	61 30       	cpi	r22, 0x01	; 1
 76c:	71 05       	cpc	r23, r1
 76e:	a9 f1       	breq	.+106    	; 0x7da <DIO_vGetPin+0x92>
 770:	8c 81       	ldd	r24, Y+4	; 0x04
 772:	9d 81       	ldd	r25, Y+5	; 0x05
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	91 05       	cpc	r25, r1
 778:	34 f4       	brge	.+12     	; 0x786 <DIO_vGetPin+0x3e>
 77a:	2c 81       	ldd	r18, Y+4	; 0x04
 77c:	3d 81       	ldd	r19, Y+5	; 0x05
 77e:	21 15       	cp	r18, r1
 780:	31 05       	cpc	r19, r1
 782:	71 f0       	breq	.+28     	; 0x7a0 <DIO_vGetPin+0x58>
 784:	80 c0       	rjmp	.+256    	; 0x886 <DIO_vGetPin+0x13e>
 786:	6c 81       	ldd	r22, Y+4	; 0x04
 788:	7d 81       	ldd	r23, Y+5	; 0x05
 78a:	62 30       	cpi	r22, 0x02	; 2
 78c:	71 05       	cpc	r23, r1
 78e:	09 f4       	brne	.+2      	; 0x792 <DIO_vGetPin+0x4a>
 790:	41 c0       	rjmp	.+130    	; 0x814 <DIO_vGetPin+0xcc>
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	9d 81       	ldd	r25, Y+5	; 0x05
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	91 05       	cpc	r25, r1
 79a:	09 f4       	brne	.+2      	; 0x79e <DIO_vGetPin+0x56>
 79c:	58 c0       	rjmp	.+176    	; 0x84e <DIO_vGetPin+0x106>
 79e:	73 c0       	rjmp	.+230    	; 0x886 <DIO_vGetPin+0x13e>
	{
	case DIO_PINA :
	{
	    temp = getbit(PINA , Copy_u8PinNumber) ;
 7a0:	e9 e3       	ldi	r30, 0x39	; 57
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	bc 01       	movw	r22, r24
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_vGetPin+0x72>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	2a 95       	dec	r18
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_vGetPin+0x6e>
 7be:	9b 01       	movw	r18, r22
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	88 2f       	mov	r24, r24
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	b9 01       	movw	r22, r18
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_vGetPin+0x86>
 7ca:	75 95       	asr	r23
 7cc:	67 95       	ror	r22
 7ce:	8a 95       	dec	r24
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_vGetPin+0x82>
 7d2:	cb 01       	movw	r24, r22
 7d4:	84 23       	and	r24, r20
 7d6:	89 83       	std	Y+1, r24	; 0x01
 7d8:	56 c0       	rjmp	.+172    	; 0x886 <DIO_vGetPin+0x13e>
	     break;
	}
	case DIO_PINB :
	{
	    temp = getbit(PINB , Copy_u8PinNumber) ;
 7da:	e6 e3       	ldi	r30, 0x36	; 54
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	48 2f       	mov	r20, r24
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	28 2f       	mov	r18, r24
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	bc 01       	movw	r22, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_vGetPin+0xac>
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	2a 95       	dec	r18
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_vGetPin+0xa8>
 7f8:	9b 01       	movw	r18, r22
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	88 2f       	mov	r24, r24
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	b9 01       	movw	r22, r18
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_vGetPin+0xc0>
 804:	75 95       	asr	r23
 806:	67 95       	ror	r22
 808:	8a 95       	dec	r24
 80a:	e2 f7       	brpl	.-8      	; 0x804 <DIO_vGetPin+0xbc>
 80c:	cb 01       	movw	r24, r22
 80e:	84 23       	and	r24, r20
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	39 c0       	rjmp	.+114    	; 0x886 <DIO_vGetPin+0x13e>
	     break;
	}
	case DIO_PINC :
	{
	    temp = getbit(PINC , Copy_u8PinNumber) ;
 814:	e3 e3       	ldi	r30, 0x33	; 51
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	48 2f       	mov	r20, r24
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	bc 01       	movw	r22, r24
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_vGetPin+0xe6>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	2a 95       	dec	r18
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_vGetPin+0xe2>
 832:	9b 01       	movw	r18, r22
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	88 2f       	mov	r24, r24
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	b9 01       	movw	r22, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_vGetPin+0xfa>
 83e:	75 95       	asr	r23
 840:	67 95       	ror	r22
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_vGetPin+0xf6>
 846:	cb 01       	movw	r24, r22
 848:	84 23       	and	r24, r20
 84a:	89 83       	std	Y+1, r24	; 0x01
 84c:	1c c0       	rjmp	.+56     	; 0x886 <DIO_vGetPin+0x13e>
	     break;
	}

	case DIO_PIND :
	{
	    temp = getbit(PINC , Copy_u8PinNumber) ;
 84e:	e3 e3       	ldi	r30, 0x33	; 51
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	48 2f       	mov	r20, r24
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	28 2f       	mov	r18, r24
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	bc 01       	movw	r22, r24
 862:	02 c0       	rjmp	.+4      	; 0x868 <DIO_vGetPin+0x120>
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	2a 95       	dec	r18
 86a:	e2 f7       	brpl	.-8      	; 0x864 <DIO_vGetPin+0x11c>
 86c:	9b 01       	movw	r18, r22
 86e:	8b 81       	ldd	r24, Y+3	; 0x03
 870:	88 2f       	mov	r24, r24
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	b9 01       	movw	r22, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <DIO_vGetPin+0x134>
 878:	75 95       	asr	r23
 87a:	67 95       	ror	r22
 87c:	8a 95       	dec	r24
 87e:	e2 f7       	brpl	.-8      	; 0x878 <DIO_vGetPin+0x130>
 880:	cb 01       	movw	r24, r22
 882:	84 23       	and	r24, r20
 884:	89 83       	std	Y+1, r24	; 0x01
	     break;
	}

	}

    return temp;
 886:	89 81       	ldd	r24, Y+1	; 0x01
}
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <DIO_vToggletPort>:
 * 1 -> PORTB
 * 2 -> PORTC
 * 3-> PORTD
 */
void DIO_vToggletPort(u8 Copy_u8PORT)
{
 898:	df 93       	push	r29
 89a:	cf 93       	push	r28
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	2b 97       	sbiw	r28, 0x0b	; 11
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	89 87       	std	Y+9, r24	; 0x09
	switch(Copy_u8PORT)
 8ae:	89 85       	ldd	r24, Y+9	; 0x09
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	3b 87       	std	Y+11, r19	; 0x0b
 8b6:	2a 87       	std	Y+10, r18	; 0x0a
 8b8:	8a 85       	ldd	r24, Y+10	; 0x0a
 8ba:	9b 85       	ldd	r25, Y+11	; 0x0b
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	91 05       	cpc	r25, r1
 8c0:	a9 f1       	breq	.+106    	; 0x92c <DIO_vToggletPort+0x94>
 8c2:	2a 85       	ldd	r18, Y+10	; 0x0a
 8c4:	3b 85       	ldd	r19, Y+11	; 0x0b
 8c6:	22 30       	cpi	r18, 0x02	; 2
 8c8:	31 05       	cpc	r19, r1
 8ca:	2c f4       	brge	.+10     	; 0x8d6 <DIO_vToggletPort+0x3e>
 8cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 8ce:	9b 85       	ldd	r25, Y+11	; 0x0b
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <DIO_vToggletPort+0x58>
 8d4:	84 c0       	rjmp	.+264    	; 0x9de <DIO_vToggletPort+0x146>
 8d6:	2a 85       	ldd	r18, Y+10	; 0x0a
 8d8:	3b 85       	ldd	r19, Y+11	; 0x0b
 8da:	22 30       	cpi	r18, 0x02	; 2
 8dc:	31 05       	cpc	r19, r1
 8de:	09 f4       	brne	.+2      	; 0x8e2 <DIO_vToggletPort+0x4a>
 8e0:	43 c0       	rjmp	.+134    	; 0x968 <DIO_vToggletPort+0xd0>
 8e2:	8a 85       	ldd	r24, Y+10	; 0x0a
 8e4:	9b 85       	ldd	r25, Y+11	; 0x0b
 8e6:	83 30       	cpi	r24, 0x03	; 3
 8e8:	91 05       	cpc	r25, r1
 8ea:	09 f4       	brne	.+2      	; 0x8ee <DIO_vToggletPort+0x56>
 8ec:	5b c0       	rjmp	.+182    	; 0x9a4 <DIO_vToggletPort+0x10c>
 8ee:	77 c0       	rjmp	.+238    	; 0x9de <DIO_vToggletPort+0x146>
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 8f0:	18 86       	std	Y+8, r1	; 0x08
 8f2:	1f 82       	std	Y+7, r1	; 0x07
 8f4:	15 c0       	rjmp	.+42     	; 0x920 <DIO_vToggletPort+0x88>
		{
			togglebit(PORTA , Pin_Counter) ;
 8f6:	ab e3       	ldi	r26, 0x3B	; 59
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	eb e3       	ldi	r30, 0x3B	; 59
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	28 2f       	mov	r18, r24
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0f 80       	ldd	r0, Y+7	; 0x07
 908:	02 c0       	rjmp	.+4      	; 0x90e <DIO_vToggletPort+0x76>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	0a 94       	dec	r0
 910:	e2 f7       	brpl	.-8      	; 0x90a <DIO_vToggletPort+0x72>
 912:	82 27       	eor	r24, r18
 914:	8c 93       	st	X, r24
{
	switch(Copy_u8PORT)
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 916:	8f 81       	ldd	r24, Y+7	; 0x07
 918:	98 85       	ldd	r25, Y+8	; 0x08
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	98 87       	std	Y+8, r25	; 0x08
 91e:	8f 83       	std	Y+7, r24	; 0x07
 920:	8f 81       	ldd	r24, Y+7	; 0x07
 922:	98 85       	ldd	r25, Y+8	; 0x08
 924:	88 30       	cpi	r24, 0x08	; 8
 926:	91 05       	cpc	r25, r1
 928:	34 f3       	brlt	.-52     	; 0x8f6 <DIO_vToggletPort+0x5e>
 92a:	59 c0       	rjmp	.+178    	; 0x9de <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 92c:	1e 82       	std	Y+6, r1	; 0x06
 92e:	1d 82       	std	Y+5, r1	; 0x05
 930:	15 c0       	rjmp	.+42     	; 0x95c <DIO_vToggletPort+0xc4>
		{
			togglebit(PORTB , Pin_Counter) ;
 932:	a8 e3       	ldi	r26, 0x38	; 56
 934:	b0 e0       	ldi	r27, 0x00	; 0
 936:	e8 e3       	ldi	r30, 0x38	; 56
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	28 2f       	mov	r18, r24
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0d 80       	ldd	r0, Y+5	; 0x05
 944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_vToggletPort+0xb2>
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	0a 94       	dec	r0
 94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_vToggletPort+0xae>
 94e:	82 27       	eor	r24, r18
 950:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 952:	8d 81       	ldd	r24, Y+5	; 0x05
 954:	9e 81       	ldd	r25, Y+6	; 0x06
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	9e 83       	std	Y+6, r25	; 0x06
 95a:	8d 83       	std	Y+5, r24	; 0x05
 95c:	8d 81       	ldd	r24, Y+5	; 0x05
 95e:	9e 81       	ldd	r25, Y+6	; 0x06
 960:	88 30       	cpi	r24, 0x08	; 8
 962:	91 05       	cpc	r25, r1
 964:	34 f3       	brlt	.-52     	; 0x932 <DIO_vToggletPort+0x9a>
 966:	3b c0       	rjmp	.+118    	; 0x9de <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 968:	1c 82       	std	Y+4, r1	; 0x04
 96a:	1b 82       	std	Y+3, r1	; 0x03
 96c:	15 c0       	rjmp	.+42     	; 0x998 <DIO_vToggletPort+0x100>
		{
			togglebit(PORTC , Pin_Counter) ;
 96e:	a5 e3       	ldi	r26, 0x35	; 53
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	e5 e3       	ldi	r30, 0x35	; 53
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	28 2f       	mov	r18, r24
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0b 80       	ldd	r0, Y+3	; 0x03
 980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_vToggletPort+0xee>
 982:	88 0f       	add	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	0a 94       	dec	r0
 988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_vToggletPort+0xea>
 98a:	82 27       	eor	r24, r18
 98c:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	9c 81       	ldd	r25, Y+4	; 0x04
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	9c 83       	std	Y+4, r25	; 0x04
 996:	8b 83       	std	Y+3, r24	; 0x03
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	9c 81       	ldd	r25, Y+4	; 0x04
 99c:	88 30       	cpi	r24, 0x08	; 8
 99e:	91 05       	cpc	r25, r1
 9a0:	34 f3       	brlt	.-52     	; 0x96e <DIO_vToggletPort+0xd6>
 9a2:	1d c0       	rjmp	.+58     	; 0x9de <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 9a4:	1a 82       	std	Y+2, r1	; 0x02
 9a6:	19 82       	std	Y+1, r1	; 0x01
 9a8:	15 c0       	rjmp	.+42     	; 0x9d4 <DIO_vToggletPort+0x13c>
		{
			togglebit(PORTD , Pin_Counter) ;
 9aa:	a2 e3       	ldi	r26, 0x32	; 50
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	e2 e3       	ldi	r30, 0x32	; 50
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	28 2f       	mov	r18, r24
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	09 80       	ldd	r0, Y+1	; 0x01
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_vToggletPort+0x12a>
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	0a 94       	dec	r0
 9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_vToggletPort+0x126>
 9c6:	82 27       	eor	r24, r18
 9c8:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	9a 81       	ldd	r25, Y+2	; 0x02
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	9a 83       	std	Y+2, r25	; 0x02
 9d2:	89 83       	std	Y+1, r24	; 0x01
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	9a 81       	ldd	r25, Y+2	; 0x02
 9d8:	88 30       	cpi	r24, 0x08	; 8
 9da:	91 05       	cpc	r25, r1
 9dc:	34 f3       	brlt	.-52     	; 0x9aa <DIO_vToggletPort+0x112>
	}

	}


}
 9de:	2b 96       	adiw	r28, 0x0b	; 11
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	cf 91       	pop	r28
 9ec:	df 91       	pop	r29
 9ee:	08 95       	ret

000009f0 <main>:
#include "DIO_Reg.h"
#include <util/delay.h>
#include "DIO_Int.h"

int main(void)
{
 9f0:	df 93       	push	r29
 9f2:	cf 93       	push	r28
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62

	DIO_vPort_Direction(DIO_DDRB,DIO_Output);
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_vPort_Direction>

    //DDRB = 0xff ;
    DIO_vSetPort(DIO_PORTB);
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_vSetPort>
    DIO_vClrPin(DIO_PORTB , 7);
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	67 e0       	ldi	r22, 0x07	; 7
 a0a:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_vClrPin>
		_delay_ms(1000);
*/
		//DIO_vClrPin(DIO_PORTA , 0);

		//_delay_ms(1000);
		DIO_vClrPin(DIO_PORTB , 7);
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	67 e0       	ldi	r22, 0x07	; 7
 a12:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_vClrPin>
 a16:	fb cf       	rjmp	.-10     	; 0xa0e <main+0x1e>

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
