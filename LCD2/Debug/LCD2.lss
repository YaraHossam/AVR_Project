
LCD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002aee  00002b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e18  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ae3  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005477  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000055b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000825b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000093f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 33 14 	call	0x2866	; 0x2866 <main>
      7a:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vSetPin>:
 * Input: Port number , pin number
 * Output:
 * 1
 */
void DIO_vSetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_vSetPin+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_vSetPin+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	49 f1       	breq	.+82     	; 0xbac <DIO_vSetPin+0x76>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <DIO_vSetPin+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <DIO_vSetPin+0x4e>
     b6c:	5a c0       	rjmp	.+180    	; 0xc22 <DIO_vSetPin+0xec>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	71 f1       	breq	.+92     	; 0xbd4 <DIO_vSetPin+0x9e>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	e9 f1       	breq	.+122    	; 0xbfc <DIO_vSetPin+0xc6>
     b82:	4f c0       	rjmp	.+158    	; 0xc22 <DIO_vSetPin+0xec>
	{
	case  DIO_PORTA:
		setbit(PORTA,Copy_u8PinNumber);
     b84:	ab e3       	ldi	r26, 0x3B	; 59
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	eb e3       	ldi	r30, 0x3B	; 59
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	48 2f       	mov	r20, r24
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 2e       	mov	r0, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_vSetPin+0x6c>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_vSetPin+0x68>
     ba6:	84 2b       	or	r24, r20
     ba8:	8c 93       	st	X, r24
     baa:	3b c0       	rjmp	.+118    	; 0xc22 <DIO_vSetPin+0xec>
		break;
	case  DIO_PORTB:
			setbit(PORTB,Copy_u8PinNumber);
     bac:	a8 e3       	ldi	r26, 0x38	; 56
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e8 e3       	ldi	r30, 0x38	; 56
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	48 2f       	mov	r20, r24
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	02 2e       	mov	r0, r18
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_vSetPin+0x94>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_vSetPin+0x90>
     bce:	84 2b       	or	r24, r20
     bd0:	8c 93       	st	X, r24
     bd2:	27 c0       	rjmp	.+78     	; 0xc22 <DIO_vSetPin+0xec>
			break;
	case  DIO_PORTC:
				setbit(PORTC,Copy_u8PinNumber);
     bd4:	a5 e3       	ldi	r26, 0x35	; 53
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e5 e3       	ldi	r30, 0x35	; 53
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	48 2f       	mov	r20, r24
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	02 2e       	mov	r0, r18
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <DIO_vSetPin+0xbc>
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <DIO_vSetPin+0xb8>
     bf6:	84 2b       	or	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	13 c0       	rjmp	.+38     	; 0xc22 <DIO_vSetPin+0xec>
				break;
	case  DIO_PORTD:
				setbit(PORTD,Copy_u8PinNumber);
     bfc:	a2 e3       	ldi	r26, 0x32	; 50
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e2 e3       	ldi	r30, 0x32	; 50
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_vSetPin+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_vSetPin+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
				break;
	}
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <DIO_vClearPin>:
 * Input: Port number , pin number
 * Output:
 * 2
 */
void DIO_vClearPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <DIO_vClearPin+0x6>
     c36:	00 d0       	rcall	.+0      	; 0xc38 <DIO_vClearPin+0x8>
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3c 83       	std	Y+4, r19	; 0x04
     c48:	2b 83       	std	Y+3, r18	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	59 f1       	breq	.+86     	; 0xcaa <DIO_vClearPin+0x7a>
     c54:	2b 81       	ldd	r18, Y+3	; 0x03
     c56:	3c 81       	ldd	r19, Y+4	; 0x04
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	2c f4       	brge	.+10     	; 0xc68 <DIO_vClearPin+0x38>
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	69 f0       	breq	.+26     	; 0xc80 <DIO_vClearPin+0x50>
     c66:	5f c0       	rjmp	.+190    	; 0xd26 <DIO_vClearPin+0xf6>
     c68:	2b 81       	ldd	r18, Y+3	; 0x03
     c6a:	3c 81       	ldd	r19, Y+4	; 0x04
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	89 f1       	breq	.+98     	; 0xcd4 <DIO_vClearPin+0xa4>
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	09 f4       	brne	.+2      	; 0xc7e <DIO_vClearPin+0x4e>
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vClearPin+0xce>
     c7e:	53 c0       	rjmp	.+166    	; 0xd26 <DIO_vClearPin+0xf6>
	{
	case  DIO_PORTA:
		clearbit(PORTA,Copy_u8PinNumber);
     c80:	ab e3       	ldi	r26, 0x3B	; 59
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	eb e3       	ldi	r30, 0x3B	; 59
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 2e       	mov	r0, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DIO_vClearPin+0x6e>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DIO_vClearPin+0x6a>
     ca2:	80 95       	com	r24
     ca4:	84 23       	and	r24, r20
     ca6:	8c 93       	st	X, r24
     ca8:	3e c0       	rjmp	.+124    	; 0xd26 <DIO_vClearPin+0xf6>
		break;
	case  DIO_PORTB:
		clearbit(PORTB,Copy_u8PinNumber);
     caa:	a8 e3       	ldi	r26, 0x38	; 56
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e3       	ldi	r30, 0x38	; 56
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_vClearPin+0x98>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_vClearPin+0x94>
     ccc:	80 95       	com	r24
     cce:	84 23       	and	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	29 c0       	rjmp	.+82     	; 0xd26 <DIO_vClearPin+0xf6>
			break;
	case  DIO_PORTC:
		clearbit(PORTC,Copy_u8PinNumber);
     cd4:	a5 e3       	ldi	r26, 0x35	; 53
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e5 e3       	ldi	r30, 0x35	; 53
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_vClearPin+0xc2>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_vClearPin+0xbe>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	14 c0       	rjmp	.+40     	; 0xd26 <DIO_vClearPin+0xf6>
				break;
	case  DIO_PORTD:
		clearbit(PORTD,Copy_u8PinNumber);
     cfe:	a2 e3       	ldi	r26, 0x32	; 50
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e2 e3       	ldi	r30, 0x32	; 50
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_vClearPin+0xec>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_vClearPin+0xe8>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
				break;
	}
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <DIO_vTogglePin>:
 * Input: Port number , pin number
 * Output:
 * 3
 */
void DIO_vTogglePin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <DIO_vTogglePin+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <DIO_vTogglePin+0x8>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	3c 83       	std	Y+4, r19	; 0x04
     d4c:	2b 83       	std	Y+3, r18	; 0x03
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	91 05       	cpc	r25, r1
     d56:	49 f1       	breq	.+82     	; 0xdaa <DIO_vTogglePin+0x76>
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	2c f4       	brge	.+10     	; 0xd6c <DIO_vTogglePin+0x38>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	61 f0       	breq	.+24     	; 0xd82 <DIO_vTogglePin+0x4e>
     d6a:	5a c0       	rjmp	.+180    	; 0xe20 <DIO_vTogglePin+0xec>
     d6c:	2b 81       	ldd	r18, Y+3	; 0x03
     d6e:	3c 81       	ldd	r19, Y+4	; 0x04
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	71 f1       	breq	.+92     	; 0xdd2 <DIO_vTogglePin+0x9e>
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	e9 f1       	breq	.+122    	; 0xdfa <DIO_vTogglePin+0xc6>
     d80:	4f c0       	rjmp	.+158    	; 0xe20 <DIO_vTogglePin+0xec>
	{
	case  DIO_PORTA:
		togglebit(PORTA,Copy_u8PinNumber);
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e3       	ldi	r30, 0x3B	; 59
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_vTogglePin+0x6c>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_vTogglePin+0x68>
     da4:	84 27       	eor	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	3b c0       	rjmp	.+118    	; 0xe20 <DIO_vTogglePin+0xec>
		break;
	case  DIO_PORTB:
		togglebit(PORTB,Copy_u8PinNumber);
     daa:	a8 e3       	ldi	r26, 0x38	; 56
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e8 e3       	ldi	r30, 0x38	; 56
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_vTogglePin+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_vTogglePin+0x90>
     dcc:	84 27       	eor	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	27 c0       	rjmp	.+78     	; 0xe20 <DIO_vTogglePin+0xec>
			break;
	case  DIO_PORTC:
		togglebit(PORTC,Copy_u8PinNumber);
     dd2:	a5 e3       	ldi	r26, 0x35	; 53
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_vTogglePin+0xbc>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_vTogglePin+0xb8>
     df4:	84 27       	eor	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	13 c0       	rjmp	.+38     	; 0xe20 <DIO_vTogglePin+0xec>
				break;
	case  DIO_PORTD:
		togglebit(PORTD,Copy_u8PinNumber);
     dfa:	a2 e3       	ldi	r26, 0x32	; 50
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e2 e3       	ldi	r30, 0x32	; 50
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_vTogglePin+0xe4>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_vTogglePin+0xe0>
     e1c:	84 27       	eor	r24, r20
     e1e:	8c 93       	st	X, r24
				break;
	}
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_vGetPin>:
 * Input: Port number , pin number
 * Output:return number of pin whether 0 or 1
 * 4
 */
u8 DIO_vGetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_vGetPin+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_vGetPin+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret;
	switch(Copy_u8PORTNumber)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	3d 83       	std	Y+5, r19	; 0x05
     e48:	2c 83       	std	Y+4, r18	; 0x04
     e4a:	4c 81       	ldd	r20, Y+4	; 0x04
     e4c:	5d 81       	ldd	r21, Y+5	; 0x05
     e4e:	41 30       	cpi	r20, 0x01	; 1
     e50:	51 05       	cpc	r21, r1
     e52:	b1 f1       	breq	.+108    	; 0xec0 <DIO_vGetPin+0x92>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	91 05       	cpc	r25, r1
     e5c:	34 f4       	brge	.+12     	; 0xe6a <DIO_vGetPin+0x3c>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	21 15       	cp	r18, r1
     e64:	31 05       	cpc	r19, r1
     e66:	71 f0       	breq	.+28     	; 0xe84 <DIO_vGetPin+0x56>
     e68:	84 c0       	rjmp	.+264    	; 0xf72 <DIO_vGetPin+0x144>
     e6a:	4c 81       	ldd	r20, Y+4	; 0x04
     e6c:	5d 81       	ldd	r21, Y+5	; 0x05
     e6e:	42 30       	cpi	r20, 0x02	; 2
     e70:	51 05       	cpc	r21, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <DIO_vGetPin+0x48>
     e74:	43 c0       	rjmp	.+134    	; 0xefc <DIO_vGetPin+0xce>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	91 05       	cpc	r25, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_vGetPin+0x54>
     e80:	5b c0       	rjmp	.+182    	; 0xf38 <DIO_vGetPin+0x10a>
     e82:	77 c0       	rjmp	.+238    	; 0xf72 <DIO_vGetPin+0x144>
	{
	case  DIO_PORTA:
		ret= getbit(PINA,Copy_u8PinNumber);
     e84:	e9 e3       	ldi	r30, 0x39	; 57
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_vGetPin+0x70>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	2a 95       	dec	r18
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_vGetPin+0x6c>
     ea2:	9a 01       	movw	r18, r20
     ea4:	28 23       	and	r18, r24
     ea6:	39 23       	and	r19, r25
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_vGetPin+0x88>
     eb2:	55 95       	asr	r21
     eb4:	47 95       	ror	r20
     eb6:	8a 95       	dec	r24
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_vGetPin+0x84>
     eba:	ca 01       	movw	r24, r20
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	59 c0       	rjmp	.+178    	; 0xf72 <DIO_vGetPin+0x144>

		break;
	case  DIO_PORTB:
		ret= getbit(PINB,Copy_u8PinNumber);
     ec0:	e6 e3       	ldi	r30, 0x36	; 54
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_vGetPin+0xac>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	2a 95       	dec	r18
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_vGetPin+0xa8>
     ede:	9a 01       	movw	r18, r20
     ee0:	28 23       	and	r18, r24
     ee2:	39 23       	and	r19, r25
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_vGetPin+0xc4>
     eee:	55 95       	asr	r21
     ef0:	47 95       	ror	r20
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_vGetPin+0xc0>
     ef6:	ca 01       	movw	r24, r20
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	3b c0       	rjmp	.+118    	; 0xf72 <DIO_vGetPin+0x144>
			break;
	case  DIO_PORTC:
		ret= getbit(PINC,Copy_u8PinNumber);
     efc:	e3 e3       	ldi	r30, 0x33	; 51
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_vGetPin+0xe8>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	2a 95       	dec	r18
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_vGetPin+0xe4>
     f1a:	9a 01       	movw	r18, r20
     f1c:	28 23       	and	r18, r24
     f1e:	39 23       	and	r19, r25
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_vGetPin+0x100>
     f2a:	55 95       	asr	r21
     f2c:	47 95       	ror	r20
     f2e:	8a 95       	dec	r24
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_vGetPin+0xfc>
     f32:	ca 01       	movw	r24, r20
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	1d c0       	rjmp	.+58     	; 0xf72 <DIO_vGetPin+0x144>
				break;
	case  DIO_PORTD:
		ret= getbit(PIND,Copy_u8PinNumber);
     f38:	e0 e3       	ldi	r30, 0x30	; 48
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_vGetPin+0x124>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	2a 95       	dec	r18
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_vGetPin+0x120>
     f56:	9a 01       	movw	r18, r20
     f58:	28 23       	and	r18, r24
     f5a:	39 23       	and	r19, r25
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vGetPin+0x13c>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vGetPin+0x138>
     f6e:	ca 01       	movw	r24, r20
     f70:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return ret;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DIO_vSetPort>:
 * Input: Port number
 * Output:
 * 5
 */
void DIO_vSetPort(u8 Copy_u8PORTNumber)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <DIO_vSetPort+0x6>
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	3b 83       	std	Y+3, r19	; 0x03
     f9a:	2a 83       	std	Y+2, r18	; 0x02
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	d1 f0       	breq	.+52     	; 0xfda <DIO_vSetPort+0x56>
     fa6:	2a 81       	ldd	r18, Y+2	; 0x02
     fa8:	3b 81       	ldd	r19, Y+3	; 0x03
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	2c f4       	brge	.+10     	; 0xfba <DIO_vSetPort+0x36>
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <DIO_vSetPort+0x4c>
     fb8:	1e c0       	rjmp	.+60     	; 0xff6 <DIO_vSetPort+0x72>
     fba:	2a 81       	ldd	r18, Y+2	; 0x02
     fbc:	3b 81       	ldd	r19, Y+3	; 0x03
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	81 f0       	breq	.+32     	; 0xfe4 <DIO_vSetPort+0x60>
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	9b 81       	ldd	r25, Y+3	; 0x03
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	81 f0       	breq	.+32     	; 0xfee <DIO_vSetPort+0x6a>
     fce:	13 c0       	rjmp	.+38     	; 0xff6 <DIO_vSetPort+0x72>
	{
	case  DIO_PORTA:
		PORTA=0b11111111;
     fd0:	eb e3       	ldi	r30, 0x3B	; 59
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	80 83       	st	Z, r24
     fd8:	0e c0       	rjmp	.+28     	; 0xff6 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTB:
		PORTB=0b11111111;
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	80 83       	st	Z, r24
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTC:
		PORTC=0b11111111;
     fe4:	e5 e3       	ldi	r30, 0x35	; 53
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	80 83       	st	Z, r24
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTD:
		PORTD=0b11111111;
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24
		break;
	}
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <DIO_vClearPort>:
 * Input: Port number
 * Output:
 * 6
 */
void DIO_vClearPort(u8 Copy_u8PORTNumber)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <DIO_vClearPort+0x6>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3b 83       	std	Y+3, r19	; 0x03
    1018:	2a 83       	std	Y+2, r18	; 0x02
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	c9 f0       	breq	.+50     	; 0x1056 <DIO_vClearPort+0x54>
    1024:	2a 81       	ldd	r18, Y+2	; 0x02
    1026:	3b 81       	ldd	r19, Y+3	; 0x03
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <DIO_vClearPort+0x36>
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	61 f0       	breq	.+24     	; 0x104e <DIO_vClearPort+0x4c>
    1036:	1a c0       	rjmp	.+52     	; 0x106c <DIO_vClearPort+0x6a>
    1038:	2a 81       	ldd	r18, Y+2	; 0x02
    103a:	3b 81       	ldd	r19, Y+3	; 0x03
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	71 f0       	breq	.+28     	; 0x105e <DIO_vClearPort+0x5c>
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	91 05       	cpc	r25, r1
    104a:	69 f0       	breq	.+26     	; 0x1066 <DIO_vClearPort+0x64>
    104c:	0f c0       	rjmp	.+30     	; 0x106c <DIO_vClearPort+0x6a>
	{
	case  DIO_PORTA:
		PORTA=0b00000000;
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	10 82       	st	Z, r1
    1054:	0b c0       	rjmp	.+22     	; 0x106c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTB:
		PORTB=0b00000000;
    1056:	e8 e3       	ldi	r30, 0x38	; 56
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	10 82       	st	Z, r1
    105c:	07 c0       	rjmp	.+14     	; 0x106c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTC:
		PORTC=0b00000000;
    105e:	e5 e3       	ldi	r30, 0x35	; 53
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	10 82       	st	Z, r1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTD:
		PORTD=0b00000000;
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	10 82       	st	Z, r1
		break;
	}
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <DIO_vSetPinDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 7
 */
void DIO_vSetPinDirec(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber,u8 Copy_u8Direc)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2d 97       	sbiw	r28, 0x0d	; 13
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
    1090:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORTNumber)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3d 87       	std	Y+13, r19	; 0x0d
    109a:	2c 87       	std	Y+12, r18	; 0x0c
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_vSetPinDirec+0x30>
    10a6:	4f c0       	rjmp	.+158    	; 0x1146 <DIO_vSetPinDirec+0xce>
    10a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <DIO_vSetPinDirec+0x44>
    10b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	71 f0       	breq	.+28     	; 0x10d6 <DIO_vSetPinDirec+0x5e>
    10ba:	ec c0       	rjmp	.+472    	; 0x1294 <DIO_vSetPinDirec+0x21c>
    10bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10be:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <DIO_vSetPinDirec+0x50>
    10c6:	77 c0       	rjmp	.+238    	; 0x11b6 <DIO_vSetPinDirec+0x13e>
    10c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <DIO_vSetPinDirec+0x5c>
    10d2:	a9 c0       	rjmp	.+338    	; 0x1226 <DIO_vSetPinDirec+0x1ae>
    10d4:	df c0       	rjmp	.+446    	; 0x1294 <DIO_vSetPinDirec+0x21c>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3b 87       	std	Y+11, r19	; 0x0b
    10de:	2a 87       	std	Y+10, r18	; 0x0a
    10e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <DIO_vSetPinDirec+0x7c>
    10e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	b1 f0       	breq	.+44     	; 0x111e <DIO_vSetPinDirec+0xa6>
    10f2:	d0 c0       	rjmp	.+416    	; 0x1294 <DIO_vSetPinDirec+0x21c>
			{
			case DIO_INPUT:
				clearbit(DDRA,Copy_u8PinNumber);
    10f4:	aa e3       	ldi	r26, 0x3A	; 58
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ea e3       	ldi	r30, 0x3A	; 58
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_vSetPinDirec+0x9a>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_vSetPinDirec+0x96>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	bb c0       	rjmp	.+374    	; 0x1294 <DIO_vSetPinDirec+0x21c>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,Copy_u8PinNumber);
    111e:	aa e3       	ldi	r26, 0x3A	; 58
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ea e3       	ldi	r30, 0x3A	; 58
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_vSetPinDirec+0xc4>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_vSetPinDirec+0xc0>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	a7 c0       	rjmp	.+334    	; 0x1294 <DIO_vSetPinDirec+0x21c>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	39 87       	std	Y+9, r19	; 0x09
    114e:	28 87       	std	Y+8, r18	; 0x08
    1150:	88 85       	ldd	r24, Y+8	; 0x08
    1152:	99 85       	ldd	r25, Y+9	; 0x09
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	31 f0       	breq	.+12     	; 0x1164 <DIO_vSetPinDirec+0xec>
    1158:	28 85       	ldd	r18, Y+8	; 0x08
    115a:	39 85       	ldd	r19, Y+9	; 0x09
    115c:	21 30       	cpi	r18, 0x01	; 1
    115e:	31 05       	cpc	r19, r1
    1160:	b1 f0       	breq	.+44     	; 0x118e <DIO_vSetPinDirec+0x116>
    1162:	98 c0       	rjmp	.+304    	; 0x1294 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRB,Copy_u8PinNumber);
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_vSetPinDirec+0x10a>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_vSetPinDirec+0x106>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	83 c0       	rjmp	.+262    	; 0x1294 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,Copy_u8PinNumber);
    118e:	a7 e3       	ldi	r26, 0x37	; 55
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e7 e3       	ldi	r30, 0x37	; 55
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_vSetPinDirec+0x134>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_vSetPinDirec+0x130>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	6f c0       	rjmp	.+222    	; 0x1294 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3f 83       	std	Y+7, r19	; 0x07
    11be:	2e 83       	std	Y+6, r18	; 0x06
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <DIO_vSetPinDirec+0x15c>
    11c8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ca:	3f 81       	ldd	r19, Y+7	; 0x07
    11cc:	21 30       	cpi	r18, 0x01	; 1
    11ce:	31 05       	cpc	r19, r1
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <DIO_vSetPinDirec+0x186>
    11d2:	60 c0       	rjmp	.+192    	; 0x1294 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRC,Copy_u8PinNumber);
    11d4:	a4 e3       	ldi	r26, 0x34	; 52
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e4 e3       	ldi	r30, 0x34	; 52
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_vSetPinDirec+0x17a>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_vSetPinDirec+0x176>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	4b c0       	rjmp	.+150    	; 0x1294 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,Copy_u8PinNumber);
    11fe:	a4 e3       	ldi	r26, 0x34	; 52
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e4 e3       	ldi	r30, 0x34	; 52
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_vSetPinDirec+0x1a4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_vSetPinDirec+0x1a0>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	37 c0       	rjmp	.+110    	; 0x1294 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 83       	std	Y+5, r19	; 0x05
    122e:	2c 83       	std	Y+4, r18	; 0x04
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	31 f0       	breq	.+12     	; 0x1244 <DIO_vSetPinDirec+0x1cc>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	21 30       	cpi	r18, 0x01	; 1
    123e:	31 05       	cpc	r19, r1
    1240:	b1 f0       	breq	.+44     	; 0x126e <DIO_vSetPinDirec+0x1f6>
    1242:	28 c0       	rjmp	.+80     	; 0x1294 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRD,Copy_u8PinNumber);
    1244:	a1 e3       	ldi	r26, 0x31	; 49
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_vSetPinDirec+0x1ea>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_vSetPinDirec+0x1e6>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,Copy_u8PinNumber);
    126e:	a1 e3       	ldi	r26, 0x31	; 49
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e1 e3       	ldi	r30, 0x31	; 49
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_vSetPinDirec+0x214>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_vSetPinDirec+0x210>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    1294:	2d 96       	adiw	r28, 0x0d	; 13
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <DIO_vToggletPort>:
 * Input: Port number
 * Output:
 * 8
 */
void DIO_vToggletPort(u8 Copy_u8PORTNumber)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	2b 97       	sbiw	r28, 0x0b	; 11
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	89 87       	std	Y+9, r24	; 0x09
	switch(Copy_u8PORTNumber)
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3b 87       	std	Y+11, r19	; 0x0b
    12c4:	2a 87       	std	Y+10, r18	; 0x0a
    12c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	a9 f1       	breq	.+106    	; 0x133a <DIO_vToggletPort+0x94>
    12d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    12d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_vToggletPort+0x3e>
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f0       	breq	.+28     	; 0x12fe <DIO_vToggletPort+0x58>
    12e2:	84 c0       	rjmp	.+264    	; 0x13ec <DIO_vToggletPort+0x146>
    12e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_vToggletPort+0x4a>
    12ee:	43 c0       	rjmp	.+134    	; 0x1376 <DIO_vToggletPort+0xd0>
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_vToggletPort+0x56>
    12fa:	5b c0       	rjmp	.+182    	; 0x13b2 <DIO_vToggletPort+0x10c>
    12fc:	77 c0       	rjmp	.+238    	; 0x13ec <DIO_vToggletPort+0x146>
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    12fe:	18 86       	std	Y+8, r1	; 0x08
    1300:	1f 82       	std	Y+7, r1	; 0x07
    1302:	15 c0       	rjmp	.+42     	; 0x132e <DIO_vToggletPort+0x88>
		{
			togglebit(PORTA , Pin_Counter) ;
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	28 2f       	mov	r18, r24
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0f 80       	ldd	r0, Y+7	; 0x07
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_vToggletPort+0x76>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_vToggletPort+0x72>
    1320:	82 27       	eor	r24, r18
    1322:	8c 93       	st	X, r24
{
	switch(Copy_u8PORTNumber)
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	98 87       	std	Y+8, r25	; 0x08
    132c:	8f 83       	std	Y+7, r24	; 0x07
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	91 05       	cpc	r25, r1
    1336:	34 f3       	brlt	.-52     	; 0x1304 <DIO_vToggletPort+0x5e>
    1338:	59 c0       	rjmp	.+178    	; 0x13ec <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    133a:	1e 82       	std	Y+6, r1	; 0x06
    133c:	1d 82       	std	Y+5, r1	; 0x05
    133e:	15 c0       	rjmp	.+42     	; 0x136a <DIO_vToggletPort+0xc4>
		{
			togglebit(PORTB , Pin_Counter) ;
    1340:	a8 e3       	ldi	r26, 0x38	; 56
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0d 80       	ldd	r0, Y+5	; 0x05
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_vToggletPort+0xb2>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_vToggletPort+0xae>
    135c:	82 27       	eor	r24, r18
    135e:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	91 05       	cpc	r25, r1
    1372:	34 f3       	brlt	.-52     	; 0x1340 <DIO_vToggletPort+0x9a>
    1374:	3b c0       	rjmp	.+118    	; 0x13ec <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1376:	1c 82       	std	Y+4, r1	; 0x04
    1378:	1b 82       	std	Y+3, r1	; 0x03
    137a:	15 c0       	rjmp	.+42     	; 0x13a6 <DIO_vToggletPort+0x100>
		{
			togglebit(PORTC , Pin_Counter) ;
    137c:	a5 e3       	ldi	r26, 0x35	; 53
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0b 80       	ldd	r0, Y+3	; 0x03
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_vToggletPort+0xee>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_vToggletPort+0xea>
    1398:	82 27       	eor	r24, r18
    139a:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	88 30       	cpi	r24, 0x08	; 8
    13ac:	91 05       	cpc	r25, r1
    13ae:	34 f3       	brlt	.-52     	; 0x137c <DIO_vToggletPort+0xd6>
    13b0:	1d c0       	rjmp	.+58     	; 0x13ec <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13b2:	1a 82       	std	Y+2, r1	; 0x02
    13b4:	19 82       	std	Y+1, r1	; 0x01
    13b6:	15 c0       	rjmp	.+42     	; 0x13e2 <DIO_vToggletPort+0x13c>
		{
			togglebit(PORTD , Pin_Counter) ;
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	09 80       	ldd	r0, Y+1	; 0x01
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_vToggletPort+0x12a>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_vToggletPort+0x126>
    13d4:	82 27       	eor	r24, r18
    13d6:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	34 f3       	brlt	.-52     	; 0x13b8 <DIO_vToggletPort+0x112>
	}

	}


}
    13ec:	2b 96       	adiw	r28, 0x0b	; 11
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <DIO_vSetPortvalue>:
 * Input: Port number , command
 * Output:
 * 9
 */
void DIO_vSetPortvalue(u8 Copy_u8PORTNumber,u8 Copy_u8value)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <DIO_vSetPortvalue+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <DIO_vSetPortvalue+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3c 83       	std	Y+4, r19	; 0x04
    1416:	2b 83       	std	Y+3, r18	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	d1 f0       	breq	.+52     	; 0x1456 <DIO_vSetPortvalue+0x58>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <DIO_vSetPortvalue+0x38>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	61 f0       	breq	.+24     	; 0x144c <DIO_vSetPortvalue+0x4e>
    1434:	1e c0       	rjmp	.+60     	; 0x1472 <DIO_vSetPortvalue+0x74>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <DIO_vSetPortvalue+0x62>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <DIO_vSetPortvalue+0x6c>
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <DIO_vSetPortvalue+0x74>
		{
		case DIO_PORTA:
			PORTA=Copy_u8value;
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8value;
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8value;
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 83       	st	Z, r24
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8value;
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
			break;

		}
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <DIO_vSetPortDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 10
 */
void DIO_vSetPortDirec(u8 Copy_u8PORTNumber ,u8 Copy_u8Direc)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	2c 97       	sbiw	r28, 0x0c	; 12
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 87       	std	Y+12, r19	; 0x0c
    14a0:	2b 87       	std	Y+11, r18	; 0x0b
    14a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <DIO_vSetPortDirec+0x2e>
    14ac:	98 c0       	rjmp	.+304    	; 0x15de <DIO_vSetPortDirec+0x15e>
    14ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    14b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DIO_vSetPortDirec+0x42>
    14b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	71 f0       	breq	.+28     	; 0x14dc <DIO_vSetPortDirec+0x5c>
    14c0:	10 c2       	rjmp	.+1056   	; 0x18e2 <DIO_vSetPortDirec+0x462>
    14c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    14c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <DIO_vSetPortDirec+0x4e>
    14cc:	09 c1       	rjmp	.+530    	; 0x16e0 <DIO_vSetPortDirec+0x260>
    14ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <DIO_vSetPortDirec+0x5a>
    14d8:	84 c1       	rjmp	.+776    	; 0x17e2 <DIO_vSetPortDirec+0x362>
    14da:	03 c2       	rjmp	.+1030   	; 0x18e2 <DIO_vSetPortDirec+0x462>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3a 87       	std	Y+10, r19	; 0x0a
    14e4:	29 87       	std	Y+9, r18	; 0x09
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	31 f0       	breq	.+12     	; 0x14fa <DIO_vSetPortDirec+0x7a>
    14ee:	29 85       	ldd	r18, Y+9	; 0x09
    14f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14f2:	21 30       	cpi	r18, 0x01	; 1
    14f4:	31 05       	cpc	r19, r1
    14f6:	d1 f1       	breq	.+116    	; 0x156c <DIO_vSetPortDirec+0xec>
    14f8:	f4 c1       	rjmp	.+1000   	; 0x18e2 <DIO_vSetPortDirec+0x462>
			{
			case DIO_INPUT:
				clearbit(DDRA,0);
    14fa:	aa e3       	ldi	r26, 0x3A	; 58
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ea e3       	ldi	r30, 0x3A	; 58
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	8c 93       	st	X, r24
				clearbit(DDRA,1);
    1508:	aa e3       	ldi	r26, 0x3A	; 58
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ea e3       	ldi	r30, 0x3A	; 58
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8d 7f       	andi	r24, 0xFD	; 253
    1514:	8c 93       	st	X, r24
				clearbit(DDRA,2);
    1516:	aa e3       	ldi	r26, 0x3A	; 58
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ea e3       	ldi	r30, 0x3A	; 58
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8b 7f       	andi	r24, 0xFB	; 251
    1522:	8c 93       	st	X, r24
				clearbit(DDRA,3);
    1524:	aa e3       	ldi	r26, 0x3A	; 58
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	87 7f       	andi	r24, 0xF7	; 247
    1530:	8c 93       	st	X, r24
				clearbit(DDRA,4);
    1532:	aa e3       	ldi	r26, 0x3A	; 58
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7e       	andi	r24, 0xEF	; 239
    153e:	8c 93       	st	X, r24
				clearbit(DDRA,5);
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8f 7d       	andi	r24, 0xDF	; 223
    154c:	8c 93       	st	X, r24
				clearbit(DDRA,6);
    154e:	aa e3       	ldi	r26, 0x3A	; 58
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ea e3       	ldi	r30, 0x3A	; 58
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8f 7b       	andi	r24, 0xBF	; 191
    155a:	8c 93       	st	X, r24
				clearbit(DDRA,7);
    155c:	aa e3       	ldi	r26, 0x3A	; 58
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ea e3       	ldi	r30, 0x3A	; 58
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 77       	andi	r24, 0x7F	; 127
    1568:	8c 93       	st	X, r24
    156a:	bb c1       	rjmp	.+886    	; 0x18e2 <DIO_vSetPortDirec+0x462>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,0);
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	8c 93       	st	X, r24
				setbit(DDRA,1);
    157a:	aa e3       	ldi	r26, 0x3A	; 58
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	8c 93       	st	X, r24
				setbit(DDRA,2);
    1588:	aa e3       	ldi	r26, 0x3A	; 58
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	84 60       	ori	r24, 0x04	; 4
    1594:	8c 93       	st	X, r24
				setbit(DDRA,3);
    1596:	aa e3       	ldi	r26, 0x3A	; 58
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 60       	ori	r24, 0x08	; 8
    15a2:	8c 93       	st	X, r24
				setbit(DDRA,4);
    15a4:	aa e3       	ldi	r26, 0x3A	; 58
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ea e3       	ldi	r30, 0x3A	; 58
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	8c 93       	st	X, r24
				setbit(DDRA,5);
    15b2:	aa e3       	ldi	r26, 0x3A	; 58
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e3       	ldi	r30, 0x3A	; 58
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 62       	ori	r24, 0x20	; 32
    15be:	8c 93       	st	X, r24
				setbit(DDRA,6);
    15c0:	aa e3       	ldi	r26, 0x3A	; 58
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ea e3       	ldi	r30, 0x3A	; 58
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 64       	ori	r24, 0x40	; 64
    15cc:	8c 93       	st	X, r24
				setbit(DDRA,7);
    15ce:	aa e3       	ldi	r26, 0x3A	; 58
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ea e3       	ldi	r30, 0x3A	; 58
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	8c 93       	st	X, r24
    15dc:	82 c1       	rjmp	.+772    	; 0x18e2 <DIO_vSetPortDirec+0x462>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	38 87       	std	Y+8, r19	; 0x08
    15e6:	2f 83       	std	Y+7, r18	; 0x07
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	31 f0       	breq	.+12     	; 0x15fc <DIO_vSetPortDirec+0x17c>
    15f0:	2f 81       	ldd	r18, Y+7	; 0x07
    15f2:	38 85       	ldd	r19, Y+8	; 0x08
    15f4:	21 30       	cpi	r18, 0x01	; 1
    15f6:	31 05       	cpc	r19, r1
    15f8:	d1 f1       	breq	.+116    	; 0x166e <DIO_vSetPortDirec+0x1ee>
    15fa:	73 c1       	rjmp	.+742    	; 0x18e2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRB,0);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	8c 93       	st	X, r24
							clearbit(DDRB,1);
    160a:	a7 e3       	ldi	r26, 0x37	; 55
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e7 e3       	ldi	r30, 0x37	; 55
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	8c 93       	st	X, r24
							clearbit(DDRB,2);
    1618:	a7 e3       	ldi	r26, 0x37	; 55
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e7 e3       	ldi	r30, 0x37	; 55
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	8c 93       	st	X, r24
							clearbit(DDRB,3);
    1626:	a7 e3       	ldi	r26, 0x37	; 55
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e7 e3       	ldi	r30, 0x37	; 55
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	87 7f       	andi	r24, 0xF7	; 247
    1632:	8c 93       	st	X, r24
							clearbit(DDRB,4);
    1634:	a7 e3       	ldi	r26, 0x37	; 55
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e7 e3       	ldi	r30, 0x37	; 55
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8f 7e       	andi	r24, 0xEF	; 239
    1640:	8c 93       	st	X, r24
							clearbit(DDRB,5);
    1642:	a7 e3       	ldi	r26, 0x37	; 55
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e7 e3       	ldi	r30, 0x37	; 55
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 7d       	andi	r24, 0xDF	; 223
    164e:	8c 93       	st	X, r24
							clearbit(DDRB,6);
    1650:	a7 e3       	ldi	r26, 0x37	; 55
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e7 e3       	ldi	r30, 0x37	; 55
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7b       	andi	r24, 0xBF	; 191
    165c:	8c 93       	st	X, r24
							clearbit(DDRB,7);
    165e:	a7 e3       	ldi	r26, 0x37	; 55
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e7 e3       	ldi	r30, 0x37	; 55
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 77       	andi	r24, 0x7F	; 127
    166a:	8c 93       	st	X, r24
    166c:	3a c1       	rjmp	.+628    	; 0x18e2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,0);
    166e:	a7 e3       	ldi	r26, 0x37	; 55
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	8c 93       	st	X, r24
							setbit(DDRB,1);
    167c:	a7 e3       	ldi	r26, 0x37	; 55
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	8c 93       	st	X, r24
							setbit(DDRB,2);
    168a:	a7 e3       	ldi	r26, 0x37	; 55
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	84 60       	ori	r24, 0x04	; 4
    1696:	8c 93       	st	X, r24
							setbit(DDRB,3);
    1698:	a7 e3       	ldi	r26, 0x37	; 55
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e7 e3       	ldi	r30, 0x37	; 55
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 60       	ori	r24, 0x08	; 8
    16a4:	8c 93       	st	X, r24
							setbit(DDRB,4);
    16a6:	a7 e3       	ldi	r26, 0x37	; 55
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e7 e3       	ldi	r30, 0x37	; 55
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 61       	ori	r24, 0x10	; 16
    16b2:	8c 93       	st	X, r24
							setbit(DDRB,5);
    16b4:	a7 e3       	ldi	r26, 0x37	; 55
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e7 e3       	ldi	r30, 0x37	; 55
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 62       	ori	r24, 0x20	; 32
    16c0:	8c 93       	st	X, r24
							setbit(DDRB,6);
    16c2:	a7 e3       	ldi	r26, 0x37	; 55
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e7 e3       	ldi	r30, 0x37	; 55
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	8c 93       	st	X, r24
							setbit(DDRB,7);
    16d0:	a7 e3       	ldi	r26, 0x37	; 55
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e7 e3       	ldi	r30, 0x37	; 55
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	80 68       	ori	r24, 0x80	; 128
    16dc:	8c 93       	st	X, r24
    16de:	01 c1       	rjmp	.+514    	; 0x18e2 <DIO_vSetPortDirec+0x462>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3e 83       	std	Y+6, r19	; 0x06
    16e8:	2d 83       	std	Y+5, r18	; 0x05
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	31 f0       	breq	.+12     	; 0x16fe <DIO_vSetPortDirec+0x27e>
    16f2:	2d 81       	ldd	r18, Y+5	; 0x05
    16f4:	3e 81       	ldd	r19, Y+6	; 0x06
    16f6:	21 30       	cpi	r18, 0x01	; 1
    16f8:	31 05       	cpc	r19, r1
    16fa:	d1 f1       	breq	.+116    	; 0x1770 <DIO_vSetPortDirec+0x2f0>
    16fc:	f2 c0       	rjmp	.+484    	; 0x18e2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRC,0);
    16fe:	a4 e3       	ldi	r26, 0x34	; 52
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8e 7f       	andi	r24, 0xFE	; 254
    170a:	8c 93       	st	X, r24
							clearbit(DDRC,1);
    170c:	a4 e3       	ldi	r26, 0x34	; 52
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e4 e3       	ldi	r30, 0x34	; 52
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8d 7f       	andi	r24, 0xFD	; 253
    1718:	8c 93       	st	X, r24
							clearbit(DDRC,2);
    171a:	a4 e3       	ldi	r26, 0x34	; 52
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e4 e3       	ldi	r30, 0x34	; 52
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8b 7f       	andi	r24, 0xFB	; 251
    1726:	8c 93       	st	X, r24
							clearbit(DDRC,3);
    1728:	a4 e3       	ldi	r26, 0x34	; 52
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e4 e3       	ldi	r30, 0x34	; 52
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	87 7f       	andi	r24, 0xF7	; 247
    1734:	8c 93       	st	X, r24
							clearbit(DDRC,4);
    1736:	a4 e3       	ldi	r26, 0x34	; 52
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7e       	andi	r24, 0xEF	; 239
    1742:	8c 93       	st	X, r24
							clearbit(DDRC,5);
    1744:	a4 e3       	ldi	r26, 0x34	; 52
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7d       	andi	r24, 0xDF	; 223
    1750:	8c 93       	st	X, r24
							clearbit(DDRC,6);
    1752:	a4 e3       	ldi	r26, 0x34	; 52
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e4 e3       	ldi	r30, 0x34	; 52
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 7b       	andi	r24, 0xBF	; 191
    175e:	8c 93       	st	X, r24
							clearbit(DDRC,7);
    1760:	a4 e3       	ldi	r26, 0x34	; 52
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e4 e3       	ldi	r30, 0x34	; 52
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8f 77       	andi	r24, 0x7F	; 127
    176c:	8c 93       	st	X, r24
    176e:	b9 c0       	rjmp	.+370    	; 0x18e2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,0);
    1770:	a4 e3       	ldi	r26, 0x34	; 52
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	8c 93       	st	X, r24
							setbit(DDRC,1);
    177e:	a4 e3       	ldi	r26, 0x34	; 52
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e4 e3       	ldi	r30, 0x34	; 52
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	82 60       	ori	r24, 0x02	; 2
    178a:	8c 93       	st	X, r24
							setbit(DDRC,2);
    178c:	a4 e3       	ldi	r26, 0x34	; 52
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e4 e3       	ldi	r30, 0x34	; 52
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	84 60       	ori	r24, 0x04	; 4
    1798:	8c 93       	st	X, r24
							setbit(DDRC,3);
    179a:	a4 e3       	ldi	r26, 0x34	; 52
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e4 e3       	ldi	r30, 0x34	; 52
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 60       	ori	r24, 0x08	; 8
    17a6:	8c 93       	st	X, r24
							setbit(DDRC,4);
    17a8:	a4 e3       	ldi	r26, 0x34	; 52
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e4 e3       	ldi	r30, 0x34	; 52
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	80 61       	ori	r24, 0x10	; 16
    17b4:	8c 93       	st	X, r24
							setbit(DDRC,5);
    17b6:	a4 e3       	ldi	r26, 0x34	; 52
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e4 e3       	ldi	r30, 0x34	; 52
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 62       	ori	r24, 0x20	; 32
    17c2:	8c 93       	st	X, r24
							setbit(DDRC,6);
    17c4:	a4 e3       	ldi	r26, 0x34	; 52
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 64       	ori	r24, 0x40	; 64
    17d0:	8c 93       	st	X, r24
							setbit(DDRC,7);
    17d2:	a4 e3       	ldi	r26, 0x34	; 52
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e4 e3       	ldi	r30, 0x34	; 52
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	8c 93       	st	X, r24
    17e0:	80 c0       	rjmp	.+256    	; 0x18e2 <DIO_vSetPortDirec+0x462>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3c 83       	std	Y+4, r19	; 0x04
    17ea:	2b 83       	std	Y+3, r18	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	31 f0       	breq	.+12     	; 0x1800 <DIO_vSetPortDirec+0x380>
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	21 30       	cpi	r18, 0x01	; 1
    17fa:	31 05       	cpc	r19, r1
    17fc:	d1 f1       	breq	.+116    	; 0x1872 <DIO_vSetPortDirec+0x3f2>
    17fe:	71 c0       	rjmp	.+226    	; 0x18e2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRD,0);
    1800:	a1 e3       	ldi	r26, 0x31	; 49
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e1 e3       	ldi	r30, 0x31	; 49
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8e 7f       	andi	r24, 0xFE	; 254
    180c:	8c 93       	st	X, r24
							clearbit(DDRD,1);
    180e:	a1 e3       	ldi	r26, 0x31	; 49
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e1 e3       	ldi	r30, 0x31	; 49
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8d 7f       	andi	r24, 0xFD	; 253
    181a:	8c 93       	st	X, r24
							clearbit(DDRD,2);
    181c:	a1 e3       	ldi	r26, 0x31	; 49
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e1 e3       	ldi	r30, 0x31	; 49
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8b 7f       	andi	r24, 0xFB	; 251
    1828:	8c 93       	st	X, r24
							clearbit(DDRD,3);
    182a:	a1 e3       	ldi	r26, 0x31	; 49
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e1 e3       	ldi	r30, 0x31	; 49
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	87 7f       	andi	r24, 0xF7	; 247
    1836:	8c 93       	st	X, r24
							clearbit(DDRD,4);
    1838:	a1 e3       	ldi	r26, 0x31	; 49
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e1 e3       	ldi	r30, 0x31	; 49
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 7e       	andi	r24, 0xEF	; 239
    1844:	8c 93       	st	X, r24
							clearbit(DDRD,5);
    1846:	a1 e3       	ldi	r26, 0x31	; 49
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e1 e3       	ldi	r30, 0x31	; 49
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8f 7d       	andi	r24, 0xDF	; 223
    1852:	8c 93       	st	X, r24
							clearbit(DDRD,6);
    1854:	a1 e3       	ldi	r26, 0x31	; 49
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e1 e3       	ldi	r30, 0x31	; 49
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7b       	andi	r24, 0xBF	; 191
    1860:	8c 93       	st	X, r24
							clearbit(DDRD,7);
    1862:	a1 e3       	ldi	r26, 0x31	; 49
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 77       	andi	r24, 0x7F	; 127
    186e:	8c 93       	st	X, r24
    1870:	38 c0       	rjmp	.+112    	; 0x18e2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,0);
    1872:	a1 e3       	ldi	r26, 0x31	; 49
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e1 e3       	ldi	r30, 0x31	; 49
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	81 60       	ori	r24, 0x01	; 1
    187e:	8c 93       	st	X, r24
							setbit(DDRD,1);
    1880:	a1 e3       	ldi	r26, 0x31	; 49
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e1 e3       	ldi	r30, 0x31	; 49
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	82 60       	ori	r24, 0x02	; 2
    188c:	8c 93       	st	X, r24
							setbit(DDRD,2);
    188e:	a1 e3       	ldi	r26, 0x31	; 49
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	84 60       	ori	r24, 0x04	; 4
    189a:	8c 93       	st	X, r24
							setbit(DDRD,3);
    189c:	a1 e3       	ldi	r26, 0x31	; 49
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e1 e3       	ldi	r30, 0x31	; 49
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 60       	ori	r24, 0x08	; 8
    18a8:	8c 93       	st	X, r24
							setbit(DDRD,4);
    18aa:	a1 e3       	ldi	r26, 0x31	; 49
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 61       	ori	r24, 0x10	; 16
    18b6:	8c 93       	st	X, r24
							setbit(DDRD,5);
    18b8:	a1 e3       	ldi	r26, 0x31	; 49
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e1 e3       	ldi	r30, 0x31	; 49
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	8c 93       	st	X, r24
							setbit(DDRD,6);
    18c6:	a1 e3       	ldi	r26, 0x31	; 49
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e1 e3       	ldi	r30, 0x31	; 49
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 64       	ori	r24, 0x40	; 64
    18d2:	8c 93       	st	X, r24
							setbit(DDRD,7);
    18d4:	a1 e3       	ldi	r26, 0x31	; 49
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e1 e3       	ldi	r30, 0x31	; 49
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    18e2:	2c 96       	adiw	r28, 0x0c	; 12
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <Keypad_u8ReadKey>:
 * input:
 * output:retrun number from 0 to 15
 */

u8 Keypad_u8ReadKey(void)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	69 97       	sbiw	r28, 0x19	; 25
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
	u8 local_au8KeypadArr[4][4]={{7,8,9,'A'},{4,5,6,'B'},{1,2,3,'C'},{'#',0,'E','D'}};
    1908:	ce 01       	movw	r24, r28
    190a:	05 96       	adiw	r24, 0x05	; 5
    190c:	9e 8b       	std	Y+22, r25	; 0x16
    190e:	8d 8b       	std	Y+21, r24	; 0x15
    1910:	e8 e6       	ldi	r30, 0x68	; 104
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	f8 8f       	std	Y+24, r31	; 0x18
    1916:	ef 8b       	std	Y+23, r30	; 0x17
    1918:	f0 e1       	ldi	r31, 0x10	; 16
    191a:	f9 8f       	std	Y+25, r31	; 0x19
    191c:	ef 89       	ldd	r30, Y+23	; 0x17
    191e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1920:	00 80       	ld	r0, Z
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	98 8f       	std	Y+24, r25	; 0x18
    192a:	8f 8b       	std	Y+23, r24	; 0x17
    192c:	ed 89       	ldd	r30, Y+21	; 0x15
    192e:	fe 89       	ldd	r31, Y+22	; 0x16
    1930:	00 82       	st	Z, r0
    1932:	8d 89       	ldd	r24, Y+21	; 0x15
    1934:	9e 89       	ldd	r25, Y+22	; 0x16
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	9e 8b       	std	Y+22, r25	; 0x16
    193a:	8d 8b       	std	Y+21, r24	; 0x15
    193c:	99 8d       	ldd	r25, Y+25	; 0x19
    193e:	91 50       	subi	r25, 0x01	; 1
    1940:	99 8f       	std	Y+25, r25	; 0x19
    1942:	e9 8d       	ldd	r30, Y+25	; 0x19
    1944:	ee 23       	and	r30, r30
    1946:	51 f7       	brne	.-44     	; 0x191c <Keypad_u8ReadKey+0x28>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;
    1948:	84 e6       	ldi	r24, 0x64	; 100
    194a:	89 83       	std	Y+1, r24	; 0x01

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    194c:	1b 82       	std	Y+3, r1	; 0x03
    194e:	45 c0       	rjmp	.+138    	; 0x19da <Keypad_u8ReadKey+0xe6>
	{
		DIO_vSetPin(Colums_Port,0);
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,1);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,2);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,3);
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	63 e0       	ldi	r22, 0x03	; 3
    196c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>

		DIO_vClearPin(Colums_Port,local_u8Colum);
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	6b 81       	ldd	r22, Y+3	; 0x03
    1974:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	8c 83       	std	Y+4, r24	; 0x04
    197c:	28 c0       	rjmp	.+80     	; 0x19ce <Keypad_u8ReadKey+0xda>
		{
			local_u8Read=DIO_vGetPin(Rows_Port,local_u8Row);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	6c 81       	ldd	r22, Y+4	; 0x04
    1982:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vGetPin>
    1986:	8a 83       	std	Y+2, r24	; 0x02
			if(local_u8Read==0)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	88 23       	and	r24, r24
    198c:	e9 f4       	brne	.+58     	; 0x19c8 <Keypad_u8ReadKey+0xd4>
			{
				local_u8RetrunValue= local_au8KeypadArr[local_u8Row-4][local_u8Colum];
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 01       	movw	r18, r24
    1996:	24 50       	subi	r18, 0x04	; 4
    1998:	30 40       	sbci	r19, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	48 2f       	mov	r20, r24
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	82 0f       	add	r24, r18
    19ae:	93 1f       	adc	r25, r19
    19b0:	84 0f       	add	r24, r20
    19b2:	95 1f       	adc	r25, r21
    19b4:	fc 01       	movw	r30, r24
    19b6:	34 96       	adiw	r30, 0x04	; 4
    19b8:	80 81       	ld	r24, Z
    19ba:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_vGetPin(Rows_Port,local_u8Row)==0)
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	6c 81       	ldd	r22, Y+4	; 0x04
    19c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vGetPin>
    19c4:	88 23       	and	r24, r24
    19c6:	d1 f3       	breq	.-12     	; 0x19bc <Keypad_u8ReadKey+0xc8>
		DIO_vSetPin(Colums_Port,2);
		DIO_vSetPin(Colums_Port,3);

		DIO_vClearPin(Colums_Port,local_u8Colum);

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	8f 5f       	subi	r24, 0xFF	; 255
    19cc:	8c 83       	std	Y+4, r24	; 0x04
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	88 30       	cpi	r24, 0x08	; 8
    19d2:	a8 f2       	brcs	.-86     	; 0x197e <Keypad_u8ReadKey+0x8a>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	8b 83       	std	Y+3, r24	; 0x03
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	84 30       	cpi	r24, 0x04	; 4
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <Keypad_u8ReadKey+0xee>
    19e0:	b7 cf       	rjmp	.-146    	; 0x1950 <Keypad_u8ReadKey+0x5c>
				//nothing
			}
		}

	}
	return local_u8RetrunValue;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e4:	69 96       	adiw	r28, 0x19	; 25
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <LCD_vWriteCommand>:
#include "LCD_interface.h"
#include <avr/delay.h>
#include <avr/io.h>

void LCD_vWriteCommand(u8 copy_u8command)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 0
	DIO_vClearPin(Port_Control,LCD_RSPin);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(Port_Data,copy_u8command);
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a20:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_vSetPortvalue>
	//enable ->1
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e4       	ldi	r27, 0x40	; 64
    1a34:	8b 87       	std	Y+11, r24	; 0x0b
    1a36:	9c 87       	std	Y+12, r25	; 0x0c
    1a38:	ad 87       	std	Y+13, r26	; 0x0d
    1a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8f 83       	std	Y+7, r24	; 0x07
    1a56:	98 87       	std	Y+8, r25	; 0x08
    1a58:	a9 87       	std	Y+9, r26	; 0x09
    1a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5e:	78 85       	ldd	r23, Y+8	; 0x08
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_vWriteCommand+0x88>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_vWriteCommand+0x106>
	else if (__tmp > 65535)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_vWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_vWriteCommand+0xe8>
    1ac0:	89 e1       	ldi	r24, 0x19	; 25
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_vWriteCommand+0xd6>
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_vWriteCommand+0xca>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_vWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_vWriteCommand+0x112>
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable ->0
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
}
    1b18:	2f 96       	adiw	r28, 0x0f	; 15
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <LCD_vWriteChar>:

void LCD_vWriteChar(u8 copy_u8Char)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	6d 97       	sbiw	r28, 0x1d	; 29
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS control -> 1
	DIO_vSetPin(Port_Control,LCD_RSPin);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	//Data output
	DIO_vSetPin(DIO_PORTB,3);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	63 e0       	ldi	r22, 0x03	; 3
    1b54:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	DIO_vSetPortvalue(Port_Data,copy_u8Char);
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b5c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_vSetPortvalue>
	DIO_vClearPin(DIO_PORTB,3);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	63 e0       	ldi	r22, 0x03	; 3
    1b64:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	aa ef       	ldi	r26, 0xFA	; 250
    1b6e:	b3 e4       	ldi	r27, 0x43	; 67
    1b70:	89 8f       	std	Y+25, r24	; 0x19
    1b72:	9a 8f       	std	Y+26, r25	; 0x1a
    1b74:	ab 8f       	std	Y+27, r26	; 0x1b
    1b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a e7       	ldi	r20, 0x7A	; 122
    1b86:	53 e4       	ldi	r21, 0x43	; 67
    1b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8d 8b       	std	Y+21, r24	; 0x15
    1b92:	9e 8b       	std	Y+22, r25	; 0x16
    1b94:	af 8b       	std	Y+23, r26	; 0x17
    1b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b98:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_vWriteChar+0x90>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_vWriteChar+0x10e>
	else if (__tmp > 65535)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_vWriteChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_vWriteChar+0xf0>
    1bfc:	89 e1       	ldi	r24, 0x19	; 25
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a 8b       	std	Y+18, r25	; 0x12
    1c02:	89 8b       	std	Y+17, r24	; 0x11
    1c04:	89 89       	ldd	r24, Y+17	; 0x11
    1c06:	9a 89       	ldd	r25, Y+18	; 0x12
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_vWriteChar+0xde>
    1c0c:	9a 8b       	std	Y+18, r25	; 0x12
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_vWriteChar+0xd2>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_vWriteChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	6d 89       	ldd	r22, Y+21	; 0x15
    1c26:	7e 89       	ldd	r23, Y+22	; 0x16
    1c28:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_vWriteChar+0x11a>
    1c48:	98 8b       	std	Y+16, r25	; 0x10
    1c4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	//enable
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a0 e0       	ldi	r26, 0x00	; 0
    1c5a:	b0 e4       	ldi	r27, 0x40	; 64
    1c5c:	8b 87       	std	Y+11, r24	; 0x0b
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	ad 87       	std	Y+13, r26	; 0x0d
    1c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a e7       	ldi	r20, 0x7A	; 122
    1c72:	53 e4       	ldi	r21, 0x43	; 67
    1c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8f 83       	std	Y+7, r24	; 0x07
    1c7e:	98 87       	std	Y+8, r25	; 0x08
    1c80:	a9 87       	std	Y+9, r26	; 0x09
    1c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <LCD_vWriteChar+0x17c>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	3f c0       	rjmp	.+126    	; 0x1d24 <LCD_vWriteChar+0x1fa>
	else if (__tmp > 65535)
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	4c f5       	brge	.+82     	; 0x1d10 <LCD_vWriteChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <LCD_vWriteChar+0x1dc>
    1ce8:	89 e1       	ldi	r24, 0x19	; 25
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_vWriteChar+0x1ca>
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <LCD_vWriteChar+0x1be>
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <LCD_vWriteChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_vWriteChar+0x206>
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	62 e0       	ldi	r22, 0x02	; 2
    1d3c:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
}
    1d40:	6d 96       	adiw	r28, 0x1d	; 29
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <LCD_vInitialize>:

void LCD_vInitialize(void)
{
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	c0 57       	subi	r28, 0x70	; 112
    1d60:	d0 40       	sbci	r29, 0x00	; 0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
	//Diricton port data & control
	DIO_vSetPortDirec(Port_Data,DIO_OUTPUT);
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_vSetPortDirec>

	DIO_vSetPinDirec(Port_Control,0,DIO_OUTPUT);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,1,DIO_OUTPUT);
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,2,DIO_OUTPUT);
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vClearPin(DIO_PORTB,3);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	63 e0       	ldi	r22, 0x03	; 3
    1d96:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e3 59       	subi	r30, 0x93	; 147
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	aa ef       	ldi	r26, 0xFA	; 250
    1da6:	b3 e4       	ldi	r27, 0x43	; 67
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	a2 83       	std	Z+2, r26	; 0x02
    1dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	8e 01       	movw	r16, r28
    1db2:	07 59       	subi	r16, 0x97	; 151
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e3 59       	subi	r30, 0x93	; 147
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	53 e4       	ldi	r21, 0x43	; 67
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	a2 83       	std	Z+2, r26	; 0x02
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dde:	fe 01       	movw	r30, r28
    1de0:	e7 59       	subi	r30, 0x97	; 151
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	44 f4       	brge	.+16     	; 0x1e0c <LCD_vInitialize+0xba>
		__ticks = 1;
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e9 59       	subi	r30, 0x99	; 153
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	64 c0       	rjmp	.+200    	; 0x1ed4 <LCD_vInitialize+0x182>
	else if (__tmp > 65535)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e7 59       	subi	r30, 0x97	; 151
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <LCD_vInitialize+0xda>
    1e2a:	43 c0       	rjmp	.+134    	; 0x1eb2 <LCD_vInitialize+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e3 59       	subi	r30, 0x93	; 147
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	09 59       	subi	r16, 0x99	; 153
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	1f c0       	rjmp	.+62     	; 0x1ea2 <LCD_vInitialize+0x150>
    1e64:	fe 01       	movw	r30, r28
    1e66:	eb 59       	subi	r30, 0x9B	; 155
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	89 e1       	ldi	r24, 0x19	; 25
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	fe 01       	movw	r30, r28
    1e74:	eb 59       	subi	r30, 0x9B	; 155
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_vInitialize+0x12a>
    1e80:	fe 01       	movw	r30, r28
    1e82:	eb 59       	subi	r30, 0x9B	; 155
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8a:	de 01       	movw	r26, r28
    1e8c:	a9 59       	subi	r26, 0x99	; 153
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	e9 59       	subi	r30, 0x99	; 153
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	9c 93       	st	X, r25
    1ea0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e9 59       	subi	r30, 0x99	; 153
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	d1 f6       	brne	.-76     	; 0x1e64 <LCD_vInitialize+0x112>
    1eb0:	27 c0       	rjmp	.+78     	; 0x1f00 <LCD_vInitialize+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	09 59       	subi	r16, 0x99	; 153
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 59       	subi	r30, 0x97	; 151
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	f8 01       	movw	r30, r16
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	de 01       	movw	r26, r28
    1ed6:	ad 59       	subi	r26, 0x9D	; 157
    1ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 59       	subi	r30, 0x99	; 153
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	8d 93       	st	X+, r24
    1ee6:	9c 93       	st	X, r25
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ed 59       	subi	r30, 0x9D	; 157
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_vInitialize+0x1a0>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ed 59       	subi	r30, 0x9D	; 157
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24
    1f00:	fe 01       	movw	r30, r28
    1f02:	e1 5a       	subi	r30, 0xA1	; 161
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	aa ef       	ldi	r26, 0xFA	; 250
    1f0c:	b3 e4       	ldi	r27, 0x43	; 67
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	8e 01       	movw	r16, r28
    1f18:	05 5a       	subi	r16, 0xA5	; 165
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e1 5a       	subi	r30, 0xA1	; 161
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a e7       	ldi	r20, 0x7A	; 122
    1f30:	53 e4       	ldi	r21, 0x43	; 67
    1f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e5 5a       	subi	r30, 0xA5	; 165
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	44 f4       	brge	.+16     	; 0x1f72 <LCD_vInitialize+0x220>
		__ticks = 1;
    1f62:	fe 01       	movw	r30, r28
    1f64:	e7 5a       	subi	r30, 0xA7	; 167
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	64 c0       	rjmp	.+200    	; 0x203a <LCD_vInitialize+0x2e8>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e5 5a       	subi	r30, 0xA5	; 165
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <LCD_vInitialize+0x240>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <LCD_vInitialize+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	e1 5a       	subi	r30, 0xA1	; 161
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	07 5a       	subi	r16, 0xA7	; 167
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <LCD_vInitialize+0x2b6>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e9 5a       	subi	r30, 0xA9	; 169
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	89 e1       	ldi	r24, 0x19	; 25
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e9 5a       	subi	r30, 0xA9	; 169
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_vInitialize+0x290>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e9 5a       	subi	r30, 0xA9	; 169
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	de 01       	movw	r26, r28
    1ff2:	a7 5a       	subi	r26, 0xA7	; 167
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e7 5a       	subi	r30, 0xA7	; 167
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	9c 93       	st	X, r25
    2006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	fe 01       	movw	r30, r28
    200a:	e7 5a       	subi	r30, 0xA7	; 167
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	d1 f6       	brne	.-76     	; 0x1fca <LCD_vInitialize+0x278>
    2016:	27 c0       	rjmp	.+78     	; 0x2066 <LCD_vInitialize+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	8e 01       	movw	r16, r28
    201a:	07 5a       	subi	r16, 0xA7	; 167
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e5 5a       	subi	r30, 0xA5	; 165
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	de 01       	movw	r26, r28
    203c:	ab 5a       	subi	r26, 0xAB	; 171
    203e:	bf 4f       	sbci	r27, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	e7 5a       	subi	r30, 0xA7	; 167
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	8d 93       	st	X+, r24
    204c:	9c 93       	st	X, r25
    204e:	fe 01       	movw	r30, r28
    2050:	eb 5a       	subi	r30, 0xAB	; 171
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_vInitialize+0x306>
    205c:	fe 01       	movw	r30, r28
    205e:	eb 5a       	subi	r30, 0xAB	; 171
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
	//delay 500 ms
	_delay_ms(500);
	_delay_ms(500);
	//writeCommand 0011 1000
	DIO_vSetPin(DIO_PORTB,3);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	LCD_vWriteCommand(0b00111000);
    206e:	88 e3       	ldi	r24, 0x38	; 56
    2070:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_vWriteCommand>
	DIO_vClearPin(DIO_PORTB,3);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    207c:	fe 01       	movw	r30, r28
    207e:	ef 5a       	subi	r30, 0xAF	; 175
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	aa ef       	ldi	r26, 0xFA	; 250
    2088:	b3 e4       	ldi	r27, 0x43	; 67
    208a:	80 83       	st	Z, r24
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	a2 83       	std	Z+2, r26	; 0x02
    2090:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	8e 01       	movw	r16, r28
    2094:	03 5b       	subi	r16, 0xB3	; 179
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	fe 01       	movw	r30, r28
    209a:	ef 5a       	subi	r30, 0xAF	; 175
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a e7       	ldi	r20, 0x7A	; 122
    20ac:	53 e4       	ldi	r21, 0x43	; 67
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	f8 01       	movw	r30, r16
    20b8:	80 83       	st	Z, r24
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	a2 83       	std	Z+2, r26	; 0x02
    20be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c0:	fe 01       	movw	r30, r28
    20c2:	e3 5b       	subi	r30, 0xB3	; 179
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	44 f4       	brge	.+16     	; 0x20ee <LCD_vInitialize+0x39c>
		__ticks = 1;
    20de:	fe 01       	movw	r30, r28
    20e0:	e5 5b       	subi	r30, 0xB5	; 181
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
    20ec:	64 c0       	rjmp	.+200    	; 0x21b6 <LCD_vInitialize+0x464>
	else if (__tmp > 65535)
    20ee:	fe 01       	movw	r30, r28
    20f0:	e3 5b       	subi	r30, 0xB3	; 179
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	0c f0       	brlt	.+2      	; 0x210e <LCD_vInitialize+0x3bc>
    210c:	43 c0       	rjmp	.+134    	; 0x2194 <LCD_vInitialize+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	fe 01       	movw	r30, r28
    2110:	ef 5a       	subi	r30, 0xAF	; 175
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e2       	ldi	r20, 0x20	; 32
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8e 01       	movw	r16, r28
    212e:	05 5b       	subi	r16, 0xB5	; 181
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	f8 01       	movw	r30, r16
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	1f c0       	rjmp	.+62     	; 0x2184 <LCD_vInitialize+0x432>
    2146:	fe 01       	movw	r30, r28
    2148:	e7 5b       	subi	r30, 0xB7	; 183
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	89 e1       	ldi	r24, 0x19	; 25
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
    2154:	fe 01       	movw	r30, r28
    2156:	e7 5b       	subi	r30, 0xB7	; 183
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_vInitialize+0x40c>
    2162:	fe 01       	movw	r30, r28
    2164:	e7 5b       	subi	r30, 0xB7	; 183
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	de 01       	movw	r26, r28
    216e:	a5 5b       	subi	r26, 0xB5	; 181
    2170:	bf 4f       	sbci	r27, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e5 5b       	subi	r30, 0xB5	; 181
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	11 96       	adiw	r26, 0x01	; 1
    2180:	9c 93       	st	X, r25
    2182:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	fe 01       	movw	r30, r28
    2186:	e5 5b       	subi	r30, 0xB5	; 181
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	d1 f6       	brne	.-76     	; 0x2146 <LCD_vInitialize+0x3f4>
    2192:	27 c0       	rjmp	.+78     	; 0x21e2 <LCD_vInitialize+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	8e 01       	movw	r16, r28
    2196:	05 5b       	subi	r16, 0xB5	; 181
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
    219a:	fe 01       	movw	r30, r28
    219c:	e3 5b       	subi	r30, 0xB3	; 179
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	f8 01       	movw	r30, r16
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	de 01       	movw	r26, r28
    21b8:	a9 5b       	subi	r26, 0xB9	; 185
    21ba:	bf 4f       	sbci	r27, 0xFF	; 255
    21bc:	fe 01       	movw	r30, r28
    21be:	e5 5b       	subi	r30, 0xB5	; 181
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	8d 93       	st	X+, r24
    21c8:	9c 93       	st	X, r25
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 5b       	subi	r30, 0xB9	; 185
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_vInitialize+0x482>
    21d8:	fe 01       	movw	r30, r28
    21da:	e9 5b       	subi	r30, 0xB9	; 185
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	fe 01       	movw	r30, r28
    21e4:	ed 5b       	subi	r30, 0xBD	; 189
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e4       	ldi	r27, 0x40	; 64
    21f0:	80 83       	st	Z, r24
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	a2 83       	std	Z+2, r26	; 0x02
    21f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	8e 01       	movw	r16, r28
    21fa:	01 5c       	subi	r16, 0xC1	; 193
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 5b       	subi	r30, 0xBD	; 189
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a e7       	ldi	r20, 0x7A	; 122
    2212:	53 e4       	ldi	r21, 0x43	; 67
    2214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	80 83       	st	Z, r24
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	a2 83       	std	Z+2, r26	; 0x02
    2224:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2226:	fe 01       	movw	r30, r28
    2228:	ff 96       	adiw	r30, 0x3f	; 63
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <LCD_vInitialize+0x4fa>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9e af       	std	Y+62, r25	; 0x3e
    2248:	8d af       	std	Y+61, r24	; 0x3d
    224a:	46 c0       	rjmp	.+140    	; 0x22d8 <LCD_vInitialize+0x586>
	else if (__tmp > 65535)
    224c:	fe 01       	movw	r30, r28
    224e:	ff 96       	adiw	r30, 0x3f	; 63
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	64 f5       	brge	.+88     	; 0x22c0 <LCD_vInitialize+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	fe 01       	movw	r30, r28
    226a:	ed 5b       	subi	r30, 0xBD	; 189
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9e af       	std	Y+62, r25	; 0x3e
    2294:	8d af       	std	Y+61, r24	; 0x3d
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <LCD_vInitialize+0x564>
    2298:	89 e1       	ldi	r24, 0x19	; 25
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c af       	std	Y+60, r25	; 0x3c
    229e:	8b af       	std	Y+59, r24	; 0x3b
    22a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    22a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_vInitialize+0x552>
    22a8:	9c af       	std	Y+60, r25	; 0x3c
    22aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9e af       	std	Y+62, r25	; 0x3e
    22b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <LCD_vInitialize+0x546>
    22be:	16 c0       	rjmp	.+44     	; 0x22ec <LCD_vInitialize+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	fe 01       	movw	r30, r28
    22c2:	ff 96       	adiw	r30, 0x3f	; 63
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9e af       	std	Y+62, r25	; 0x3e
    22d6:	8d af       	std	Y+61, r24	; 0x3d
    22d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22da:	9e ad       	ldd	r25, Y+62	; 0x3e
    22dc:	9a af       	std	Y+58, r25	; 0x3a
    22de:	89 af       	std	Y+57, r24	; 0x39
    22e0:	89 ad       	ldd	r24, Y+57	; 0x39
    22e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_vInitialize+0x592>
    22e8:	9a af       	std	Y+58, r25	; 0x3a
    22ea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 1100
	DIO_vSetPin(DIO_PORTB,3);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	63 e0       	ldi	r22, 0x03	; 3
    22f0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	LCD_vWriteCommand(0b00001100);
    22f4:	8c e0       	ldi	r24, 0x0C	; 12
    22f6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_vWriteCommand>
	DIO_vClearPin(DIO_PORTB,3);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	63 e0       	ldi	r22, 0x03	; 3
    22fe:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	aa ef       	ldi	r26, 0xFA	; 250
    2308:	b3 e4       	ldi	r27, 0x43	; 67
    230a:	8d ab       	std	Y+53, r24	; 0x35
    230c:	9e ab       	std	Y+54, r25	; 0x36
    230e:	af ab       	std	Y+55, r26	; 0x37
    2310:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6d a9       	ldd	r22, Y+53	; 0x35
    2314:	7e a9       	ldd	r23, Y+54	; 0x36
    2316:	8f a9       	ldd	r24, Y+55	; 0x37
    2318:	98 ad       	ldd	r25, Y+56	; 0x38
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	53 e4       	ldi	r21, 0x43	; 67
    2322:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	89 ab       	std	Y+49, r24	; 0x31
    232c:	9a ab       	std	Y+50, r25	; 0x32
    232e:	ab ab       	std	Y+51, r26	; 0x33
    2330:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2332:	69 a9       	ldd	r22, Y+49	; 0x31
    2334:	7a a9       	ldd	r23, Y+50	; 0x32
    2336:	8b a9       	ldd	r24, Y+51	; 0x33
    2338:	9c a9       	ldd	r25, Y+52	; 0x34
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <LCD_vInitialize+0x602>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <LCD_vInitialize+0x680>
	else if (__tmp > 65535)
    2354:	69 a9       	ldd	r22, Y+49	; 0x31
    2356:	7a a9       	ldd	r23, Y+50	; 0x32
    2358:	8b a9       	ldd	r24, Y+51	; 0x33
    235a:	9c a9       	ldd	r25, Y+52	; 0x34
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <LCD_vInitialize+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6d a9       	ldd	r22, Y+53	; 0x35
    236e:	7e a9       	ldd	r23, Y+54	; 0x36
    2370:	8f a9       	ldd	r24, Y+55	; 0x37
    2372:	98 ad       	ldd	r25, Y+56	; 0x38
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	98 ab       	std	Y+48, r25	; 0x30
    2392:	8f a7       	std	Y+47, r24	; 0x2f
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_vInitialize+0x662>
    2396:	89 e1       	ldi	r24, 0x19	; 25
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e a7       	std	Y+46, r25	; 0x2e
    239c:	8d a7       	std	Y+45, r24	; 0x2d
    239e:	8d a5       	ldd	r24, Y+45	; 0x2d
    23a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_vInitialize+0x650>
    23a6:	9e a7       	std	Y+46, r25	; 0x2e
    23a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ac:	98 a9       	ldd	r25, Y+48	; 0x30
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	98 ab       	std	Y+48, r25	; 0x30
    23b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b6:	98 a9       	ldd	r25, Y+48	; 0x30
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <LCD_vInitialize+0x644>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <LCD_vInitialize+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	69 a9       	ldd	r22, Y+49	; 0x31
    23c0:	7a a9       	ldd	r23, Y+50	; 0x32
    23c2:	8b a9       	ldd	r24, Y+51	; 0x33
    23c4:	9c a9       	ldd	r25, Y+52	; 0x34
    23c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	98 ab       	std	Y+48, r25	; 0x30
    23d0:	8f a7       	std	Y+47, r24	; 0x2f
    23d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d4:	98 a9       	ldd	r25, Y+48	; 0x30
    23d6:	9c a7       	std	Y+44, r25	; 0x2c
    23d8:	8b a7       	std	Y+43, r24	; 0x2b
    23da:	8b a5       	ldd	r24, Y+43	; 0x2b
    23dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_vInitialize+0x68c>
    23e2:	9c a7       	std	Y+44, r25	; 0x2c
    23e4:	8b a7       	std	Y+43, r24	; 0x2b
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e0       	ldi	r26, 0x00	; 0
    23ec:	b0 e4       	ldi	r27, 0x40	; 64
    23ee:	8f a3       	std	Y+39, r24	; 0x27
    23f0:	98 a7       	std	Y+40, r25	; 0x28
    23f2:	a9 a7       	std	Y+41, r26	; 0x29
    23f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	6f a1       	ldd	r22, Y+39	; 0x27
    23f8:	78 a5       	ldd	r23, Y+40	; 0x28
    23fa:	89 a5       	ldd	r24, Y+41	; 0x29
    23fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a e7       	ldi	r20, 0x7A	; 122
    2404:	53 e4       	ldi	r21, 0x43	; 67
    2406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8b a3       	std	Y+35, r24	; 0x23
    2410:	9c a3       	std	Y+36, r25	; 0x24
    2412:	ad a3       	std	Y+37, r26	; 0x25
    2414:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2416:	6b a1       	ldd	r22, Y+35	; 0x23
    2418:	7c a1       	ldd	r23, Y+36	; 0x24
    241a:	8d a1       	ldd	r24, Y+37	; 0x25
    241c:	9e a1       	ldd	r25, Y+38	; 0x26
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_vInitialize+0x6e6>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <LCD_vInitialize+0x764>
	else if (__tmp > 65535)
    2438:	6b a1       	ldd	r22, Y+35	; 0x23
    243a:	7c a1       	ldd	r23, Y+36	; 0x24
    243c:	8d a1       	ldd	r24, Y+37	; 0x25
    243e:	9e a1       	ldd	r25, Y+38	; 0x26
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <LCD_vInitialize+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	6f a1       	ldd	r22, Y+39	; 0x27
    2452:	78 a5       	ldd	r23, Y+40	; 0x28
    2454:	89 a5       	ldd	r24, Y+41	; 0x29
    2456:	9a a5       	ldd	r25, Y+42	; 0x2a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9a a3       	std	Y+34, r25	; 0x22
    2476:	89 a3       	std	Y+33, r24	; 0x21
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <LCD_vInitialize+0x746>
    247a:	89 e1       	ldi	r24, 0x19	; 25
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	98 a3       	std	Y+32, r25	; 0x20
    2480:	8f 8f       	std	Y+31, r24	; 0x1f
    2482:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2484:	98 a1       	ldd	r25, Y+32	; 0x20
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_vInitialize+0x734>
    248a:	98 a3       	std	Y+32, r25	; 0x20
    248c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9a a3       	std	Y+34, r25	; 0x22
    2496:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	89 a1       	ldd	r24, Y+33	; 0x21
    249a:	9a a1       	ldd	r25, Y+34	; 0x22
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <LCD_vInitialize+0x728>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <LCD_vInitialize+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6b a1       	ldd	r22, Y+35	; 0x23
    24a4:	7c a1       	ldd	r23, Y+36	; 0x24
    24a6:	8d a1       	ldd	r24, Y+37	; 0x25
    24a8:	9e a1       	ldd	r25, Y+38	; 0x26
    24aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	89 a1       	ldd	r24, Y+33	; 0x21
    24b8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ba:	9e 8f       	std	Y+30, r25	; 0x1e
    24bc:	8d 8f       	std	Y+29, r24	; 0x1d
    24be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_vInitialize+0x770>
    24c6:	9e 8f       	std	Y+30, r25	; 0x1e
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 0001
	DIO_vSetPin(DIO_PORTB,3);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	LCD_vWriteCommand(0b00000001);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_vWriteCommand>
	DIO_vClearPin(DIO_PORTB,3);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	63 e0       	ldi	r22, 0x03	; 3
    24dc:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	aa ef       	ldi	r26, 0xFA	; 250
    24e6:	b3 e4       	ldi	r27, 0x43	; 67
    24e8:	89 8f       	std	Y+25, r24	; 0x19
    24ea:	9a 8f       	std	Y+26, r25	; 0x1a
    24ec:	ab 8f       	std	Y+27, r26	; 0x1b
    24ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	69 8d       	ldd	r22, Y+25	; 0x19
    24f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a e7       	ldi	r20, 0x7A	; 122
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8d 8b       	std	Y+21, r24	; 0x15
    250a:	9e 8b       	std	Y+22, r25	; 0x16
    250c:	af 8b       	std	Y+23, r26	; 0x17
    250e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2510:	6d 89       	ldd	r22, Y+21	; 0x15
    2512:	7e 89       	ldd	r23, Y+22	; 0x16
    2514:	8f 89       	ldd	r24, Y+23	; 0x17
    2516:	98 8d       	ldd	r25, Y+24	; 0x18
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	2c f4       	brge	.+10     	; 0x2532 <LCD_vInitialize+0x7e0>
		__ticks = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9c 8b       	std	Y+20, r25	; 0x14
    252e:	8b 8b       	std	Y+19, r24	; 0x13
    2530:	3f c0       	rjmp	.+126    	; 0x25b0 <LCD_vInitialize+0x85e>
	else if (__tmp > 65535)
    2532:	6d 89       	ldd	r22, Y+21	; 0x15
    2534:	7e 89       	ldd	r23, Y+22	; 0x16
    2536:	8f 89       	ldd	r24, Y+23	; 0x17
    2538:	98 8d       	ldd	r25, Y+24	; 0x18
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	4c f5       	brge	.+82     	; 0x259c <LCD_vInitialize+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	69 8d       	ldd	r22, Y+25	; 0x19
    254c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9c 8b       	std	Y+20, r25	; 0x14
    2570:	8b 8b       	std	Y+19, r24	; 0x13
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <LCD_vInitialize+0x840>
    2574:	89 e1       	ldi	r24, 0x19	; 25
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9a 8b       	std	Y+18, r25	; 0x12
    257a:	89 8b       	std	Y+17, r24	; 0x11
    257c:	89 89       	ldd	r24, Y+17	; 0x11
    257e:	9a 89       	ldd	r25, Y+18	; 0x12
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_vInitialize+0x82e>
    2584:	9a 8b       	std	Y+18, r25	; 0x12
    2586:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	8b 89       	ldd	r24, Y+19	; 0x13
    258a:	9c 89       	ldd	r25, Y+20	; 0x14
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	69 f7       	brne	.-38     	; 0x2574 <LCD_vInitialize+0x822>
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <LCD_vInitialize+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	6d 89       	ldd	r22, Y+21	; 0x15
    259e:	7e 89       	ldd	r23, Y+22	; 0x16
    25a0:	8f 89       	ldd	r24, Y+23	; 0x17
    25a2:	98 8d       	ldd	r25, Y+24	; 0x18
    25a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	8b 89       	ldd	r24, Y+19	; 0x13
    25b2:	9c 89       	ldd	r25, Y+20	; 0x14
    25b4:	98 8b       	std	Y+16, r25	; 0x10
    25b6:	8f 87       	std	Y+15, r24	; 0x0f
    25b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ba:	98 89       	ldd	r25, Y+16	; 0x10
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_vInitialize+0x86a>
    25c0:	98 8b       	std	Y+16, r25	; 0x10
    25c2:	8f 87       	std	Y+15, r24	; 0x0f
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e4       	ldi	r27, 0x40	; 64
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a e7       	ldi	r20, 0x7A	; 122
    25e2:	53 e4       	ldi	r21, 0x43	; 67
    25e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_vInitialize+0x8c4>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_vInitialize+0x942>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_vInitialize+0x92e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_vInitialize+0x924>
    2658:	89 e1       	ldi	r24, 0x19	; 25
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_vInitialize+0x912>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_vInitialize+0x906>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_vInitialize+0x956>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_vInitialize+0x94e>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	//delay 2 ms
	_delay_ms(2);
}
    26a8:	c0 59       	subi	r28, 0x90	; 144
    26aa:	df 4f       	sbci	r29, 0xFF	; 255
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <gotoXY>:

void gotoXY(u8 X,u8 Y)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <gotoXY+0x6>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <gotoXY+0x8>
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	8a 83       	std	Y+2, r24	; 0x02
    26d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(X)
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	3d 83       	std	Y+5, r19	; 0x05
    26da:	2c 83       	std	Y+4, r18	; 0x04
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	9d 81       	ldd	r25, Y+5	; 0x05
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	31 f0       	breq	.+12     	; 0x26f0 <gotoXY+0x30>
    26e4:	2c 81       	ldd	r18, Y+4	; 0x04
    26e6:	3d 81       	ldd	r19, Y+5	; 0x05
    26e8:	21 30       	cpi	r18, 0x01	; 1
    26ea:	31 05       	cpc	r19, r1
    26ec:	21 f0       	breq	.+8      	; 0x26f6 <gotoXY+0x36>
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <gotoXY+0x3c>
	{
	case 0:
		Address=Y;
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <gotoXY+0x3c>
		break;
	case 1:
		Address =Y+(0x40);
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	80 5c       	subi	r24, 0xC0	; 192
    26fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	setbit(Address,7);
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	80 68       	ori	r24, 0x80	; 128
    2700:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vWriteCommand(Address);
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_vWriteCommand>
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <LCD_vWriteString>:

void LCD_vWriteString(u8 copy_u8Chararr[])
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	63 97       	sbiw	r28, 0x13	; 19
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	9b 8b       	std	Y+19, r25	; 0x13
    272e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 lenght;
	lenght=strlen(copy_u8Chararr);
    2730:	8a 89       	ldd	r24, Y+18	; 0x12
    2732:	9b 89       	ldd	r25, Y+19	; 0x13
    2734:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <strlen>
    2738:	89 8b       	std	Y+17, r24	; 0x11

	for(int i=0 ; i<lenght ;i++)
    273a:	18 8a       	std	Y+16, r1	; 0x10
    273c:	1f 86       	std	Y+15, r1	; 0x0f
    273e:	81 c0       	rjmp	.+258    	; 0x2842 <LCD_vWriteString+0x12a>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
    2740:	2f 85       	ldd	r18, Y+15	; 0x0f
    2742:	38 89       	ldd	r19, Y+16	; 0x10
    2744:	8a 89       	ldd	r24, Y+18	; 0x12
    2746:	9b 89       	ldd	r25, Y+19	; 0x13
    2748:	fc 01       	movw	r30, r24
    274a:	e2 0f       	add	r30, r18
    274c:	f3 1f       	adc	r31, r19
    274e:	80 81       	ld	r24, Z
    2750:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <LCD_vWriteChar>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a8 e4       	ldi	r26, 0x48	; 72
    275a:	b2 e4       	ldi	r27, 0x42	; 66
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	9c 87       	std	Y+12, r25	; 0x0c
    2760:	ad 87       	std	Y+13, r26	; 0x0d
    2762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a e7       	ldi	r20, 0x7A	; 122
    2772:	53 e4       	ldi	r21, 0x43	; 67
    2774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8f 83       	std	Y+7, r24	; 0x07
    277e:	98 87       	std	Y+8, r25	; 0x08
    2780:	a9 87       	std	Y+9, r26	; 0x09
    2782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2784:	6f 81       	ldd	r22, Y+7	; 0x07
    2786:	78 85       	ldd	r23, Y+8	; 0x08
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_vWriteString+0x8e>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <LCD_vWriteString+0x10c>
	else if (__tmp > 65535)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <LCD_vWriteString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_vWriteString+0xee>
    27e8:	89 e1       	ldi	r24, 0x19	; 25
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_vWriteString+0xdc>
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <LCD_vWriteString+0xd0>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <LCD_vWriteString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_vWriteString+0x118>
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
void LCD_vWriteString(u8 copy_u8Chararr[])
{
	u8 lenght;
	lenght=strlen(copy_u8Chararr);

	for(int i=0 ; i<lenght ;i++)
    2838:	8f 85       	ldd	r24, Y+15	; 0x0f
    283a:	98 89       	ldd	r25, Y+16	; 0x10
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	98 8b       	std	Y+16, r25	; 0x10
    2840:	8f 87       	std	Y+15, r24	; 0x0f
    2842:	89 89       	ldd	r24, Y+17	; 0x11
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	8f 85       	ldd	r24, Y+15	; 0x0f
    284a:	98 89       	ldd	r25, Y+16	; 0x10
    284c:	82 17       	cp	r24, r18
    284e:	93 07       	cpc	r25, r19
    2850:	0c f4       	brge	.+2      	; 0x2854 <LCD_vWriteString+0x13c>
    2852:	76 cf       	rjmp	.-276    	; 0x2740 <LCD_vWriteString+0x28>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
		_delay_ms(50);
	}
}
    2854:	63 96       	adiw	r28, 0x13	; 19
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <main>:
#include <avr/delay.h>
#include "Keypad_interface.h"
#include "LCD_interface.h"

void main(void)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	2e 97       	sbiw	r28, 0x0e	; 14
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirec(DIO_PORTD,0,DIO_OUTPUT);
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,1,DIO_OUTPUT);
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,2,DIO_OUTPUT);
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,3,DIO_OUTPUT);
    2898:	83 e0       	ldi	r24, 0x03	; 3
    289a:	63 e0       	ldi	r22, 0x03	; 3
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,4,DIO_OUTPUT);
    28a2:	83 e0       	ldi	r24, 0x03	; 3
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,5,DIO_OUTPUT);
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,6,DIO_OUTPUT);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	66 e0       	ldi	r22, 0x06	; 6
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,7,DIO_OUTPUT);
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>

	DIO_vSetPinDirec(DIO_PORTB,1,DIO_OUTPUT);  //A0
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,2,DIO_OUTPUT);  //A1
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	62 e0       	ldi	r22, 0x02	; 2
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,3,DIO_OUTPUT); //WR
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	63 e0       	ldi	r22, 0x03	; 3
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,4,DIO_OUTPUT); //RD
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	64 e0       	ldi	r22, 0x04	; 4
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_vSetPinDirec>

	//DIS RD
	DIO_vSetPin(DIO_PORTB,4);
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	64 e0       	ldi	r22, 0x04	; 4
    28f6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	//DIS WR
	DIO_vSetPin(DIO_PORTB,3);
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>

	//set control register
	//a1 , a0 -> 11 ---------> ADDER
	DIO_vSetPin(DIO_PORTB,1);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTB,2);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	62 e0       	ldi	r22, 0x02	; 2
    290e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	//VALL
	DIO_vClearPin(DIO_PORTD,0);
    2912:	83 e0       	ldi	r24, 0x03	; 3
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTD,1);
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTD,2);
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	62 e0       	ldi	r22, 0x02	; 2
    2926:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vSetPin(DIO_PORTD,3);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	DIO_vClearPin(DIO_PORTD,4);
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	64 e0       	ldi	r22, 0x04	; 4
    2936:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTD,5);
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	65 e0       	ldi	r22, 0x05	; 5
    293e:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTD,6);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	66 e0       	ldi	r22, 0x06	; 6
    2946:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vSetPin(DIO_PORTD,7);
    294a:	83 e0       	ldi	r24, 0x03	; 3
    294c:	67 e0       	ldi	r22, 0x07	; 7
    294e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	//enable WR
	DIO_vClearPin(DIO_PORTB,3);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	63 e0       	ldi	r22, 0x03	; 3
    2956:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	aa ef       	ldi	r26, 0xFA	; 250
    2960:	b3 e4       	ldi	r27, 0x43	; 67
    2962:	8b 87       	std	Y+11, r24	; 0x0b
    2964:	9c 87       	std	Y+12, r25	; 0x0c
    2966:	ad 87       	std	Y+13, r26	; 0x0d
    2968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	6b 85       	ldd	r22, Y+11	; 0x0b
    296c:	7c 85       	ldd	r23, Y+12	; 0x0c
    296e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2970:	9e 85       	ldd	r25, Y+14	; 0x0e
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a ef       	ldi	r20, 0xFA	; 250
    2978:	54 e4       	ldi	r21, 0x44	; 68
    297a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8f 83       	std	Y+7, r24	; 0x07
    2984:	98 87       	std	Y+8, r25	; 0x08
    2986:	a9 87       	std	Y+9, r26	; 0x09
    2988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <main+0x146>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <main+0x1c4>
	else if (__tmp > 65535)
    29ac:	6f 81       	ldd	r22, Y+7	; 0x07
    29ae:	78 85       	ldd	r23, Y+8	; 0x08
    29b0:	89 85       	ldd	r24, Y+9	; 0x09
    29b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <main+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <main+0x1a6>
    29ee:	88 ec       	ldi	r24, 0xC8	; 200
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <main+0x194>
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <main+0x188>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <main+0x1d0>
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	DIO_vSetPin(DIO_PORTB,3); //dis WR
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	63 e0       	ldi	r22, 0x03	; 3
    2a42:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	//ADDRES
	DIO_vSetPin(DIO_PORTB,1);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPin>
	DIO_vClearPin(DIO_PORTB,2);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	62 e0       	ldi	r22, 0x02	; 2
    2a52:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTB,3);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	63 e0       	ldi	r22, 0x03	; 3
    2a5a:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_vClearPin>
	LCD_vInitialize();
    2a5e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_vInitialize>
	LCD_vWriteChar('y');
    2a62:	89 e7       	ldi	r24, 0x79	; 121
    2a64:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <LCD_vWriteChar>
    2a68:	ff cf       	rjmp	.-2      	; 0x2a68 <main+0x202>

00002a6a <__prologue_saves__>:
    2a6a:	2f 92       	push	r2
    2a6c:	3f 92       	push	r3
    2a6e:	4f 92       	push	r4
    2a70:	5f 92       	push	r5
    2a72:	6f 92       	push	r6
    2a74:	7f 92       	push	r7
    2a76:	8f 92       	push	r8
    2a78:	9f 92       	push	r9
    2a7a:	af 92       	push	r10
    2a7c:	bf 92       	push	r11
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ef 92       	push	r14
    2a84:	ff 92       	push	r15
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	ca 1b       	sub	r28, r26
    2a94:	db 0b       	sbc	r29, r27
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	09 94       	ijmp

00002aa2 <__epilogue_restores__>:
    2aa2:	2a 88       	ldd	r2, Y+18	; 0x12
    2aa4:	39 88       	ldd	r3, Y+17	; 0x11
    2aa6:	48 88       	ldd	r4, Y+16	; 0x10
    2aa8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aac:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aae:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ab2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ab4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ab6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ab8:	df 80       	ldd	r13, Y+7	; 0x07
    2aba:	ee 80       	ldd	r14, Y+6	; 0x06
    2abc:	fd 80       	ldd	r15, Y+5	; 0x05
    2abe:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ac2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ac4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ac6:	ce 0f       	add	r28, r30
    2ac8:	d1 1d       	adc	r29, r1
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	ed 01       	movw	r28, r26
    2ad6:	08 95       	ret

00002ad8 <strlen>:
    2ad8:	fc 01       	movw	r30, r24
    2ada:	01 90       	ld	r0, Z+
    2adc:	00 20       	and	r0, r0
    2ade:	e9 f7       	brne	.-6      	; 0x2ada <strlen+0x2>
    2ae0:	80 95       	com	r24
    2ae2:	90 95       	com	r25
    2ae4:	8e 0f       	add	r24, r30
    2ae6:	9f 1f       	adc	r25, r31
    2ae8:	08 95       	ret

00002aea <_exit>:
    2aea:	f8 94       	cli

00002aec <__stop_program>:
    2aec:	ff cf       	rjmp	.-2      	; 0x2aec <__stop_program>
