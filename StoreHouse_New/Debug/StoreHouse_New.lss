
StoreHouse_New.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00003850  000038e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080009e  0080009e  00003922  2**0
                  ALLOC
  3 .stab         00002cb8  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c06  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007322  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000090db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b92f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 11 	call	0x23fa	; 0x23fa <main>
      8a:	0c 94 26 1c 	jmp	0x384c	; 0x384c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vSetPin>:
 * Input: Port number , pin number
 * Output:
 * 1
 */
void DIO_vSetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vSetPin+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vSetPin+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	49 f1       	breq	.+82     	; 0xbbc <DIO_vSetPin+0x76>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <DIO_vSetPin+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <DIO_vSetPin+0x4e>
     b7c:	5a c0       	rjmp	.+180    	; 0xc32 <DIO_vSetPin+0xec>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	71 f1       	breq	.+92     	; 0xbe4 <DIO_vSetPin+0x9e>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	e9 f1       	breq	.+122    	; 0xc0c <DIO_vSetPin+0xc6>
     b92:	4f c0       	rjmp	.+158    	; 0xc32 <DIO_vSetPin+0xec>
	{
	case  DIO_PORTA:
		setbit(PORTA,Copy_u8PinNumber);
     b94:	ab e3       	ldi	r26, 0x3B	; 59
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	eb e3       	ldi	r30, 0x3B	; 59
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_vSetPin+0x6c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_vSetPin+0x68>
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	3b c0       	rjmp	.+118    	; 0xc32 <DIO_vSetPin+0xec>
		break;
	case  DIO_PORTB:
			setbit(PORTB,Copy_u8PinNumber);
     bbc:	a8 e3       	ldi	r26, 0x38	; 56
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e8 e3       	ldi	r30, 0x38	; 56
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_vSetPin+0x94>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_vSetPin+0x90>
     bde:	84 2b       	or	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	27 c0       	rjmp	.+78     	; 0xc32 <DIO_vSetPin+0xec>
			break;
	case  DIO_PORTC:
				setbit(PORTC,Copy_u8PinNumber);
     be4:	a5 e3       	ldi	r26, 0x35	; 53
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e5 e3       	ldi	r30, 0x35	; 53
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_vSetPin+0xbc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_vSetPin+0xb8>
     c06:	84 2b       	or	r24, r20
     c08:	8c 93       	st	X, r24
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <DIO_vSetPin+0xec>
				break;
	case  DIO_PORTD:
				setbit(PORTD,Copy_u8PinNumber);
     c0c:	a2 e3       	ldi	r26, 0x32	; 50
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e2 e3       	ldi	r30, 0x32	; 50
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_vSetPin+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_vSetPin+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
				break;
	}
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <DIO_vClearPin>:
 * Input: Port number , pin number
 * Output:
 * 2
 */
void DIO_vClearPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <DIO_vClearPin+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <DIO_vClearPin+0x8>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3c 83       	std	Y+4, r19	; 0x04
     c58:	2b 83       	std	Y+3, r18	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	59 f1       	breq	.+86     	; 0xcba <DIO_vClearPin+0x7a>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_vClearPin+0x38>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	69 f0       	breq	.+26     	; 0xc90 <DIO_vClearPin+0x50>
     c76:	5f c0       	rjmp	.+190    	; 0xd36 <DIO_vClearPin+0xf6>
     c78:	2b 81       	ldd	r18, Y+3	; 0x03
     c7a:	3c 81       	ldd	r19, Y+4	; 0x04
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	89 f1       	breq	.+98     	; 0xce4 <DIO_vClearPin+0xa4>
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <DIO_vClearPin+0x4e>
     c8c:	40 c0       	rjmp	.+128    	; 0xd0e <DIO_vClearPin+0xce>
     c8e:	53 c0       	rjmp	.+166    	; 0xd36 <DIO_vClearPin+0xf6>
	{
	case  DIO_PORTA:
		clearbit(PORTA,Copy_u8PinNumber);
     c90:	ab e3       	ldi	r26, 0x3B	; 59
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e3       	ldi	r30, 0x3B	; 59
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_vClearPin+0x6e>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_vClearPin+0x6a>
     cb2:	80 95       	com	r24
     cb4:	84 23       	and	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	3e c0       	rjmp	.+124    	; 0xd36 <DIO_vClearPin+0xf6>
		break;
	case  DIO_PORTB:
		clearbit(PORTB,Copy_u8PinNumber);
     cba:	a8 e3       	ldi	r26, 0x38	; 56
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e3       	ldi	r30, 0x38	; 56
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_vClearPin+0x98>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_vClearPin+0x94>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	29 c0       	rjmp	.+82     	; 0xd36 <DIO_vClearPin+0xf6>
			break;
	case  DIO_PORTC:
		clearbit(PORTC,Copy_u8PinNumber);
     ce4:	a5 e3       	ldi	r26, 0x35	; 53
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e5 e3       	ldi	r30, 0x35	; 53
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_vClearPin+0xc2>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_vClearPin+0xbe>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <DIO_vClearPin+0xf6>
				break;
	case  DIO_PORTD:
		clearbit(PORTD,Copy_u8PinNumber);
     d0e:	a2 e3       	ldi	r26, 0x32	; 50
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e2 e3       	ldi	r30, 0x32	; 50
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vClearPin+0xec>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vClearPin+0xe8>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
				break;
	}
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DIO_vTogglePin>:
 * Input: Port number , pin number
 * Output:
 * 3
 */
void DIO_vTogglePin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <DIO_vTogglePin+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_vTogglePin+0x8>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3c 83       	std	Y+4, r19	; 0x04
     d5c:	2b 83       	std	Y+3, r18	; 0x03
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 05       	cpc	r25, r1
     d66:	49 f1       	breq	.+82     	; 0xdba <DIO_vTogglePin+0x76>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	2c f4       	brge	.+10     	; 0xd7c <DIO_vTogglePin+0x38>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	61 f0       	breq	.+24     	; 0xd92 <DIO_vTogglePin+0x4e>
     d7a:	5a c0       	rjmp	.+180    	; 0xe30 <DIO_vTogglePin+0xec>
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	71 f1       	breq	.+92     	; 0xde2 <DIO_vTogglePin+0x9e>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	91 05       	cpc	r25, r1
     d8e:	e9 f1       	breq	.+122    	; 0xe0a <DIO_vTogglePin+0xc6>
     d90:	4f c0       	rjmp	.+158    	; 0xe30 <DIO_vTogglePin+0xec>
	{
	case  DIO_PORTA:
		togglebit(PORTA,Copy_u8PinNumber);
     d92:	ab e3       	ldi	r26, 0x3B	; 59
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_vTogglePin+0x6c>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_vTogglePin+0x68>
     db4:	84 27       	eor	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	3b c0       	rjmp	.+118    	; 0xe30 <DIO_vTogglePin+0xec>
		break;
	case  DIO_PORTB:
		togglebit(PORTB,Copy_u8PinNumber);
     dba:	a8 e3       	ldi	r26, 0x38	; 56
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 e3       	ldi	r30, 0x38	; 56
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_vTogglePin+0x94>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_vTogglePin+0x90>
     ddc:	84 27       	eor	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	27 c0       	rjmp	.+78     	; 0xe30 <DIO_vTogglePin+0xec>
			break;
	case  DIO_PORTC:
		togglebit(PORTC,Copy_u8PinNumber);
     de2:	a5 e3       	ldi	r26, 0x35	; 53
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e3       	ldi	r30, 0x35	; 53
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_vTogglePin+0xbc>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_vTogglePin+0xb8>
     e04:	84 27       	eor	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <DIO_vTogglePin+0xec>
				break;
	case  DIO_PORTD:
		togglebit(PORTD,Copy_u8PinNumber);
     e0a:	a2 e3       	ldi	r26, 0x32	; 50
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e2 e3       	ldi	r30, 0x32	; 50
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_vTogglePin+0xe4>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_vTogglePin+0xe0>
     e2c:	84 27       	eor	r24, r20
     e2e:	8c 93       	st	X, r24
				break;
	}
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <DIO_vGetPin>:
 * Input: Port number , pin number
 * Output:return number of pin whether 0 or 1
 * 4
 */
u8 DIO_vGetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_vGetPin+0x6>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_vGetPin+0x8>
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret;
	switch(Copy_u8PORTNumber)
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3d 83       	std	Y+5, r19	; 0x05
     e58:	2c 83       	std	Y+4, r18	; 0x04
     e5a:	4c 81       	ldd	r20, Y+4	; 0x04
     e5c:	5d 81       	ldd	r21, Y+5	; 0x05
     e5e:	41 30       	cpi	r20, 0x01	; 1
     e60:	51 05       	cpc	r21, r1
     e62:	b1 f1       	breq	.+108    	; 0xed0 <DIO_vGetPin+0x92>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	91 05       	cpc	r25, r1
     e6c:	34 f4       	brge	.+12     	; 0xe7a <DIO_vGetPin+0x3c>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	71 f0       	breq	.+28     	; 0xe94 <DIO_vGetPin+0x56>
     e78:	84 c0       	rjmp	.+264    	; 0xf82 <DIO_vGetPin+0x144>
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	42 30       	cpi	r20, 0x02	; 2
     e80:	51 05       	cpc	r21, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_vGetPin+0x48>
     e84:	43 c0       	rjmp	.+134    	; 0xf0c <DIO_vGetPin+0xce>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_vGetPin+0x54>
     e90:	5b c0       	rjmp	.+182    	; 0xf48 <DIO_vGetPin+0x10a>
     e92:	77 c0       	rjmp	.+238    	; 0xf82 <DIO_vGetPin+0x144>
	{
	case  DIO_PORTA:
		ret= getbit(PINA,Copy_u8PinNumber);
     e94:	e9 e3       	ldi	r30, 0x39	; 57
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_vGetPin+0x70>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	2a 95       	dec	r18
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_vGetPin+0x6c>
     eb2:	9a 01       	movw	r18, r20
     eb4:	28 23       	and	r18, r24
     eb6:	39 23       	and	r19, r25
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a9 01       	movw	r20, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_vGetPin+0x88>
     ec2:	55 95       	asr	r21
     ec4:	47 95       	ror	r20
     ec6:	8a 95       	dec	r24
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_vGetPin+0x84>
     eca:	ca 01       	movw	r24, r20
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	59 c0       	rjmp	.+178    	; 0xf82 <DIO_vGetPin+0x144>

		break;
	case  DIO_PORTB:
		ret= getbit(PINB,Copy_u8PinNumber);
     ed0:	e6 e3       	ldi	r30, 0x36	; 54
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_vGetPin+0xac>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	2a 95       	dec	r18
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_vGetPin+0xa8>
     eee:	9a 01       	movw	r18, r20
     ef0:	28 23       	and	r18, r24
     ef2:	39 23       	and	r19, r25
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_vGetPin+0xc4>
     efe:	55 95       	asr	r21
     f00:	47 95       	ror	r20
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_vGetPin+0xc0>
     f06:	ca 01       	movw	r24, r20
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	3b c0       	rjmp	.+118    	; 0xf82 <DIO_vGetPin+0x144>
			break;
	case  DIO_PORTC:
		ret= getbit(PINC,Copy_u8PinNumber);
     f0c:	e3 e3       	ldi	r30, 0x33	; 51
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_vGetPin+0xe8>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_vGetPin+0xe4>
     f2a:	9a 01       	movw	r18, r20
     f2c:	28 23       	and	r18, r24
     f2e:	39 23       	and	r19, r25
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a9 01       	movw	r20, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_vGetPin+0x100>
     f3a:	55 95       	asr	r21
     f3c:	47 95       	ror	r20
     f3e:	8a 95       	dec	r24
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_vGetPin+0xfc>
     f42:	ca 01       	movw	r24, r20
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <DIO_vGetPin+0x144>
				break;
	case  DIO_PORTD:
		ret= getbit(PIND,Copy_u8PinNumber);
     f48:	e0 e3       	ldi	r30, 0x30	; 48
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_vGetPin+0x124>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	2a 95       	dec	r18
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_vGetPin+0x120>
     f66:	9a 01       	movw	r18, r20
     f68:	28 23       	and	r18, r24
     f6a:	39 23       	and	r19, r25
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a9 01       	movw	r20, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_vGetPin+0x13c>
     f76:	55 95       	asr	r21
     f78:	47 95       	ror	r20
     f7a:	8a 95       	dec	r24
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_vGetPin+0x138>
     f7e:	ca 01       	movw	r24, r20
     f80:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return ret;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <DIO_vSetPort>:
 * Input: Port number
 * Output:
 * 5
 */
void DIO_vSetPort(u8 Copy_u8PORTNumber)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_vSetPort+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3b 83       	std	Y+3, r19	; 0x03
     faa:	2a 83       	std	Y+2, r18	; 0x02
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	91 05       	cpc	r25, r1
     fb4:	d1 f0       	breq	.+52     	; 0xfea <DIO_vSetPort+0x56>
     fb6:	2a 81       	ldd	r18, Y+2	; 0x02
     fb8:	3b 81       	ldd	r19, Y+3	; 0x03
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	2c f4       	brge	.+10     	; 0xfca <DIO_vSetPort+0x36>
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <DIO_vSetPort+0x4c>
     fc8:	1e c0       	rjmp	.+60     	; 0x1006 <DIO_vSetPort+0x72>
     fca:	2a 81       	ldd	r18, Y+2	; 0x02
     fcc:	3b 81       	ldd	r19, Y+3	; 0x03
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	81 f0       	breq	.+32     	; 0xff4 <DIO_vSetPort+0x60>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	81 f0       	breq	.+32     	; 0xffe <DIO_vSetPort+0x6a>
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <DIO_vSetPort+0x72>
	{
	case  DIO_PORTA:
		PORTA=0b11111111;
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 83       	st	Z, r24
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTB:
		PORTB=0b11111111;
     fea:	e8 e3       	ldi	r30, 0x38	; 56
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTC:
		PORTC=0b11111111;
     ff4:	e5 e3       	ldi	r30, 0x35	; 53
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 83       	st	Z, r24
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTD:
		PORTD=0b11111111;
     ffe:	e2 e3       	ldi	r30, 0x32	; 50
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	80 83       	st	Z, r24
		break;
	}
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_vClearPort>:
 * Input: Port number
 * Output:
 * 6
 */
void DIO_vClearPort(u8 Copy_u8PORTNumber)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_vClearPort+0x6>
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3b 83       	std	Y+3, r19	; 0x03
    1028:	2a 83       	std	Y+2, r18	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	c9 f0       	breq	.+50     	; 0x1066 <DIO_vClearPort+0x54>
    1034:	2a 81       	ldd	r18, Y+2	; 0x02
    1036:	3b 81       	ldd	r19, Y+3	; 0x03
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <DIO_vClearPort+0x36>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <DIO_vClearPort+0x4c>
    1046:	1a c0       	rjmp	.+52     	; 0x107c <DIO_vClearPort+0x6a>
    1048:	2a 81       	ldd	r18, Y+2	; 0x02
    104a:	3b 81       	ldd	r19, Y+3	; 0x03
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	71 f0       	breq	.+28     	; 0x106e <DIO_vClearPort+0x5c>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	69 f0       	breq	.+26     	; 0x1076 <DIO_vClearPort+0x64>
    105c:	0f c0       	rjmp	.+30     	; 0x107c <DIO_vClearPort+0x6a>
	{
	case  DIO_PORTA:
		PORTA=0b00000000;
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	10 82       	st	Z, r1
    1064:	0b c0       	rjmp	.+22     	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTB:
		PORTB=0b00000000;
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	10 82       	st	Z, r1
    106c:	07 c0       	rjmp	.+14     	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTC:
		PORTC=0b00000000;
    106e:	e5 e3       	ldi	r30, 0x35	; 53
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	10 82       	st	Z, r1
    1074:	03 c0       	rjmp	.+6      	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTD:
		PORTD=0b00000000;
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	10 82       	st	Z, r1
		break;
	}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_vSetPinDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 7
 */
void DIO_vSetPinDirec(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber,u8 Copy_u8Direc)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2d 97       	sbiw	r28, 0x0d	; 13
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6a 83       	std	Y+2, r22	; 0x02
    10a0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORTNumber)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 87       	std	Y+13, r19	; 0x0d
    10aa:	2c 87       	std	Y+12, r18	; 0x0c
    10ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <DIO_vSetPinDirec+0x30>
    10b6:	4f c0       	rjmp	.+158    	; 0x1156 <DIO_vSetPinDirec+0xce>
    10b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_vSetPinDirec+0x44>
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <DIO_vSetPinDirec+0x5e>
    10ca:	ec c0       	rjmp	.+472    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
    10cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <DIO_vSetPinDirec+0x50>
    10d6:	77 c0       	rjmp	.+238    	; 0x11c6 <DIO_vSetPinDirec+0x13e>
    10d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10da:	9d 85       	ldd	r25, Y+13	; 0x0d
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_vSetPinDirec+0x5c>
    10e2:	a9 c0       	rjmp	.+338    	; 0x1236 <DIO_vSetPinDirec+0x1ae>
    10e4:	df c0       	rjmp	.+446    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3b 87       	std	Y+11, r19	; 0x0b
    10ee:	2a 87       	std	Y+10, r18	; 0x0a
    10f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	31 f0       	breq	.+12     	; 0x1104 <DIO_vSetPinDirec+0x7c>
    10f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	31 05       	cpc	r19, r1
    1100:	b1 f0       	breq	.+44     	; 0x112e <DIO_vSetPinDirec+0xa6>
    1102:	d0 c0       	rjmp	.+416    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
			{
			case DIO_INPUT:
				clearbit(DDRA,Copy_u8PinNumber);
    1104:	aa e3       	ldi	r26, 0x3A	; 58
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ea e3       	ldi	r30, 0x3A	; 58
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_vSetPinDirec+0x9a>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_vSetPinDirec+0x96>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	bb c0       	rjmp	.+374    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,Copy_u8PinNumber);
    112e:	aa e3       	ldi	r26, 0x3A	; 58
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ea e3       	ldi	r30, 0x3A	; 58
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_vSetPinDirec+0xc4>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_vSetPinDirec+0xc0>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	a7 c0       	rjmp	.+334    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	39 87       	std	Y+9, r19	; 0x09
    115e:	28 87       	std	Y+8, r18	; 0x08
    1160:	88 85       	ldd	r24, Y+8	; 0x08
    1162:	99 85       	ldd	r25, Y+9	; 0x09
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	31 f0       	breq	.+12     	; 0x1174 <DIO_vSetPinDirec+0xec>
    1168:	28 85       	ldd	r18, Y+8	; 0x08
    116a:	39 85       	ldd	r19, Y+9	; 0x09
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	b1 f0       	breq	.+44     	; 0x119e <DIO_vSetPinDirec+0x116>
    1172:	98 c0       	rjmp	.+304    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRB,Copy_u8PinNumber);
    1174:	a7 e3       	ldi	r26, 0x37	; 55
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_vSetPinDirec+0x10a>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_vSetPinDirec+0x106>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	83 c0       	rjmp	.+262    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,Copy_u8PinNumber);
    119e:	a7 e3       	ldi	r26, 0x37	; 55
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e7 e3       	ldi	r30, 0x37	; 55
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_vSetPinDirec+0x134>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_vSetPinDirec+0x130>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	6f c0       	rjmp	.+222    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <DIO_vSetPinDirec+0x15c>
    11d8:	2e 81       	ldd	r18, Y+6	; 0x06
    11da:	3f 81       	ldd	r19, Y+7	; 0x07
    11dc:	21 30       	cpi	r18, 0x01	; 1
    11de:	31 05       	cpc	r19, r1
    11e0:	b1 f0       	breq	.+44     	; 0x120e <DIO_vSetPinDirec+0x186>
    11e2:	60 c0       	rjmp	.+192    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRC,Copy_u8PinNumber);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_vSetPinDirec+0x17a>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_vSetPinDirec+0x176>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	4b c0       	rjmp	.+150    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,Copy_u8PinNumber);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_vSetPinDirec+0x1a4>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_vSetPinDirec+0x1a0>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	37 c0       	rjmp	.+110    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	31 f0       	breq	.+12     	; 0x1254 <DIO_vSetPinDirec+0x1cc>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	21 30       	cpi	r18, 0x01	; 1
    124e:	31 05       	cpc	r19, r1
    1250:	b1 f0       	breq	.+44     	; 0x127e <DIO_vSetPinDirec+0x1f6>
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRD,Copy_u8PinNumber);
    1254:	a1 e3       	ldi	r26, 0x31	; 49
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e1 e3       	ldi	r30, 0x31	; 49
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_vSetPinDirec+0x1ea>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_vSetPinDirec+0x1e6>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,Copy_u8PinNumber);
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_vSetPinDirec+0x214>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_vSetPinDirec+0x210>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    12a4:	2d 96       	adiw	r28, 0x0d	; 13
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <DIO_vToggletPort>:
 * Input: Port number
 * Output:
 * 8
 */
void DIO_vToggletPort(u8 Copy_u8PORTNumber)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2b 97       	sbiw	r28, 0x0b	; 11
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	89 87       	std	Y+9, r24	; 0x09
	switch(Copy_u8PORTNumber)
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3b 87       	std	Y+11, r19	; 0x0b
    12d4:	2a 87       	std	Y+10, r18	; 0x0a
    12d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	a9 f1       	breq	.+106    	; 0x134a <DIO_vToggletPort+0x94>
    12e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    12e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_vToggletPort+0x3e>
    12ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	71 f0       	breq	.+28     	; 0x130e <DIO_vToggletPort+0x58>
    12f2:	84 c0       	rjmp	.+264    	; 0x13fc <DIO_vToggletPort+0x146>
    12f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <DIO_vToggletPort+0x4a>
    12fe:	43 c0       	rjmp	.+134    	; 0x1386 <DIO_vToggletPort+0xd0>
    1300:	8a 85       	ldd	r24, Y+10	; 0x0a
    1302:	9b 85       	ldd	r25, Y+11	; 0x0b
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <DIO_vToggletPort+0x56>
    130a:	5b c0       	rjmp	.+182    	; 0x13c2 <DIO_vToggletPort+0x10c>
    130c:	77 c0       	rjmp	.+238    	; 0x13fc <DIO_vToggletPort+0x146>
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    130e:	18 86       	std	Y+8, r1	; 0x08
    1310:	1f 82       	std	Y+7, r1	; 0x07
    1312:	15 c0       	rjmp	.+42     	; 0x133e <DIO_vToggletPort+0x88>
		{
			togglebit(PORTA , Pin_Counter) ;
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0f 80       	ldd	r0, Y+7	; 0x07
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_vToggletPort+0x76>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_vToggletPort+0x72>
    1330:	82 27       	eor	r24, r18
    1332:	8c 93       	st	X, r24
{
	switch(Copy_u8PORTNumber)
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	98 87       	std	Y+8, r25	; 0x08
    133c:	8f 83       	std	Y+7, r24	; 0x07
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	91 05       	cpc	r25, r1
    1346:	34 f3       	brlt	.-52     	; 0x1314 <DIO_vToggletPort+0x5e>
    1348:	59 c0       	rjmp	.+178    	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    134a:	1e 82       	std	Y+6, r1	; 0x06
    134c:	1d 82       	std	Y+5, r1	; 0x05
    134e:	15 c0       	rjmp	.+42     	; 0x137a <DIO_vToggletPort+0xc4>
		{
			togglebit(PORTB , Pin_Counter) ;
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0d 80       	ldd	r0, Y+5	; 0x05
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_vToggletPort+0xb2>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_vToggletPort+0xae>
    136c:	82 27       	eor	r24, r18
    136e:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	91 05       	cpc	r25, r1
    1382:	34 f3       	brlt	.-52     	; 0x1350 <DIO_vToggletPort+0x9a>
    1384:	3b c0       	rjmp	.+118    	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1386:	1c 82       	std	Y+4, r1	; 0x04
    1388:	1b 82       	std	Y+3, r1	; 0x03
    138a:	15 c0       	rjmp	.+42     	; 0x13b6 <DIO_vToggletPort+0x100>
		{
			togglebit(PORTC , Pin_Counter) ;
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0b 80       	ldd	r0, Y+3	; 0x03
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_vToggletPort+0xee>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_vToggletPort+0xea>
    13a8:	82 27       	eor	r24, r18
    13aa:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f3       	brlt	.-52     	; 0x138c <DIO_vToggletPort+0xd6>
    13c0:	1d c0       	rjmp	.+58     	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13c2:	1a 82       	std	Y+2, r1	; 0x02
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	15 c0       	rjmp	.+42     	; 0x13f2 <DIO_vToggletPort+0x13c>
		{
			togglebit(PORTD , Pin_Counter) ;
    13c8:	a2 e3       	ldi	r26, 0x32	; 50
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	09 80       	ldd	r0, Y+1	; 0x01
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_vToggletPort+0x12a>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_vToggletPort+0x126>
    13e4:	82 27       	eor	r24, r18
    13e6:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	91 05       	cpc	r25, r1
    13fa:	34 f3       	brlt	.-52     	; 0x13c8 <DIO_vToggletPort+0x112>
	}

	}


}
    13fc:	2b 96       	adiw	r28, 0x0b	; 11
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <DIO_vSetPortvalue>:
 * Input: Port number , command
 * Output:
 * 9
 */
void DIO_vSetPortvalue(u8 Copy_u8PORTNumber,u8 Copy_u8value)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_vSetPortvalue+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <DIO_vSetPortvalue+0x8>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	d1 f0       	breq	.+52     	; 0x1466 <DIO_vSetPortvalue+0x58>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_vSetPortvalue+0x38>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_vSetPortvalue+0x4e>
    1444:	1e c0       	rjmp	.+60     	; 0x1482 <DIO_vSetPortvalue+0x74>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <DIO_vSetPortvalue+0x62>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <DIO_vSetPortvalue+0x6c>
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_vSetPortvalue+0x74>
		{
		case DIO_PORTA:
			PORTA=Copy_u8value;
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8value;
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8value;
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8value;
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
			break;

		}
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_vSetPortDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 10
 */
void DIO_vSetPortDirec(u8 Copy_u8PORTNumber ,u8 Copy_u8Direc)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2c 97       	sbiw	r28, 0x0c	; 12
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3c 87       	std	Y+12, r19	; 0x0c
    14b0:	2b 87       	std	Y+11, r18	; 0x0b
    14b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <DIO_vSetPortDirec+0x2e>
    14bc:	98 c0       	rjmp	.+304    	; 0x15ee <DIO_vSetPortDirec+0x15e>
    14be:	2b 85       	ldd	r18, Y+11	; 0x0b
    14c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <DIO_vSetPortDirec+0x42>
    14c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	71 f0       	breq	.+28     	; 0x14ec <DIO_vSetPortDirec+0x5c>
    14d0:	10 c2       	rjmp	.+1056   	; 0x18f2 <DIO_vSetPortDirec+0x462>
    14d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <DIO_vSetPortDirec+0x4e>
    14dc:	09 c1       	rjmp	.+530    	; 0x16f0 <DIO_vSetPortDirec+0x260>
    14de:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <DIO_vSetPortDirec+0x5a>
    14e8:	84 c1       	rjmp	.+776    	; 0x17f2 <DIO_vSetPortDirec+0x362>
    14ea:	03 c2       	rjmp	.+1030   	; 0x18f2 <DIO_vSetPortDirec+0x462>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3a 87       	std	Y+10, r19	; 0x0a
    14f4:	29 87       	std	Y+9, r18	; 0x09
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	31 f0       	breq	.+12     	; 0x150a <DIO_vSetPortDirec+0x7a>
    14fe:	29 85       	ldd	r18, Y+9	; 0x09
    1500:	3a 85       	ldd	r19, Y+10	; 0x0a
    1502:	21 30       	cpi	r18, 0x01	; 1
    1504:	31 05       	cpc	r19, r1
    1506:	d1 f1       	breq	.+116    	; 0x157c <DIO_vSetPortDirec+0xec>
    1508:	f4 c1       	rjmp	.+1000   	; 0x18f2 <DIO_vSetPortDirec+0x462>
			{
			case DIO_INPUT:
				clearbit(DDRA,0);
    150a:	aa e3       	ldi	r26, 0x3A	; 58
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ea e3       	ldi	r30, 0x3A	; 58
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8e 7f       	andi	r24, 0xFE	; 254
    1516:	8c 93       	st	X, r24
				clearbit(DDRA,1);
    1518:	aa e3       	ldi	r26, 0x3A	; 58
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ea e3       	ldi	r30, 0x3A	; 58
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8d 7f       	andi	r24, 0xFD	; 253
    1524:	8c 93       	st	X, r24
				clearbit(DDRA,2);
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	8c 93       	st	X, r24
				clearbit(DDRA,3);
    1534:	aa e3       	ldi	r26, 0x3A	; 58
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	8c 93       	st	X, r24
				clearbit(DDRA,4);
    1542:	aa e3       	ldi	r26, 0x3A	; 58
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ea e3       	ldi	r30, 0x3A	; 58
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 7e       	andi	r24, 0xEF	; 239
    154e:	8c 93       	st	X, r24
				clearbit(DDRA,5);
    1550:	aa e3       	ldi	r26, 0x3A	; 58
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ea e3       	ldi	r30, 0x3A	; 58
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8f 7d       	andi	r24, 0xDF	; 223
    155c:	8c 93       	st	X, r24
				clearbit(DDRA,6);
    155e:	aa e3       	ldi	r26, 0x3A	; 58
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ea e3       	ldi	r30, 0x3A	; 58
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8f 7b       	andi	r24, 0xBF	; 191
    156a:	8c 93       	st	X, r24
				clearbit(DDRA,7);
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 77       	andi	r24, 0x7F	; 127
    1578:	8c 93       	st	X, r24
    157a:	bb c1       	rjmp	.+886    	; 0x18f2 <DIO_vSetPortDirec+0x462>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,0);
    157c:	aa e3       	ldi	r26, 0x3A	; 58
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ea e3       	ldi	r30, 0x3A	; 58
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	8c 93       	st	X, r24
				setbit(DDRA,1);
    158a:	aa e3       	ldi	r26, 0x3A	; 58
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ea e3       	ldi	r30, 0x3A	; 58
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	82 60       	ori	r24, 0x02	; 2
    1596:	8c 93       	st	X, r24
				setbit(DDRA,2);
    1598:	aa e3       	ldi	r26, 0x3A	; 58
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ea e3       	ldi	r30, 0x3A	; 58
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	8c 93       	st	X, r24
				setbit(DDRA,3);
    15a6:	aa e3       	ldi	r26, 0x3A	; 58
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 60       	ori	r24, 0x08	; 8
    15b2:	8c 93       	st	X, r24
				setbit(DDRA,4);
    15b4:	aa e3       	ldi	r26, 0x3A	; 58
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ea e3       	ldi	r30, 0x3A	; 58
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 61       	ori	r24, 0x10	; 16
    15c0:	8c 93       	st	X, r24
				setbit(DDRA,5);
    15c2:	aa e3       	ldi	r26, 0x3A	; 58
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ea e3       	ldi	r30, 0x3A	; 58
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 62       	ori	r24, 0x20	; 32
    15ce:	8c 93       	st	X, r24
				setbit(DDRA,6);
    15d0:	aa e3       	ldi	r26, 0x3A	; 58
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ea e3       	ldi	r30, 0x3A	; 58
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 64       	ori	r24, 0x40	; 64
    15dc:	8c 93       	st	X, r24
				setbit(DDRA,7);
    15de:	aa e3       	ldi	r26, 0x3A	; 58
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ea e3       	ldi	r30, 0x3A	; 58
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 68       	ori	r24, 0x80	; 128
    15ea:	8c 93       	st	X, r24
    15ec:	82 c1       	rjmp	.+772    	; 0x18f2 <DIO_vSetPortDirec+0x462>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	38 87       	std	Y+8, r19	; 0x08
    15f6:	2f 83       	std	Y+7, r18	; 0x07
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	31 f0       	breq	.+12     	; 0x160c <DIO_vSetPortDirec+0x17c>
    1600:	2f 81       	ldd	r18, Y+7	; 0x07
    1602:	38 85       	ldd	r19, Y+8	; 0x08
    1604:	21 30       	cpi	r18, 0x01	; 1
    1606:	31 05       	cpc	r19, r1
    1608:	d1 f1       	breq	.+116    	; 0x167e <DIO_vSetPortDirec+0x1ee>
    160a:	73 c1       	rjmp	.+742    	; 0x18f2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRB,0);
    160c:	a7 e3       	ldi	r26, 0x37	; 55
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8e 7f       	andi	r24, 0xFE	; 254
    1618:	8c 93       	st	X, r24
							clearbit(DDRB,1);
    161a:	a7 e3       	ldi	r26, 0x37	; 55
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e7 e3       	ldi	r30, 0x37	; 55
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8d 7f       	andi	r24, 0xFD	; 253
    1626:	8c 93       	st	X, r24
							clearbit(DDRB,2);
    1628:	a7 e3       	ldi	r26, 0x37	; 55
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e7 e3       	ldi	r30, 0x37	; 55
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8b 7f       	andi	r24, 0xFB	; 251
    1634:	8c 93       	st	X, r24
							clearbit(DDRB,3);
    1636:	a7 e3       	ldi	r26, 0x37	; 55
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e7 e3       	ldi	r30, 0x37	; 55
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	87 7f       	andi	r24, 0xF7	; 247
    1642:	8c 93       	st	X, r24
							clearbit(DDRB,4);
    1644:	a7 e3       	ldi	r26, 0x37	; 55
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e7 e3       	ldi	r30, 0x37	; 55
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8f 7e       	andi	r24, 0xEF	; 239
    1650:	8c 93       	st	X, r24
							clearbit(DDRB,5);
    1652:	a7 e3       	ldi	r26, 0x37	; 55
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e7 e3       	ldi	r30, 0x37	; 55
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 7d       	andi	r24, 0xDF	; 223
    165e:	8c 93       	st	X, r24
							clearbit(DDRB,6);
    1660:	a7 e3       	ldi	r26, 0x37	; 55
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e7 e3       	ldi	r30, 0x37	; 55
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
							clearbit(DDRB,7);
    166e:	a7 e3       	ldi	r26, 0x37	; 55
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	8c 93       	st	X, r24
    167c:	3a c1       	rjmp	.+628    	; 0x18f2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,0);
    167e:	a7 e3       	ldi	r26, 0x37	; 55
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e7 e3       	ldi	r30, 0x37	; 55
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	8c 93       	st	X, r24
							setbit(DDRB,1);
    168c:	a7 e3       	ldi	r26, 0x37	; 55
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e7 e3       	ldi	r30, 0x37	; 55
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	8c 93       	st	X, r24
							setbit(DDRB,2);
    169a:	a7 e3       	ldi	r26, 0x37	; 55
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e7 e3       	ldi	r30, 0x37	; 55
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	84 60       	ori	r24, 0x04	; 4
    16a6:	8c 93       	st	X, r24
							setbit(DDRB,3);
    16a8:	a7 e3       	ldi	r26, 0x37	; 55
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e7 e3       	ldi	r30, 0x37	; 55
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 60       	ori	r24, 0x08	; 8
    16b4:	8c 93       	st	X, r24
							setbit(DDRB,4);
    16b6:	a7 e3       	ldi	r26, 0x37	; 55
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e7 e3       	ldi	r30, 0x37	; 55
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 61       	ori	r24, 0x10	; 16
    16c2:	8c 93       	st	X, r24
							setbit(DDRB,5);
    16c4:	a7 e3       	ldi	r26, 0x37	; 55
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	8c 93       	st	X, r24
							setbit(DDRB,6);
    16d2:	a7 e3       	ldi	r26, 0x37	; 55
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e7 e3       	ldi	r30, 0x37	; 55
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 64       	ori	r24, 0x40	; 64
    16de:	8c 93       	st	X, r24
							setbit(DDRB,7);
    16e0:	a7 e3       	ldi	r26, 0x37	; 55
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e7 e3       	ldi	r30, 0x37	; 55
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	8c 93       	st	X, r24
    16ee:	01 c1       	rjmp	.+514    	; 0x18f2 <DIO_vSetPortDirec+0x462>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3e 83       	std	Y+6, r19	; 0x06
    16f8:	2d 83       	std	Y+5, r18	; 0x05
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	31 f0       	breq	.+12     	; 0x170e <DIO_vSetPortDirec+0x27e>
    1702:	2d 81       	ldd	r18, Y+5	; 0x05
    1704:	3e 81       	ldd	r19, Y+6	; 0x06
    1706:	21 30       	cpi	r18, 0x01	; 1
    1708:	31 05       	cpc	r19, r1
    170a:	d1 f1       	breq	.+116    	; 0x1780 <DIO_vSetPortDirec+0x2f0>
    170c:	f2 c0       	rjmp	.+484    	; 0x18f2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRC,0);
    170e:	a4 e3       	ldi	r26, 0x34	; 52
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e4 e3       	ldi	r30, 0x34	; 52
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	8c 93       	st	X, r24
							clearbit(DDRC,1);
    171c:	a4 e3       	ldi	r26, 0x34	; 52
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e3       	ldi	r30, 0x34	; 52
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8d 7f       	andi	r24, 0xFD	; 253
    1728:	8c 93       	st	X, r24
							clearbit(DDRC,2);
    172a:	a4 e3       	ldi	r26, 0x34	; 52
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8b 7f       	andi	r24, 0xFB	; 251
    1736:	8c 93       	st	X, r24
							clearbit(DDRC,3);
    1738:	a4 e3       	ldi	r26, 0x34	; 52
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e3       	ldi	r30, 0x34	; 52
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	87 7f       	andi	r24, 0xF7	; 247
    1744:	8c 93       	st	X, r24
							clearbit(DDRC,4);
    1746:	a4 e3       	ldi	r26, 0x34	; 52
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e4 e3       	ldi	r30, 0x34	; 52
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8f 7e       	andi	r24, 0xEF	; 239
    1752:	8c 93       	st	X, r24
							clearbit(DDRC,5);
    1754:	a4 e3       	ldi	r26, 0x34	; 52
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	8c 93       	st	X, r24
							clearbit(DDRC,6);
    1762:	a4 e3       	ldi	r26, 0x34	; 52
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e4 e3       	ldi	r30, 0x34	; 52
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	8c 93       	st	X, r24
							clearbit(DDRC,7);
    1770:	a4 e3       	ldi	r26, 0x34	; 52
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8f 77       	andi	r24, 0x7F	; 127
    177c:	8c 93       	st	X, r24
    177e:	b9 c0       	rjmp	.+370    	; 0x18f2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,0);
    1780:	a4 e3       	ldi	r26, 0x34	; 52
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e4 e3       	ldi	r30, 0x34	; 52
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	81 60       	ori	r24, 0x01	; 1
    178c:	8c 93       	st	X, r24
							setbit(DDRC,1);
    178e:	a4 e3       	ldi	r26, 0x34	; 52
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e4 e3       	ldi	r30, 0x34	; 52
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	82 60       	ori	r24, 0x02	; 2
    179a:	8c 93       	st	X, r24
							setbit(DDRC,2);
    179c:	a4 e3       	ldi	r26, 0x34	; 52
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	84 60       	ori	r24, 0x04	; 4
    17a8:	8c 93       	st	X, r24
							setbit(DDRC,3);
    17aa:	a4 e3       	ldi	r26, 0x34	; 52
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e4 e3       	ldi	r30, 0x34	; 52
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	88 60       	ori	r24, 0x08	; 8
    17b6:	8c 93       	st	X, r24
							setbit(DDRC,4);
    17b8:	a4 e3       	ldi	r26, 0x34	; 52
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e4 e3       	ldi	r30, 0x34	; 52
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 61       	ori	r24, 0x10	; 16
    17c4:	8c 93       	st	X, r24
							setbit(DDRC,5);
    17c6:	a4 e3       	ldi	r26, 0x34	; 52
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e4 e3       	ldi	r30, 0x34	; 52
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 62       	ori	r24, 0x20	; 32
    17d2:	8c 93       	st	X, r24
							setbit(DDRC,6);
    17d4:	a4 e3       	ldi	r26, 0x34	; 52
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e4 e3       	ldi	r30, 0x34	; 52
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24
							setbit(DDRC,7);
    17e2:	a4 e3       	ldi	r26, 0x34	; 52
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	8c 93       	st	X, r24
    17f0:	80 c0       	rjmp	.+256    	; 0x18f2 <DIO_vSetPortDirec+0x462>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	3c 83       	std	Y+4, r19	; 0x04
    17fa:	2b 83       	std	Y+3, r18	; 0x03
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	31 f0       	breq	.+12     	; 0x1810 <DIO_vSetPortDirec+0x380>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	21 30       	cpi	r18, 0x01	; 1
    180a:	31 05       	cpc	r19, r1
    180c:	d1 f1       	breq	.+116    	; 0x1882 <DIO_vSetPortDirec+0x3f2>
    180e:	71 c0       	rjmp	.+226    	; 0x18f2 <DIO_vSetPortDirec+0x462>
						{
						case DIO_INPUT:
							clearbit(DDRD,0);
    1810:	a1 e3       	ldi	r26, 0x31	; 49
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8e 7f       	andi	r24, 0xFE	; 254
    181c:	8c 93       	st	X, r24
							clearbit(DDRD,1);
    181e:	a1 e3       	ldi	r26, 0x31	; 49
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8d 7f       	andi	r24, 0xFD	; 253
    182a:	8c 93       	st	X, r24
							clearbit(DDRD,2);
    182c:	a1 e3       	ldi	r26, 0x31	; 49
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e1 e3       	ldi	r30, 0x31	; 49
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8b 7f       	andi	r24, 0xFB	; 251
    1838:	8c 93       	st	X, r24
							clearbit(DDRD,3);
    183a:	a1 e3       	ldi	r26, 0x31	; 49
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e1 e3       	ldi	r30, 0x31	; 49
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	87 7f       	andi	r24, 0xF7	; 247
    1846:	8c 93       	st	X, r24
							clearbit(DDRD,4);
    1848:	a1 e3       	ldi	r26, 0x31	; 49
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e1 e3       	ldi	r30, 0x31	; 49
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 7e       	andi	r24, 0xEF	; 239
    1854:	8c 93       	st	X, r24
							clearbit(DDRD,5);
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 7d       	andi	r24, 0xDF	; 223
    1862:	8c 93       	st	X, r24
							clearbit(DDRD,6);
    1864:	a1 e3       	ldi	r26, 0x31	; 49
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e1 e3       	ldi	r30, 0x31	; 49
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8f 7b       	andi	r24, 0xBF	; 191
    1870:	8c 93       	st	X, r24
							clearbit(DDRD,7);
    1872:	a1 e3       	ldi	r26, 0x31	; 49
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e1 e3       	ldi	r30, 0x31	; 49
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	8c 93       	st	X, r24
    1880:	38 c0       	rjmp	.+112    	; 0x18f2 <DIO_vSetPortDirec+0x462>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,0);
    1882:	a1 e3       	ldi	r26, 0x31	; 49
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e1 e3       	ldi	r30, 0x31	; 49
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	8c 93       	st	X, r24
							setbit(DDRD,1);
    1890:	a1 e3       	ldi	r26, 0x31	; 49
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e1 e3       	ldi	r30, 0x31	; 49
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	82 60       	ori	r24, 0x02	; 2
    189c:	8c 93       	st	X, r24
							setbit(DDRD,2);
    189e:	a1 e3       	ldi	r26, 0x31	; 49
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e1 e3       	ldi	r30, 0x31	; 49
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	8c 93       	st	X, r24
							setbit(DDRD,3);
    18ac:	a1 e3       	ldi	r26, 0x31	; 49
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e1 e3       	ldi	r30, 0x31	; 49
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	8c 93       	st	X, r24
							setbit(DDRD,4);
    18ba:	a1 e3       	ldi	r26, 0x31	; 49
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e1 e3       	ldi	r30, 0x31	; 49
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 61       	ori	r24, 0x10	; 16
    18c6:	8c 93       	st	X, r24
							setbit(DDRD,5);
    18c8:	a1 e3       	ldi	r26, 0x31	; 49
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e1 e3       	ldi	r30, 0x31	; 49
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 62       	ori	r24, 0x20	; 32
    18d4:	8c 93       	st	X, r24
							setbit(DDRD,6);
    18d6:	a1 e3       	ldi	r26, 0x31	; 49
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 64       	ori	r24, 0x40	; 64
    18e2:	8c 93       	st	X, r24
							setbit(DDRD,7);
    18e4:	a1 e3       	ldi	r26, 0x31	; 49
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e1 e3       	ldi	r30, 0x31	; 49
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    18f2:	2c 96       	adiw	r28, 0x0c	; 12
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <Keypad_u8ReadKey>:
 * input:
 * output:retrun number from 0 to 15
 */

u8 Keypad_u8ReadKey(void)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	69 97       	sbiw	r28, 0x19	; 25
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
	u8 local_au8KeypadArr[4][4]={{0,1,2,3},{4,5,6,7},{8,9,'A','B'},{'C','D','E','#'}};
    1918:	ce 01       	movw	r24, r28
    191a:	05 96       	adiw	r24, 0x05	; 5
    191c:	9e 8b       	std	Y+22, r25	; 0x16
    191e:	8d 8b       	std	Y+21, r24	; 0x15
    1920:	e9 e8       	ldi	r30, 0x89	; 137
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	f8 8f       	std	Y+24, r31	; 0x18
    1926:	ef 8b       	std	Y+23, r30	; 0x17
    1928:	f0 e1       	ldi	r31, 0x10	; 16
    192a:	f9 8f       	std	Y+25, r31	; 0x19
    192c:	ef 89       	ldd	r30, Y+23	; 0x17
    192e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1930:	00 80       	ld	r0, Z
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	98 8d       	ldd	r25, Y+24	; 0x18
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	98 8f       	std	Y+24, r25	; 0x18
    193a:	8f 8b       	std	Y+23, r24	; 0x17
    193c:	ed 89       	ldd	r30, Y+21	; 0x15
    193e:	fe 89       	ldd	r31, Y+22	; 0x16
    1940:	00 82       	st	Z, r0
    1942:	8d 89       	ldd	r24, Y+21	; 0x15
    1944:	9e 89       	ldd	r25, Y+22	; 0x16
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	9e 8b       	std	Y+22, r25	; 0x16
    194a:	8d 8b       	std	Y+21, r24	; 0x15
    194c:	99 8d       	ldd	r25, Y+25	; 0x19
    194e:	91 50       	subi	r25, 0x01	; 1
    1950:	99 8f       	std	Y+25, r25	; 0x19
    1952:	e9 8d       	ldd	r30, Y+25	; 0x19
    1954:	ee 23       	and	r30, r30
    1956:	51 f7       	brne	.-44     	; 0x192c <Keypad_u8ReadKey+0x28>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;
    1958:	84 e6       	ldi	r24, 0x64	; 100
    195a:	89 83       	std	Y+1, r24	; 0x01

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    195c:	1b 82       	std	Y+3, r1	; 0x03
    195e:	45 c0       	rjmp	.+138    	; 0x19ea <Keypad_u8ReadKey+0xe6>
	{
		DIO_vSetPin(Colums_Port,0);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,1);
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,2);
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,3);
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>

		DIO_vClearPin(Colums_Port,local_u8Colum);
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	6b 81       	ldd	r22, Y+3	; 0x03
    1984:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	8c 83       	std	Y+4, r24	; 0x04
    198c:	28 c0       	rjmp	.+80     	; 0x19de <Keypad_u8ReadKey+0xda>
		{
			local_u8Read=DIO_vGetPin(Rows_Port,local_u8Row);
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	6c 81       	ldd	r22, Y+4	; 0x04
    1992:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_vGetPin>
    1996:	8a 83       	std	Y+2, r24	; 0x02
			if(local_u8Read==0)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	88 23       	and	r24, r24
    199c:	e9 f4       	brne	.+58     	; 0x19d8 <Keypad_u8ReadKey+0xd4>
			{
				local_u8RetrunValue= local_au8KeypadArr[local_u8Row-4][local_u8Colum];
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9c 01       	movw	r18, r24
    19a6:	24 50       	subi	r18, 0x04	; 4
    19a8:	30 40       	sbci	r19, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	48 2f       	mov	r20, r24
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	22 0f       	add	r18, r18
    19b2:	33 1f       	adc	r19, r19
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	84 0f       	add	r24, r20
    19c2:	95 1f       	adc	r25, r21
    19c4:	fc 01       	movw	r30, r24
    19c6:	34 96       	adiw	r30, 0x04	; 4
    19c8:	80 81       	ld	r24, Z
    19ca:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_vGetPin(Rows_Port,local_u8Row)==0)
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	6c 81       	ldd	r22, Y+4	; 0x04
    19d0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_vGetPin>
    19d4:	88 23       	and	r24, r24
    19d6:	d1 f3       	breq	.-12     	; 0x19cc <Keypad_u8ReadKey+0xc8>
		DIO_vSetPin(Colums_Port,2);
		DIO_vSetPin(Colums_Port,3);

		DIO_vClearPin(Colums_Port,local_u8Colum);

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	8c 83       	std	Y+4, r24	; 0x04
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	a8 f2       	brcs	.-86     	; 0x198e <Keypad_u8ReadKey+0x8a>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <Keypad_u8ReadKey+0xee>
    19f0:	b7 cf       	rjmp	.-146    	; 0x1960 <Keypad_u8ReadKey+0x5c>
				//nothing
			}
		}

	}
	return local_u8RetrunValue;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f4:	69 96       	adiw	r28, 0x19	; 25
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <LCD_vWriteCommand>:
#include "LCD_interface.h"
#include <avr/delay.h>


void LCD_vWriteCommand(u8 copy_u8command)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 0
	DIO_vClearPin(Port_Control,LCD_RSPin);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(Port_Data,copy_u8command);
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a30:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_vSetPortvalue>
	//enable ->1
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	62 e0       	ldi	r22, 0x02	; 2
    1a38:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e0       	ldi	r26, 0x00	; 0
    1a42:	b0 e4       	ldi	r27, 0x40	; 64
    1a44:	8b 87       	std	Y+11, r24	; 0x0b
    1a46:	9c 87       	std	Y+12, r25	; 0x0c
    1a48:	ad 87       	std	Y+13, r26	; 0x0d
    1a4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a e7       	ldi	r20, 0x7A	; 122
    1a5a:	53 e4       	ldi	r21, 0x43	; 67
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	8f 83       	std	Y+7, r24	; 0x07
    1a66:	98 87       	std	Y+8, r25	; 0x08
    1a68:	a9 87       	std	Y+9, r26	; 0x09
    1a6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <LCD_vWriteCommand+0x88>
		__ticks = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <LCD_vWriteCommand+0x106>
	else if (__tmp > 65535)
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	4c f5       	brge	.+82     	; 0x1af8 <LCD_vWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	0f c0       	rjmp	.+30     	; 0x1aee <LCD_vWriteCommand+0xe8>
    1ad0:	89 e1       	ldi	r24, 0x19	; 25
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_vWriteCommand+0xd6>
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	69 f7       	brne	.-38     	; 0x1ad0 <LCD_vWriteCommand+0xca>
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <LCD_vWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_vWriteCommand+0x112>
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable ->0
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
}
    1b28:	2f 96       	adiw	r28, 0x0f	; 15
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <LCD_vWriteChar>:

void LCD_vWriteChar(u8 copy_u8Char)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	2f 97       	sbiw	r28, 0x0f	; 15
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 1
	DIO_vSetPin(Port_Control,LCD_RSPin);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(Port_Data,copy_u8Char);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b64:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_vSetPortvalue>
	//enable
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e4       	ldi	r27, 0x40	; 64
    1b78:	8b 87       	std	Y+11, r24	; 0x0b
    1b7a:	9c 87       	std	Y+12, r25	; 0x0c
    1b7c:	ad 87       	std	Y+13, r26	; 0x0d
    1b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8f 83       	std	Y+7, r24	; 0x07
    1b9a:	98 87       	std	Y+8, r25	; 0x08
    1b9c:	a9 87       	std	Y+9, r26	; 0x09
    1b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_vWriteChar+0x88>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <LCD_vWriteChar+0x106>
	else if (__tmp > 65535)
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <LCD_vWriteChar+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <LCD_vWriteChar+0xe8>
    1c04:	89 e1       	ldi	r24, 0x19	; 25
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_vWriteChar+0xd6>
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <LCD_vWriteChar+0xca>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <LCD_vWriteChar+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_vWriteChar+0x112>
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	62 e0       	ldi	r22, 0x02	; 2
    1c58:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
}
    1c5c:	2f 96       	adiw	r28, 0x0f	; 15
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_vInitialize>:

void LCD_vInitialize(void)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	e8 97       	sbiw	r28, 0x38	; 56
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
	//Diricton port data & control
	DIO_vSetPortDirec(Port_Data,DIO_OUTPUT);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_vSetPortDirec>

	DIO_vSetPinDirec(Port_Control,0,DIO_OUTPUT);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,1,DIO_OUTPUT);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,2,DIO_OUTPUT);
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	62 e0       	ldi	r22, 0x02	; 2
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	aa ef       	ldi	r26, 0xFA	; 250
    1cae:	b3 e4       	ldi	r27, 0x43	; 67
    1cb0:	8d ab       	std	Y+53, r24	; 0x35
    1cb2:	9e ab       	std	Y+54, r25	; 0x36
    1cb4:	af ab       	std	Y+55, r26	; 0x37
    1cb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cba:	7e a9       	ldd	r23, Y+54	; 0x36
    1cbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4a e7       	ldi	r20, 0x7A	; 122
    1cc6:	53 e4       	ldi	r21, 0x43	; 67
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 ab       	std	Y+49, r24	; 0x31
    1cd2:	9a ab       	std	Y+50, r25	; 0x32
    1cd4:	ab ab       	std	Y+51, r26	; 0x33
    1cd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cda:	7a a9       	ldd	r23, Y+50	; 0x32
    1cdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cde:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <LCD_vInitialize+0x8c>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 ab       	std	Y+48, r25	; 0x30
    1cf6:	8f a7       	std	Y+47, r24	; 0x2f
    1cf8:	3f c0       	rjmp	.+126    	; 0x1d78 <LCD_vInitialize+0x10a>
	else if (__tmp > 65535)
    1cfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1cfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1d00:	9c a9       	ldd	r25, Y+52	; 0x34
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	4c f5       	brge	.+82     	; 0x1d64 <LCD_vInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	6d a9       	ldd	r22, Y+53	; 0x35
    1d14:	7e a9       	ldd	r23, Y+54	; 0x36
    1d16:	8f a9       	ldd	r24, Y+55	; 0x37
    1d18:	98 ad       	ldd	r25, Y+56	; 0x38
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	98 ab       	std	Y+48, r25	; 0x30
    1d38:	8f a7       	std	Y+47, r24	; 0x2f
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <LCD_vInitialize+0xec>
    1d3c:	89 e1       	ldi	r24, 0x19	; 25
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9e a7       	std	Y+46, r25	; 0x2e
    1d42:	8d a7       	std	Y+45, r24	; 0x2d
    1d44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_vInitialize+0xda>
    1d4c:	9e a7       	std	Y+46, r25	; 0x2e
    1d4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d52:	98 a9       	ldd	r25, Y+48	; 0x30
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	98 ab       	std	Y+48, r25	; 0x30
    1d58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	69 f7       	brne	.-38     	; 0x1d3c <LCD_vInitialize+0xce>
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <LCD_vInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	69 a9       	ldd	r22, Y+49	; 0x31
    1d66:	7a a9       	ldd	r23, Y+50	; 0x32
    1d68:	8b a9       	ldd	r24, Y+51	; 0x33
    1d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
    1d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7c:	9c a7       	std	Y+44, r25	; 0x2c
    1d7e:	8b a7       	std	Y+43, r24	; 0x2b
    1d80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_vInitialize+0x116>
    1d88:	9c a7       	std	Y+44, r25	; 0x2c
    1d8a:	8b a7       	std	Y+43, r24	; 0x2b

	//delay 500 ms
	_delay_ms(500);
	//writeCommand 0011 1000
	LCD_vWriteCommand(0b00111000);
    1d8c:	88 e3       	ldi	r24, 0x38	; 56
    1d8e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e4       	ldi	r27, 0x40	; 64
    1d9a:	8f a3       	std	Y+39, r24	; 0x27
    1d9c:	98 a7       	std	Y+40, r25	; 0x28
    1d9e:	a9 a7       	std	Y+41, r26	; 0x29
    1da0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a e7       	ldi	r20, 0x7A	; 122
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8b a3       	std	Y+35, r24	; 0x23
    1dbc:	9c a3       	std	Y+36, r25	; 0x24
    1dbe:	ad a3       	std	Y+37, r26	; 0x25
    1dc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <LCD_vInitialize+0x176>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a a3       	std	Y+34, r25	; 0x22
    1de0:	89 a3       	std	Y+33, r24	; 0x21
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <LCD_vInitialize+0x1f4>
	else if (__tmp > 65535)
    1de4:	6b a1       	ldd	r22, Y+35	; 0x23
    1de6:	7c a1       	ldd	r23, Y+36	; 0x24
    1de8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dea:	9e a1       	ldd	r25, Y+38	; 0x26
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <LCD_vInitialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1e00:	89 a5       	ldd	r24, Y+41	; 0x29
    1e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <LCD_vInitialize+0x1d6>
    1e26:	89 e1       	ldi	r24, 0x19	; 25
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	98 a3       	std	Y+32, r25	; 0x20
    1e2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e30:	98 a1       	ldd	r25, Y+32	; 0x20
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_vInitialize+0x1c4>
    1e36:	98 a3       	std	Y+32, r25	; 0x20
    1e38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <LCD_vInitialize+0x1b8>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <LCD_vInitialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e50:	7c a1       	ldd	r23, Y+36	; 0x24
    1e52:	8d a1       	ldd	r24, Y+37	; 0x25
    1e54:	9e a1       	ldd	r25, Y+38	; 0x26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	89 a1       	ldd	r24, Y+33	; 0x21
    1e64:	9a a1       	ldd	r25, Y+34	; 0x22
    1e66:	9e 8f       	std	Y+30, r25	; 0x1e
    1e68:	8d 8f       	std	Y+29, r24	; 0x1d
    1e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_vInitialize+0x200>
    1e72:	9e 8f       	std	Y+30, r25	; 0x1e
    1e74:	8d 8f       	std	Y+29, r24	; 0x1d
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 1100
	LCD_vWriteCommand(0b00001100);
    1e76:	8c e0       	ldi	r24, 0x0C	; 12
    1e78:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e4       	ldi	r27, 0x40	; 64
    1e84:	89 8f       	std	Y+25, r24	; 0x19
    1e86:	9a 8f       	std	Y+26, r25	; 0x1a
    1e88:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8d 8b       	std	Y+21, r24	; 0x15
    1ea6:	9e 8b       	std	Y+22, r25	; 0x16
    1ea8:	af 8b       	std	Y+23, r26	; 0x17
    1eaa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_vInitialize+0x260>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_vInitialize+0x2de>
	else if (__tmp > 65535)
    1ece:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_vInitialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_vInitialize+0x2c0>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9a 8b       	std	Y+18, r25	; 0x12
    1f16:	89 8b       	std	Y+17, r24	; 0x11
    1f18:	89 89       	ldd	r24, Y+17	; 0x11
    1f1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_vInitialize+0x2ae>
    1f20:	9a 8b       	std	Y+18, r25	; 0x12
    1f22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	9c 89       	ldd	r25, Y+20	; 0x14
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9c 8b       	std	Y+20, r25	; 0x14
    1f2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f30:	9c 89       	ldd	r25, Y+20	; 0x14
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_vInitialize+0x2a2>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_vInitialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9c 8b       	std	Y+20, r25	; 0x14
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
    1f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f50:	98 8b       	std	Y+16, r25	; 0x10
    1f52:	8f 87       	std	Y+15, r24	; 0x0f
    1f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f56:	98 89       	ldd	r25, Y+16	; 0x10
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_vInitialize+0x2ea>
    1f5c:	98 8b       	std	Y+16, r25	; 0x10
    1f5e:	8f 87       	std	Y+15, r24	; 0x0f
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 0001
	LCD_vWriteCommand(0b00000001);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e4       	ldi	r27, 0x40	; 64
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a e7       	ldi	r20, 0x7A	; 122
    1f84:	53 e4       	ldi	r21, 0x43	; 67
    1f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <LCD_vInitialize+0x34a>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <LCD_vInitialize+0x3c8>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <LCD_vInitialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_vInitialize+0x3aa>
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_vInitialize+0x398>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <LCD_vInitialize+0x38c>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LCD_vInitialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_vInitialize+0x3d4>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	//delay 2 ms
	_delay_ms(2);
}
    204a:	e8 96       	adiw	r28, 0x38	; 56
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <gotoXY>:

void gotoXY(u8 X,u8 Y)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <gotoXY+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <gotoXY+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(X)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	3d 83       	std	Y+5, r19	; 0x05
    2076:	2c 83       	std	Y+4, r18	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	31 f0       	breq	.+12     	; 0x208c <gotoXY+0x30>
    2080:	2c 81       	ldd	r18, Y+4	; 0x04
    2082:	3d 81       	ldd	r19, Y+5	; 0x05
    2084:	21 30       	cpi	r18, 0x01	; 1
    2086:	31 05       	cpc	r19, r1
    2088:	21 f0       	breq	.+8      	; 0x2092 <gotoXY+0x36>
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <gotoXY+0x3c>
	{
	case 0:
		Address=Y;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <gotoXY+0x3c>
		break;
	case 1:
		Address =Y+(0x40);
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	80 5c       	subi	r24, 0xC0	; 192
    2096:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	setbit(Address,7);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	80 68       	ori	r24, 0x80	; 128
    209c:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vWriteCommand(Address);
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_vWriteString>:

void LCD_vWriteString(u8 copy_u8Chararr[])
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	63 97       	sbiw	r28, 0x13	; 19
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	9b 8b       	std	Y+19, r25	; 0x13
    20ca:	8a 8b       	std	Y+18, r24	; 0x12
	u8 lenght;
	lenght=strlen(copy_u8Chararr);
    20cc:	8a 89       	ldd	r24, Y+18	; 0x12
    20ce:	9b 89       	ldd	r25, Y+19	; 0x13
    20d0:	0e 94 1d 1c 	call	0x383a	; 0x383a <strlen>
    20d4:	89 8b       	std	Y+17, r24	; 0x11

	for(int i=0 ; i<lenght ;i++)
    20d6:	18 8a       	std	Y+16, r1	; 0x10
    20d8:	1f 86       	std	Y+15, r1	; 0x0f
    20da:	81 c0       	rjmp	.+258    	; 0x21de <LCD_vWriteString+0x12a>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
    20dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    20de:	38 89       	ldd	r19, Y+16	; 0x10
    20e0:	8a 89       	ldd	r24, Y+18	; 0x12
    20e2:	9b 89       	ldd	r25, Y+19	; 0x13
    20e4:	fc 01       	movw	r30, r24
    20e6:	e2 0f       	add	r30, r18
    20e8:	f3 1f       	adc	r31, r19
    20ea:	80 81       	ld	r24, Z
    20ec:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_vWriteChar>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a8 e4       	ldi	r26, 0x48	; 72
    20f6:	b2 e4       	ldi	r27, 0x42	; 66
    20f8:	8b 87       	std	Y+11, r24	; 0x0b
    20fa:	9c 87       	std	Y+12, r25	; 0x0c
    20fc:	ad 87       	std	Y+13, r26	; 0x0d
    20fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	53 e4       	ldi	r21, 0x43	; 67
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8f 83       	std	Y+7, r24	; 0x07
    211a:	98 87       	std	Y+8, r25	; 0x08
    211c:	a9 87       	std	Y+9, r26	; 0x09
    211e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2120:	6f 81       	ldd	r22, Y+7	; 0x07
    2122:	78 85       	ldd	r23, Y+8	; 0x08
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	9a 85       	ldd	r25, Y+10	; 0x0a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <LCD_vWriteString+0x8e>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <LCD_vWriteString+0x10c>
	else if (__tmp > 65535)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <LCD_vWriteString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	6b 85       	ldd	r22, Y+11	; 0x0b
    215c:	7c 85       	ldd	r23, Y+12	; 0x0c
    215e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2160:	9e 85       	ldd	r25, Y+14	; 0x0e
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <LCD_vWriteString+0xee>
    2184:	89 e1       	ldi	r24, 0x19	; 25
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_vWriteString+0xdc>
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <LCD_vWriteString+0xd0>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <LCD_vWriteString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_vWriteString+0x118>
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
void LCD_vWriteString(u8 copy_u8Chararr[])
{
	u8 lenght;
	lenght=strlen(copy_u8Chararr);

	for(int i=0 ; i<lenght ;i++)
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
    21de:	89 89       	ldd	r24, Y+17	; 0x11
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e6:	98 89       	ldd	r25, Y+16	; 0x10
    21e8:	82 17       	cp	r24, r18
    21ea:	93 07       	cpc	r25, r19
    21ec:	0c f4       	brge	.+2      	; 0x21f0 <LCD_vWriteString+0x13c>
    21ee:	76 cf       	rjmp	.-276    	; 0x20dc <LCD_vWriteString+0x28>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
		_delay_ms(50);
	}
}
    21f0:	63 96       	adiw	r28, 0x13	; 19
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <initials_LCD>:
#include "DIO_interface.h"
#include "fun_pro.h"


void initials_LCD(void)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	LCD_vInitialize();
    220a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_vInitialize>

}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <initials_KeyPad>:

void initials_KeyPad(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPin(DIO_PORTD,4);
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTD,5);
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	65 e0       	ldi	r22, 0x05	; 5
    2228:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTD,6);
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	66 e0       	ldi	r22, 0x06	; 6
    2230:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTD,7);
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	67 e0       	ldi	r22, 0x07	; 7
    2238:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>

}
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <initials_7seg>:

void initials_7seg(void)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPin(DIO_PORTC,0);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,1);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,2);
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,3);
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	63 e0       	ldi	r22, 0x03	; 3
    2266:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,4);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	64 e0       	ldi	r22, 0x04	; 4
    226e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,5);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	65 e0       	ldi	r22, 0x05	; 5
    2276:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	DIO_vSetPin(DIO_PORTC,6);
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>


}
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <initials_led_motor_buzzer>:

void initials_led_motor_buzzer(void)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	DIO_vClearPin(DIO_PORTA,3);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	63 e0       	ldi	r22, 0x03	; 3
    2294:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTA,4);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	64 e0       	ldi	r22, 0x04	; 4
    229c:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTA,5);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	65 e0       	ldi	r22, 0x05	; 5
    22a4:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>

	DIO_vClearPin(DIO_PORTA,6);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	66 e0       	ldi	r22, 0x06	; 6
    22ac:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>

	DIO_vClearPin(DIO_PORTA,7);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	67 e0       	ldi	r22, 0x07	; 7
    22b4:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	DIO_vClearPin(DIO_PORTC,7);
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	67 e0       	ldi	r22, 0x07	; 7
    22bc:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>

}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <enter_pass>:

u8 enter_pass(u8 *arr_pass)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <enter_pass+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <enter_pass+0x8>
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
	u8 res;
	u8 count_arr = 0;
    22d6:	19 82       	std	Y+1, r1	; 0x01
	LCD_vWriteCommand(0b00000001);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
	while(1)
	{
		res=Keypad_u8ReadKey();
    22de:	0e 94 82 0c 	call	0x1904	; 0x1904 <Keypad_u8ReadKey>
    22e2:	8a 83       	std	Y+2, r24	; 0x02
				if(res!=100)
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	84 36       	cpi	r24, 0x64	; 100
    22e8:	d1 f3       	breq	.-12     	; 0x22de <enter_pass+0x18>
				{
					if(res<10){
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	8a 30       	cpi	r24, 0x0A	; 10
    22ee:	90 f4       	brcc	.+36     	; 0x2314 <enter_pass+0x4e>
					//LCD_vWriteCommand(0b00000001);
					arr_pass[count_arr]=res;
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	fc 01       	movw	r30, r24
    22fc:	e2 0f       	add	r30, r18
    22fe:	f3 1f       	adc	r31, r19
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	80 83       	st	Z, r24
					count_arr++;
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	8f 5f       	subi	r24, 0xFF	; 255
    2308:	89 83       	std	Y+1, r24	; 0x01
					LCD_vWriteChar(res+'0');
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	80 5d       	subi	r24, 0xD0	; 208
    230e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_vWriteChar>
    2312:	e5 cf       	rjmp	.-54     	; 0x22de <enter_pass+0x18>
					}
					else if(res=='#')
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	83 32       	cpi	r24, 0x23	; 35
    2318:	59 f4       	brne	.+22     	; 0x2330 <enter_pass+0x6a>
					{
						LCD_vWriteCommand(0b00000001);
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>

				}


	}
	return count_arr;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret
						LCD_vWriteCommand(0b00000001);
						break;
					}
					else{
						//LCD_vWriteCommand(0b00000001);
						arr_pass[count_arr]=res;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	80 83       	st	Z, r24
						count_arr++;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01

						LCD_vWriteChar(res);
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_vWriteChar>
    2350:	c6 cf       	rjmp	.-116    	; 0x22de <enter_pass+0x18>

00002352 <check>:
	}
	return count_arr;
}

u8 check(u8 * arr_realPass , u8 * arr_usePass , u8 Num_digit_realPass , u8 Num_digit_usePass)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	29 97       	sbiw	r28, 0x09	; 9
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
    236a:	7e 83       	std	Y+6, r23	; 0x06
    236c:	6d 83       	std	Y+5, r22	; 0x05
    236e:	4f 83       	std	Y+7, r20	; 0x07
    2370:	28 87       	std	Y+8, r18	; 0x08
	if(Num_digit_realPass != Num_digit_usePass)
    2372:	9f 81       	ldd	r25, Y+7	; 0x07
    2374:	88 85       	ldd	r24, Y+8	; 0x08
    2376:	98 17       	cp	r25, r24
    2378:	49 f0       	breq	.+18     	; 0x238c <check+0x3a>
	{
		LCD_vWriteCommand(0b00000001);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
		LCD_vWriteString("Error");
    2380:	80 e6       	ldi	r24, 0x60	; 96
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
		return 0;
    2388:	19 86       	std	Y+9, r1	; 0x09
    238a:	2d c0       	rjmp	.+90     	; 0x23e6 <check+0x94>

	}
	else
	{
		for(int i=0 ; i<Num_digit_realPass ; i++)
    238c:	1a 82       	std	Y+2, r1	; 0x02
    238e:	19 82       	std	Y+1, r1	; 0x01
    2390:	20 c0       	rjmp	.+64     	; 0x23d2 <check+0x80>
		{
			if(arr_realPass[i]!= arr_usePass[i])
    2392:	29 81       	ldd	r18, Y+1	; 0x01
    2394:	3a 81       	ldd	r19, Y+2	; 0x02
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	fc 01       	movw	r30, r24
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	40 81       	ld	r20, Z
    23a2:	29 81       	ldd	r18, Y+1	; 0x01
    23a4:	3a 81       	ldd	r19, Y+2	; 0x02
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	48 17       	cp	r20, r24
    23b4:	49 f0       	breq	.+18     	; 0x23c8 <check+0x76>
			{
				LCD_vWriteCommand(0b00000001);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
				LCD_vWriteString("Error");
    23bc:	80 e6       	ldi	r24, 0x60	; 96
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
				return 0;
    23c4:	19 86       	std	Y+9, r1	; 0x09
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <check+0x94>
		return 0;

	}
	else
	{
		for(int i=0 ; i<Num_digit_realPass ; i++)
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	8f 81       	ldd	r24, Y+7	; 0x07
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	82 17       	cp	r24, r18
    23de:	93 07       	cpc	r25, r19
    23e0:	c4 f2       	brlt	.-80     	; 0x2392 <check+0x40>
			else
			{

			}
		}
		return 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	89 87       	std	Y+9, r24	; 0x09
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
	}

}
    23e8:	29 96       	adiw	r28, 0x09	; 9
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <main>:
#include "fun_pro.h"

u8 Global_count=0;

void main(void)
{
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	c0 5b       	subi	r28, 0xB0	; 176
    2408:	d0 40       	sbci	r29, 0x00	; 0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDirec(DIO_PORTA,0,DIO_OUTPUT); //LCD_RS
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,1,DIO_OUTPUT); //LCD_RW
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,2,DIO_OUTPUT); //ENABLE_LCD
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,3,DIO_OUTPUT); //LED_RED
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	63 e0       	ldi	r22, 0x03	; 3
    2436:	41 e0       	ldi	r20, 0x01	; 1
    2438:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,4,DIO_OUTPUT); //LED_YELLOW
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	64 e0       	ldi	r22, 0x04	; 4
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,5,DIO_OUTPUT); //LED_GREEN
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,6,DIO_OUTPUT); //BUZZER
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	66 e0       	ldi	r22, 0x06	; 6
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,7,DIO_OUTPUT); //MOTOR
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	67 e0       	ldi	r22, 0x07	; 7
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>

	DIO_vSetPinDirec(DIO_PORTB,0,DIO_OUTPUT); //LCD_D0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,1,DIO_OUTPUT); //LCD_D1
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,2,DIO_OUTPUT); //LCD_D2
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,3,DIO_OUTPUT); //LCD_D3
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,4,DIO_OUTPUT); //LCD_D4
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	64 e0       	ldi	r22, 0x04	; 4
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,5,DIO_OUTPUT); //LCD_D5
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	65 e0       	ldi	r22, 0x05	; 5
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,6,DIO_OUTPUT); //LCD_D6
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	66 e0       	ldi	r22, 0x06	; 6
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,7,DIO_OUTPUT); //LCD_D7
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	67 e0       	ldi	r22, 0x07	; 7
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>

	DIO_vSetPinDirec(DIO_PORTC,0,DIO_OUTPUT); //7seg_L0
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,1,DIO_OUTPUT); //7seg_L1
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,2,DIO_OUTPUT); //7seg_L2
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	62 e0       	ldi	r22, 0x02	; 2
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,3,DIO_OUTPUT); //7seg_L3
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	63 e0       	ldi	r22, 0x03	; 3
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,4,DIO_OUTPUT); //7seg_L4
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	64 e0       	ldi	r22, 0x04	; 4
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,5,DIO_OUTPUT); //7seg_L5
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	65 e0       	ldi	r22, 0x05	; 5
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,6,DIO_OUTPUT); //7seg_L6
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	66 e0       	ldi	r22, 0x06	; 6
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTC,7,DIO_OUTPUT); //motor
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	67 e0       	ldi	r22, 0x07	; 7
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>

	DIO_vSetPinDirec(DIO_PORTD,0,DIO_OUTPUT); //KeyPad_Colum0
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,1,DIO_OUTPUT); //KeyPad_Colum1
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,2,DIO_OUTPUT); //KeyPad_Colum2
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,3,DIO_OUTPUT); //KeyPad_Colum3
    2522:	83 e0       	ldi	r24, 0x03	; 3
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,4,DIO_INPUT); //KeyPad_Row0
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	64 e0       	ldi	r22, 0x04	; 4
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,5,DIO_INPUT); //KeyPad_Row1
    2536:	83 e0       	ldi	r24, 0x03	; 3
    2538:	65 e0       	ldi	r22, 0x05	; 5
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,6,DIO_INPUT); //KeyPad_Row2
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	66 e0       	ldi	r22, 0x06	; 6
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,7,DIO_INPUT); //KeyPad_Row3
    254a:	83 e0       	ldi	r24, 0x03	; 3
    254c:	67 e0       	ldi	r22, 0x07	; 7
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
/////////////////////////////////////////////////////////////////////////////////////

	initials_LCD();
    2554:	0e 94 01 11 	call	0x2202	; 0x2202 <initials_LCD>
	initials_KeyPad();
    2558:	0e 94 0a 11 	call	0x2214	; 0x2214 <initials_KeyPad>
	initials_7seg();
    255c:	0e 94 21 11 	call	0x2242	; 0x2242 <initials_7seg>
	initials_led_motor_buzzer();
    2560:	0e 94 44 11 	call	0x2288	; 0x2288 <initials_led_motor_buzzer>
	u8 count=0;
    2564:	fe 01       	movw	r30, r28
    2566:	e4 56       	subi	r30, 0x64	; 100
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	10 82       	st	Z, r1
	u8 Res_check;

	u8 arr_password[10];
	u8 arr_real_pass[5]={1,2,3,4,5};
    256c:	ce 01       	movw	r24, r28
    256e:	89 55       	subi	r24, 0x59	; 89
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	c4 55       	subi	r28, 0x54	; 84
    2574:	df 4f       	sbci	r29, 0xFF	; 255
    2576:	99 83       	std	Y+1, r25	; 0x01
    2578:	88 83       	st	Y, r24
    257a:	cc 5a       	subi	r28, 0xAC	; 172
    257c:	d0 40       	sbci	r29, 0x00	; 0
    257e:	89 e9       	ldi	r24, 0x99	; 153
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	c2 55       	subi	r28, 0x52	; 82
    2584:	df 4f       	sbci	r29, 0xFF	; 255
    2586:	99 83       	std	Y+1, r25	; 0x01
    2588:	88 83       	st	Y, r24
    258a:	ce 5a       	subi	r28, 0xAE	; 174
    258c:	d0 40       	sbci	r29, 0x00	; 0
    258e:	95 e0       	ldi	r25, 0x05	; 5
    2590:	c0 55       	subi	r28, 0x50	; 80
    2592:	df 4f       	sbci	r29, 0xFF	; 255
    2594:	98 83       	st	Y, r25
    2596:	c0 5b       	subi	r28, 0xB0	; 176
    2598:	d0 40       	sbci	r29, 0x00	; 0
    259a:	c2 55       	subi	r28, 0x52	; 82
    259c:	df 4f       	sbci	r29, 0xFF	; 255
    259e:	e8 81       	ld	r30, Y
    25a0:	f9 81       	ldd	r31, Y+1	; 0x01
    25a2:	ce 5a       	subi	r28, 0xAE	; 174
    25a4:	d0 40       	sbci	r29, 0x00	; 0
    25a6:	00 80       	ld	r0, Z
    25a8:	c2 55       	subi	r28, 0x52	; 82
    25aa:	df 4f       	sbci	r29, 0xFF	; 255
    25ac:	88 81       	ld	r24, Y
    25ae:	99 81       	ldd	r25, Y+1	; 0x01
    25b0:	ce 5a       	subi	r28, 0xAE	; 174
    25b2:	d0 40       	sbci	r29, 0x00	; 0
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	c2 55       	subi	r28, 0x52	; 82
    25b8:	df 4f       	sbci	r29, 0xFF	; 255
    25ba:	99 83       	std	Y+1, r25	; 0x01
    25bc:	88 83       	st	Y, r24
    25be:	ce 5a       	subi	r28, 0xAE	; 174
    25c0:	d0 40       	sbci	r29, 0x00	; 0
    25c2:	c4 55       	subi	r28, 0x54	; 84
    25c4:	df 4f       	sbci	r29, 0xFF	; 255
    25c6:	e8 81       	ld	r30, Y
    25c8:	f9 81       	ldd	r31, Y+1	; 0x01
    25ca:	cc 5a       	subi	r28, 0xAC	; 172
    25cc:	d0 40       	sbci	r29, 0x00	; 0
    25ce:	00 82       	st	Z, r0
    25d0:	c4 55       	subi	r28, 0x54	; 84
    25d2:	df 4f       	sbci	r29, 0xFF	; 255
    25d4:	88 81       	ld	r24, Y
    25d6:	99 81       	ldd	r25, Y+1	; 0x01
    25d8:	cc 5a       	subi	r28, 0xAC	; 172
    25da:	d0 40       	sbci	r29, 0x00	; 0
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	c4 55       	subi	r28, 0x54	; 84
    25e0:	df 4f       	sbci	r29, 0xFF	; 255
    25e2:	99 83       	std	Y+1, r25	; 0x01
    25e4:	88 83       	st	Y, r24
    25e6:	cc 5a       	subi	r28, 0xAC	; 172
    25e8:	d0 40       	sbci	r29, 0x00	; 0
    25ea:	c0 55       	subi	r28, 0x50	; 80
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	98 81       	ld	r25, Y
    25f0:	c0 5b       	subi	r28, 0xB0	; 176
    25f2:	d0 40       	sbci	r29, 0x00	; 0
    25f4:	91 50       	subi	r25, 0x01	; 1
    25f6:	c0 55       	subi	r28, 0x50	; 80
    25f8:	df 4f       	sbci	r29, 0xFF	; 255
    25fa:	98 83       	st	Y, r25
    25fc:	c0 5b       	subi	r28, 0xB0	; 176
    25fe:	d0 40       	sbci	r29, 0x00	; 0
    2600:	c0 55       	subi	r28, 0x50	; 80
    2602:	df 4f       	sbci	r29, 0xFF	; 255
    2604:	e8 81       	ld	r30, Y
    2606:	c0 5b       	subi	r28, 0xB0	; 176
    2608:	d0 40       	sbci	r29, 0x00	; 0
    260a:	ee 23       	and	r30, r30
    260c:	31 f6       	brne	.-116    	; 0x259a <main+0x1a0>


	for(Global_count=3 ; Global_count>-1 ; Global_count--)
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	80 93 9e 00 	sts	0x009E, r24
	{
		seven_seg_NumOutput(DIO_PORTC,Global_count);
    2614:	90 91 9e 00 	lds	r25, 0x009E
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	69 2f       	mov	r22, r25
    261c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <seven_seg_NumOutput>
		if(Global_count==3)
    2620:	80 91 9e 00 	lds	r24, 0x009E
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	09 f0       	breq	.+2      	; 0x262a <main+0x230>
    2628:	5d c2       	rjmp	.+1210   	; 0x2ae4 <main+0x6ea>
		{
			count=enter_pass(arr_password);
    262a:	ce 01       	movw	r24, r28
    262c:	83 56       	subi	r24, 0x63	; 99
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	0e 94 63 11 	call	0x22c6	; 0x22c6 <enter_pass>
    2634:	fe 01       	movw	r30, r28
    2636:	e4 56       	subi	r30, 0x64	; 100
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 83       	st	Z, r24
			Res_check=check(arr_real_pass,arr_password,5,count);
    263c:	ce 01       	movw	r24, r28
    263e:	89 55       	subi	r24, 0x59	; 89
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	9e 01       	movw	r18, r28
    2644:	23 56       	subi	r18, 0x63	; 99
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	fe 01       	movw	r30, r28
    264a:	e4 56       	subi	r30, 0x64	; 100
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	b9 01       	movw	r22, r18
    2650:	45 e0       	ldi	r20, 0x05	; 5
    2652:	20 81       	ld	r18, Z
    2654:	0e 94 a9 11 	call	0x2352	; 0x2352 <check>
    2658:	fe 01       	movw	r30, r28
    265a:	e5 56       	subi	r30, 0x65	; 101
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 83       	st	Z, r24
			if(Res_check==0)
    2660:	fe 01       	movw	r30, r28
    2662:	e5 56       	subi	r30, 0x65	; 101
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	88 23       	and	r24, r24
    266a:	09 f0       	breq	.+2      	; 0x266e <main+0x274>
    266c:	77 c1       	rjmp	.+750    	; 0x295c <main+0x562>
    266e:	fe 01       	movw	r30, r28
    2670:	e9 56       	subi	r30, 0x69	; 105
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	aa e7       	ldi	r26, 0x7A	; 122
    267a:	b4 e4       	ldi	r27, 0x44	; 68
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	8e 01       	movw	r16, r28
    2686:	0d 56       	subi	r16, 0x6D	; 109
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	e9 56       	subi	r30, 0x69	; 105
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b2:	fe 01       	movw	r30, r28
    26b4:	ed 56       	subi	r30, 0x6D	; 109
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	44 f4       	brge	.+16     	; 0x26e0 <main+0x2e6>
		__ticks = 1;
    26d0:	fe 01       	movw	r30, r28
    26d2:	ef 56       	subi	r30, 0x6F	; 111
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	64 c0       	rjmp	.+200    	; 0x27a8 <main+0x3ae>
	else if (__tmp > 65535)
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 56       	subi	r30, 0x6D	; 109
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	0c f0       	brlt	.+2      	; 0x2700 <main+0x306>
    26fe:	43 c0       	rjmp	.+134    	; 0x2786 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	fe 01       	movw	r30, r28
    2702:	e9 56       	subi	r30, 0x69	; 105
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8e 01       	movw	r16, r28
    2720:	0f 56       	subi	r16, 0x6F	; 111
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	f8 01       	movw	r30, r16
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	1f c0       	rjmp	.+62     	; 0x2776 <main+0x37c>
    2738:	fe 01       	movw	r30, r28
    273a:	e1 57       	subi	r30, 0x71	; 113
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	89 e1       	ldi	r24, 0x19	; 25
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
    2746:	fe 01       	movw	r30, r28
    2748:	e1 57       	subi	r30, 0x71	; 113
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0x356>
    2754:	fe 01       	movw	r30, r28
    2756:	e1 57       	subi	r30, 0x71	; 113
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	de 01       	movw	r26, r28
    2760:	af 56       	subi	r26, 0x6F	; 111
    2762:	bf 4f       	sbci	r27, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	ef 56       	subi	r30, 0x6F	; 111
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	9c 93       	st	X, r25
    2774:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	fe 01       	movw	r30, r28
    2778:	ef 56       	subi	r30, 0x6F	; 111
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	d1 f6       	brne	.-76     	; 0x2738 <main+0x33e>
    2784:	27 c0       	rjmp	.+78     	; 0x27d4 <main+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	8e 01       	movw	r16, r28
    2788:	0f 56       	subi	r16, 0x6F	; 111
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ed 56       	subi	r30, 0x6D	; 109
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	f8 01       	movw	r30, r16
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
    27a8:	de 01       	movw	r26, r28
    27aa:	a3 57       	subi	r26, 0x73	; 115
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	ef 56       	subi	r30, 0x6F	; 111
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	8d 93       	st	X+, r24
    27ba:	9c 93       	st	X, r25
    27bc:	fe 01       	movw	r30, r28
    27be:	e3 57       	subi	r30, 0x73	; 115
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <main+0x3cc>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e3 57       	subi	r30, 0x73	; 115
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
			{
				_delay_ms(1000);
				LCD_vWriteCommand(0b00000001);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
				LCD_vWriteString("Enter Password");
    27da:	86 e6       	ldi	r24, 0x66	; 102
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
				gotoXY(1,0);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	0e 94 2e 10 	call	0x205c	; 0x205c <gotoXY>
				LCD_vWriteString("Again");
    27ea:	85 e7       	ldi	r24, 0x75	; 117
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 57       	subi	r30, 0x77	; 119
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	aa ef       	ldi	r26, 0xFA	; 250
    27fe:	b3 e4       	ldi	r27, 0x43	; 67
    2800:	80 83       	st	Z, r24
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	a2 83       	std	Z+2, r26	; 0x02
    2806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	8e 01       	movw	r16, r28
    280a:	0b 57       	subi	r16, 0x7B	; 123
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	e7 57       	subi	r30, 0x77	; 119
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a e7       	ldi	r20, 0x7A	; 122
    2822:	53 e4       	ldi	r21, 0x43	; 67
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	f8 01       	movw	r30, r16
    282e:	80 83       	st	Z, r24
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	a2 83       	std	Z+2, r26	; 0x02
    2834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2836:	fe 01       	movw	r30, r28
    2838:	eb 57       	subi	r30, 0x7B	; 123
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	44 f4       	brge	.+16     	; 0x2864 <main+0x46a>
		__ticks = 1;
    2854:	fe 01       	movw	r30, r28
    2856:	ed 57       	subi	r30, 0x7D	; 125
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
    2862:	64 c0       	rjmp	.+200    	; 0x292c <main+0x532>
	else if (__tmp > 65535)
    2864:	fe 01       	movw	r30, r28
    2866:	eb 57       	subi	r30, 0x7B	; 123
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	0c f0       	brlt	.+2      	; 0x2884 <main+0x48a>
    2882:	43 c0       	rjmp	.+134    	; 0x290a <main+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	fe 01       	movw	r30, r28
    2886:	e7 57       	subi	r30, 0x77	; 119
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	8e 01       	movw	r16, r28
    28a4:	0d 57       	subi	r16, 0x7D	; 125
    28a6:	1f 4f       	sbci	r17, 0xFF	; 255
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	f8 01       	movw	r30, r16
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	1f c0       	rjmp	.+62     	; 0x28fa <main+0x500>
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 57       	subi	r30, 0x7F	; 127
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	89 e1       	ldi	r24, 0x19	; 25
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	fe 01       	movw	r30, r28
    28cc:	ef 57       	subi	r30, 0x7F	; 127
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <main+0x4da>
    28d8:	fe 01       	movw	r30, r28
    28da:	ef 57       	subi	r30, 0x7F	; 127
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	de 01       	movw	r26, r28
    28e4:	ad 57       	subi	r26, 0x7D	; 125
    28e6:	bf 4f       	sbci	r27, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 57       	subi	r30, 0x7D	; 125
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	11 96       	adiw	r26, 0x01	; 1
    28f6:	9c 93       	st	X, r25
    28f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	fe 01       	movw	r30, r28
    28fc:	ed 57       	subi	r30, 0x7D	; 125
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	d1 f6       	brne	.-76     	; 0x28bc <main+0x4c2>
    2908:	29 c6       	rjmp	.+3154   	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	8e 01       	movw	r16, r28
    290c:	0d 57       	subi	r16, 0x7D	; 125
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	fe 01       	movw	r30, r28
    2912:	eb 57       	subi	r30, 0x7B	; 123
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
    292c:	de 01       	movw	r26, r28
    292e:	a1 58       	subi	r26, 0x81	; 129
    2930:	bf 4f       	sbci	r27, 0xFF	; 255
    2932:	fe 01       	movw	r30, r28
    2934:	ed 57       	subi	r30, 0x7D	; 125
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	11 96       	adiw	r26, 0x01	; 1
    293e:	9c 93       	st	X, r25
    2940:	8e 93       	st	-X, r24
    2942:	fe 01       	movw	r30, r28
    2944:	e1 58       	subi	r30, 0x81	; 129
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <main+0x552>
    2950:	fe 01       	movw	r30, r28
    2952:	e1 58       	subi	r30, 0x81	; 129
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	00 c6       	rjmp	.+3072   	; 0x355c <main+0x1162>
				_delay_ms(500);
			}
			else if(Res_check==1)
    295c:	fe 01       	movw	r30, r28
    295e:	e5 56       	subi	r30, 0x65	; 101
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	09 f0       	breq	.+2      	; 0x296a <main+0x570>
    2968:	f9 c5       	rjmp	.+3058   	; 0x355c <main+0x1162>
			{
				DIO_vSetPin(DIO_PORTA,5); //Green LED
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	65 e0       	ldi	r22, 0x05	; 5
    296e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
				DIO_vSetPin(DIO_PORTA,7); //Motor
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	67 e0       	ldi	r22, 0x07	; 7
    2976:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    297a:	fe 01       	movw	r30, r28
    297c:	e5 58       	subi	r30, 0x85	; 133
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	aa e7       	ldi	r26, 0x7A	; 122
    2986:	b4 e4       	ldi	r27, 0x44	; 68
    2988:	80 83       	st	Z, r24
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	a2 83       	std	Z+2, r26	; 0x02
    298e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	8e 01       	movw	r16, r28
    2992:	09 58       	subi	r16, 0x89	; 137
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	e5 58       	subi	r30, 0x85	; 133
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a e7       	ldi	r20, 0x7A	; 122
    29aa:	53 e4       	ldi	r21, 0x43	; 67
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	80 83       	st	Z, r24
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	a2 83       	std	Z+2, r26	; 0x02
    29bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29be:	fe 01       	movw	r30, r28
    29c0:	e9 58       	subi	r30, 0x89	; 137
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	44 f4       	brge	.+16     	; 0x29ec <main+0x5f2>
		__ticks = 1;
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 58       	subi	r30, 0x8B	; 139
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	64 c0       	rjmp	.+200    	; 0x2ab4 <main+0x6ba>
	else if (__tmp > 65535)
    29ec:	fe 01       	movw	r30, r28
    29ee:	e9 58       	subi	r30, 0x89	; 137
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	0c f0       	brlt	.+2      	; 0x2a0c <main+0x612>
    2a0a:	43 c0       	rjmp	.+134    	; 0x2a92 <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e5 58       	subi	r30, 0x85	; 133
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	0b 58       	subi	r16, 0x8B	; 139
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	1f c0       	rjmp	.+62     	; 0x2a82 <main+0x688>
    2a44:	fe 01       	movw	r30, r28
    2a46:	ed 58       	subi	r30, 0x8D	; 141
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	89 e1       	ldi	r24, 0x19	; 25
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 58       	subi	r30, 0x8D	; 141
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <main+0x662>
    2a60:	fe 01       	movw	r30, r28
    2a62:	ed 58       	subi	r30, 0x8D	; 141
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	de 01       	movw	r26, r28
    2a6c:	ab 58       	subi	r26, 0x8B	; 139
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	eb 58       	subi	r30, 0x8B	; 139
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	11 96       	adiw	r26, 0x01	; 1
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	fe 01       	movw	r30, r28
    2a84:	eb 58       	subi	r30, 0x8B	; 139
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	d1 f6       	brne	.-76     	; 0x2a44 <main+0x64a>
    2a90:	65 c5       	rjmp	.+2762   	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	8e 01       	movw	r16, r28
    2a94:	0b 58       	subi	r16, 0x8B	; 139
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e9 58       	subi	r30, 0x89	; 137
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	f8 01       	movw	r30, r16
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	de 01       	movw	r26, r28
    2ab6:	af 58       	subi	r26, 0x8F	; 143
    2ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	eb 58       	subi	r30, 0x8B	; 139
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	11 96       	adiw	r26, 0x01	; 1
    2ac6:	9c 93       	st	X, r25
    2ac8:	8e 93       	st	-X, r24
    2aca:	fe 01       	movw	r30, r28
    2acc:	ef 58       	subi	r30, 0x8F	; 143
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <main+0x6da>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ef 58       	subi	r30, 0x8F	; 143
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	3c c5       	rjmp	.+2680   	; 0x355c <main+0x1162>
				_delay_ms(1000);
			}
		}
		else if(Global_count==2)
    2ae4:	80 91 9e 00 	lds	r24, 0x009E
    2ae8:	82 30       	cpi	r24, 0x02	; 2
    2aea:	09 f0       	breq	.+2      	; 0x2aee <main+0x6f4>
    2aec:	5d c2       	rjmp	.+1210   	; 0x2fa8 <main+0xbae>
		{
			count=enter_pass(arr_password);
    2aee:	ce 01       	movw	r24, r28
    2af0:	83 56       	subi	r24, 0x63	; 99
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <enter_pass>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e4 56       	subi	r30, 0x64	; 100
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 83       	st	Z, r24
			Res_check=check(arr_real_pass,arr_password,5,count);
    2b00:	ce 01       	movw	r24, r28
    2b02:	89 55       	subi	r24, 0x59	; 89
    2b04:	9f 4f       	sbci	r25, 0xFF	; 255
    2b06:	9e 01       	movw	r18, r28
    2b08:	23 56       	subi	r18, 0x63	; 99
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e4 56       	subi	r30, 0x64	; 100
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	b9 01       	movw	r22, r18
    2b14:	45 e0       	ldi	r20, 0x05	; 5
    2b16:	20 81       	ld	r18, Z
    2b18:	0e 94 a9 11 	call	0x2352	; 0x2352 <check>
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e5 56       	subi	r30, 0x65	; 101
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 83       	st	Z, r24
			if(Res_check==0)
    2b24:	fe 01       	movw	r30, r28
    2b26:	e5 56       	subi	r30, 0x65	; 101
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <main+0x738>
    2b30:	77 c1       	rjmp	.+750    	; 0x2e20 <main+0xa26>
    2b32:	fe 01       	movw	r30, r28
    2b34:	e3 59       	subi	r30, 0x93	; 147
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	aa e7       	ldi	r26, 0x7A	; 122
    2b3e:	b4 e4       	ldi	r27, 0x44	; 68
    2b40:	80 83       	st	Z, r24
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	a2 83       	std	Z+2, r26	; 0x02
    2b46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b48:	8e 01       	movw	r16, r28
    2b4a:	07 59       	subi	r16, 0x97	; 151
    2b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e3 59       	subi	r30, 0x93	; 147
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	53 e4       	ldi	r21, 0x43	; 67
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	80 83       	st	Z, r24
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	a2 83       	std	Z+2, r26	; 0x02
    2b74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 59       	subi	r30, 0x97	; 151
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	44 f4       	brge	.+16     	; 0x2ba4 <main+0x7aa>
		__ticks = 1;
    2b94:	fe 01       	movw	r30, r28
    2b96:	e9 59       	subi	r30, 0x99	; 153
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	64 c0       	rjmp	.+200    	; 0x2c6c <main+0x872>
	else if (__tmp > 65535)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e7 59       	subi	r30, 0x97	; 151
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <main+0x7ca>
    2bc2:	43 c0       	rjmp	.+134    	; 0x2c4a <main+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e3 59       	subi	r30, 0x93	; 147
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8e 01       	movw	r16, r28
    2be4:	09 59       	subi	r16, 0x99	; 153
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	1f c0       	rjmp	.+62     	; 0x2c3a <main+0x840>
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	eb 59       	subi	r30, 0x9B	; 155
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	89 e1       	ldi	r24, 0x19	; 25
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	eb 59       	subi	r30, 0x9B	; 155
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <main+0x81a>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 59       	subi	r30, 0x9B	; 155
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	de 01       	movw	r26, r28
    2c24:	a9 59       	subi	r26, 0x99	; 153
    2c26:	bf 4f       	sbci	r27, 0xFF	; 255
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e9 59       	subi	r30, 0x99	; 153
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	9c 93       	st	X, r25
    2c38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e9 59       	subi	r30, 0x99	; 153
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	d1 f6       	brne	.-76     	; 0x2bfc <main+0x802>
    2c48:	27 c0       	rjmp	.+78     	; 0x2c98 <main+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	8e 01       	movw	r16, r28
    2c4c:	09 59       	subi	r16, 0x99	; 153
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	fe 01       	movw	r30, r28
    2c52:	e7 59       	subi	r30, 0x97	; 151
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	de 01       	movw	r26, r28
    2c6e:	ad 59       	subi	r26, 0x9D	; 157
    2c70:	bf 4f       	sbci	r27, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e9 59       	subi	r30, 0x99	; 153
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	80 81       	ld	r24, Z
    2c7a:	91 81       	ldd	r25, Z+1	; 0x01
    2c7c:	8d 93       	st	X+, r24
    2c7e:	9c 93       	st	X, r25
    2c80:	fe 01       	movw	r30, r28
    2c82:	ed 59       	subi	r30, 0x9D	; 157
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <main+0x890>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ed 59       	subi	r30, 0x9D	; 157
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
			{
				_delay_ms(1000);
				LCD_vWriteCommand(0b00000001);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
				LCD_vWriteString("Enter Password");
    2c9e:	86 e6       	ldi	r24, 0x66	; 102
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
				gotoXY(1,0);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	0e 94 2e 10 	call	0x205c	; 0x205c <gotoXY>
				LCD_vWriteString("Again");
    2cae:	85 e7       	ldi	r24, 0x75	; 117
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e1 5a       	subi	r30, 0xA1	; 161
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	aa ef       	ldi	r26, 0xFA	; 250
    2cc2:	b3 e4       	ldi	r27, 0x43	; 67
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	05 5a       	subi	r16, 0xA5	; 165
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e1 5a       	subi	r30, 0xA1	; 161
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a e7       	ldi	r20, 0x7A	; 122
    2ce6:	53 e4       	ldi	r21, 0x43	; 67
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e5 5a       	subi	r30, 0xA5	; 165
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	44 f4       	brge	.+16     	; 0x2d28 <main+0x92e>
		__ticks = 1;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 5a       	subi	r30, 0xA7	; 167
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	64 c0       	rjmp	.+200    	; 0x2df0 <main+0x9f6>
	else if (__tmp > 65535)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e5 5a       	subi	r30, 0xA5	; 165
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <main+0x94e>
    2d46:	43 c0       	rjmp	.+134    	; 0x2dce <main+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e1 5a       	subi	r30, 0xA1	; 161
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8e 01       	movw	r16, r28
    2d68:	07 5a       	subi	r16, 0xA7	; 167
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	1f c0       	rjmp	.+62     	; 0x2dbe <main+0x9c4>
    2d80:	fe 01       	movw	r30, r28
    2d82:	e9 5a       	subi	r30, 0xA9	; 169
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	89 e1       	ldi	r24, 0x19	; 25
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e9 5a       	subi	r30, 0xA9	; 169
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <main+0x99e>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e9 5a       	subi	r30, 0xA9	; 169
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	de 01       	movw	r26, r28
    2da8:	a7 5a       	subi	r26, 0xA7	; 167
    2daa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e7 5a       	subi	r30, 0xA7	; 167
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	9c 93       	st	X, r25
    2dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e7 5a       	subi	r30, 0xA7	; 167
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	d1 f6       	brne	.-76     	; 0x2d80 <main+0x986>
    2dcc:	c7 c3       	rjmp	.+1934   	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	07 5a       	subi	r16, 0xA7	; 167
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 5a       	subi	r30, 0xA5	; 165
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	de 01       	movw	r26, r28
    2df2:	ab 5a       	subi	r26, 0xAB	; 171
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e7 5a       	subi	r30, 0xA7	; 167
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	11 96       	adiw	r26, 0x01	; 1
    2e02:	9c 93       	st	X, r25
    2e04:	8e 93       	st	-X, r24
    2e06:	fe 01       	movw	r30, r28
    2e08:	eb 5a       	subi	r30, 0xAB	; 171
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	f1 f7       	brne	.-4      	; 0x2e10 <main+0xa16>
    2e14:	fe 01       	movw	r30, r28
    2e16:	eb 5a       	subi	r30, 0xAB	; 171
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	80 83       	st	Z, r24
    2e1e:	9e c3       	rjmp	.+1852   	; 0x355c <main+0x1162>
				_delay_ms(500);
			}
			else if(Res_check==1)
    2e20:	fe 01       	movw	r30, r28
    2e22:	e5 56       	subi	r30, 0x65	; 101
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <main+0xa34>
    2e2c:	97 c3       	rjmp	.+1838   	; 0x355c <main+0x1162>
			{
				DIO_vSetPin(DIO_PORTA,5); //Green LED
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	65 e0       	ldi	r22, 0x05	; 5
    2e32:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
				DIO_vSetPin(DIO_PORTA,7); //Motor
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	67 e0       	ldi	r22, 0x07	; 7
    2e3a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ef 5a       	subi	r30, 0xAF	; 175
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	aa e7       	ldi	r26, 0x7A	; 122
    2e4a:	b4 e4       	ldi	r27, 0x44	; 68
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	8e 01       	movw	r16, r28
    2e56:	03 5b       	subi	r16, 0xB3	; 179
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 5a       	subi	r30, 0xAF	; 175
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a e7       	ldi	r20, 0x7A	; 122
    2e6e:	53 e4       	ldi	r21, 0x43	; 67
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e82:	fe 01       	movw	r30, r28
    2e84:	e3 5b       	subi	r30, 0xB3	; 179
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	44 f4       	brge	.+16     	; 0x2eb0 <main+0xab6>
		__ticks = 1;
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e5 5b       	subi	r30, 0xB5	; 181
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	64 c0       	rjmp	.+200    	; 0x2f78 <main+0xb7e>
	else if (__tmp > 65535)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e3 5b       	subi	r30, 0xB3	; 179
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	0c f0       	brlt	.+2      	; 0x2ed0 <main+0xad6>
    2ece:	43 c0       	rjmp	.+134    	; 0x2f56 <main+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ef 5a       	subi	r30, 0xAF	; 175
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8e 01       	movw	r16, r28
    2ef0:	05 5b       	subi	r16, 0xB5	; 181
    2ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	f8 01       	movw	r30, r16
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	1f c0       	rjmp	.+62     	; 0x2f46 <main+0xb4c>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e7 5b       	subi	r30, 0xB7	; 183
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	89 e1       	ldi	r24, 0x19	; 25
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	fe 01       	movw	r30, r28
    2f18:	e7 5b       	subi	r30, 0xB7	; 183
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0xb26>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	de 01       	movw	r26, r28
    2f30:	a5 5b       	subi	r26, 0xB5	; 181
    2f32:	bf 4f       	sbci	r27, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e5 5b       	subi	r30, 0xB5	; 181
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 93       	st	X, r25
    2f44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	fe 01       	movw	r30, r28
    2f48:	e5 5b       	subi	r30, 0xB5	; 181
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	d1 f6       	brne	.-76     	; 0x2f08 <main+0xb0e>
    2f54:	03 c3       	rjmp	.+1542   	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	8e 01       	movw	r16, r28
    2f58:	05 5b       	subi	r16, 0xB5	; 181
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e3 5b       	subi	r30, 0xB3	; 179
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	de 01       	movw	r26, r28
    2f7a:	a9 5b       	subi	r26, 0xB9	; 185
    2f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e5 5b       	subi	r30, 0xB5	; 181
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	9c 93       	st	X, r25
    2f8c:	8e 93       	st	-X, r24
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e9 5b       	subi	r30, 0xB9	; 185
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <main+0xb9e>
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e9 5b       	subi	r30, 0xB9	; 185
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
    2fa6:	da c2       	rjmp	.+1460   	; 0x355c <main+0x1162>
				_delay_ms(1000);
			}
		}
		else if(Global_count==1)
    2fa8:	80 91 9e 00 	lds	r24, 0x009E
    2fac:	81 30       	cpi	r24, 0x01	; 1
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <main+0xbb8>
    2fb0:	ab c1       	rjmp	.+854    	; 0x3308 <main+0xf0e>
		{
			count=enter_pass(arr_password);
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	83 56       	subi	r24, 0x63	; 99
    2fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <enter_pass>
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e4 56       	subi	r30, 0x64	; 100
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 83       	st	Z, r24
						Res_check=check(arr_real_pass,arr_password,5,count);
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	89 55       	subi	r24, 0x59	; 89
    2fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fca:	9e 01       	movw	r18, r28
    2fcc:	23 56       	subi	r18, 0x63	; 99
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e4 56       	subi	r30, 0x64	; 100
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	b9 01       	movw	r22, r18
    2fd8:	45 e0       	ldi	r20, 0x05	; 5
    2fda:	20 81       	ld	r18, Z
    2fdc:	0e 94 a9 11 	call	0x2352	; 0x2352 <check>
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 56       	subi	r30, 0x65	; 101
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 83       	st	Z, r24
						if(Res_check==0)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 56       	subi	r30, 0x65	; 101
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <main+0xbfc>
    2ff4:	07 c1       	rjmp	.+526    	; 0x3204 <main+0xe0a>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ed 5b       	subi	r30, 0xBD	; 189
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	aa e7       	ldi	r26, 0x7A	; 122
    3002:	b4 e4       	ldi	r27, 0x44	; 68
    3004:	80 83       	st	Z, r24
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	a2 83       	std	Z+2, r26	; 0x02
    300a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	8e 01       	movw	r16, r28
    300e:	01 5c       	subi	r16, 0xC1	; 193
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	fe 01       	movw	r30, r28
    3014:	ed 5b       	subi	r30, 0xBD	; 189
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	4a e7       	ldi	r20, 0x7A	; 122
    3026:	53 e4       	ldi	r21, 0x43	; 67
    3028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	f8 01       	movw	r30, r16
    3032:	80 83       	st	Z, r24
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	a2 83       	std	Z+2, r26	; 0x02
    3038:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    303a:	fe 01       	movw	r30, r28
    303c:	ff 96       	adiw	r30, 0x3f	; 63
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <main+0xc66>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9e af       	std	Y+62, r25	; 0x3e
    305c:	8d af       	std	Y+61, r24	; 0x3d
    305e:	46 c0       	rjmp	.+140    	; 0x30ec <main+0xcf2>
	else if (__tmp > 65535)
    3060:	fe 01       	movw	r30, r28
    3062:	ff 96       	adiw	r30, 0x3f	; 63
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	3f ef       	ldi	r19, 0xFF	; 255
    3070:	4f e7       	ldi	r20, 0x7F	; 127
    3072:	57 e4       	ldi	r21, 0x47	; 71
    3074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3078:	18 16       	cp	r1, r24
    307a:	64 f5       	brge	.+88     	; 0x30d4 <main+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307c:	fe 01       	movw	r30, r28
    307e:	ed 5b       	subi	r30, 0xBD	; 189
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	9e af       	std	Y+62, r25	; 0x3e
    30a8:	8d af       	std	Y+61, r24	; 0x3d
    30aa:	0f c0       	rjmp	.+30     	; 0x30ca <main+0xcd0>
    30ac:	89 e1       	ldi	r24, 0x19	; 25
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c af       	std	Y+60, r25	; 0x3c
    30b2:	8b af       	std	Y+59, r24	; 0x3b
    30b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    30b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <main+0xcbe>
    30bc:	9c af       	std	Y+60, r25	; 0x3c
    30be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    30c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9e af       	std	Y+62, r25	; 0x3e
    30c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    30cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	69 f7       	brne	.-38     	; 0x30ac <main+0xcb2>
    30d2:	16 c0       	rjmp	.+44     	; 0x3100 <main+0xd06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d4:	fe 01       	movw	r30, r28
    30d6:	ff 96       	adiw	r30, 0x3f	; 63
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9e af       	std	Y+62, r25	; 0x3e
    30ea:	8d af       	std	Y+61, r24	; 0x3d
    30ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f0:	9a af       	std	Y+58, r25	; 0x3a
    30f2:	89 af       	std	Y+57, r24	; 0x39
    30f4:	89 ad       	ldd	r24, Y+57	; 0x39
    30f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <main+0xcfe>
    30fc:	9a af       	std	Y+58, r25	; 0x3a
    30fe:	89 af       	std	Y+57, r24	; 0x39
						{
							_delay_ms(1000);
							LCD_vWriteCommand(0b00000001);
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
							LCD_vWriteString("Enter Password");
    3106:	86 e6       	ldi	r24, 0x66	; 102
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
							gotoXY(1,0);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	0e 94 2e 10 	call	0x205c	; 0x205c <gotoXY>
							LCD_vWriteString("Again");
    3116:	85 e7       	ldi	r24, 0x75	; 117
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	aa ef       	ldi	r26, 0xFA	; 250
    3124:	b3 e4       	ldi	r27, 0x43	; 67
    3126:	8d ab       	std	Y+53, r24	; 0x35
    3128:	9e ab       	std	Y+54, r25	; 0x36
    312a:	af ab       	std	Y+55, r26	; 0x37
    312c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312e:	6d a9       	ldd	r22, Y+53	; 0x35
    3130:	7e a9       	ldd	r23, Y+54	; 0x36
    3132:	8f a9       	ldd	r24, Y+55	; 0x37
    3134:	98 ad       	ldd	r25, Y+56	; 0x38
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	4a e7       	ldi	r20, 0x7A	; 122
    313c:	53 e4       	ldi	r21, 0x43	; 67
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	89 ab       	std	Y+49, r24	; 0x31
    3148:	9a ab       	std	Y+50, r25	; 0x32
    314a:	ab ab       	std	Y+51, r26	; 0x33
    314c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    314e:	69 a9       	ldd	r22, Y+49	; 0x31
    3150:	7a a9       	ldd	r23, Y+50	; 0x32
    3152:	8b a9       	ldd	r24, Y+51	; 0x33
    3154:	9c a9       	ldd	r25, Y+52	; 0x34
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	5f e3       	ldi	r21, 0x3F	; 63
    315e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3162:	88 23       	and	r24, r24
    3164:	2c f4       	brge	.+10     	; 0x3170 <main+0xd76>
		__ticks = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	98 ab       	std	Y+48, r25	; 0x30
    316c:	8f a7       	std	Y+47, r24	; 0x2f
    316e:	3f c0       	rjmp	.+126    	; 0x31ee <main+0xdf4>
	else if (__tmp > 65535)
    3170:	69 a9       	ldd	r22, Y+49	; 0x31
    3172:	7a a9       	ldd	r23, Y+50	; 0x32
    3174:	8b a9       	ldd	r24, Y+51	; 0x33
    3176:	9c a9       	ldd	r25, Y+52	; 0x34
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	4f e7       	ldi	r20, 0x7F	; 127
    317e:	57 e4       	ldi	r21, 0x47	; 71
    3180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3184:	18 16       	cp	r1, r24
    3186:	4c f5       	brge	.+82     	; 0x31da <main+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3188:	6d a9       	ldd	r22, Y+53	; 0x35
    318a:	7e a9       	ldd	r23, Y+54	; 0x36
    318c:	8f a9       	ldd	r24, Y+55	; 0x37
    318e:	98 ad       	ldd	r25, Y+56	; 0x38
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e2       	ldi	r20, 0x20	; 32
    3196:	51 e4       	ldi	r21, 0x41	; 65
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	98 ab       	std	Y+48, r25	; 0x30
    31ae:	8f a7       	std	Y+47, r24	; 0x2f
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <main+0xdd6>
    31b2:	89 e1       	ldi	r24, 0x19	; 25
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9e a7       	std	Y+46, r25	; 0x2e
    31b8:	8d a7       	std	Y+45, r24	; 0x2d
    31ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    31bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <main+0xdc4>
    31c2:	9e a7       	std	Y+46, r25	; 0x2e
    31c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	98 ab       	std	Y+48, r25	; 0x30
    31ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d2:	98 a9       	ldd	r25, Y+48	; 0x30
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	69 f7       	brne	.-38     	; 0x31b2 <main+0xdb8>
    31d8:	c1 c1       	rjmp	.+898    	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	69 a9       	ldd	r22, Y+49	; 0x31
    31dc:	7a a9       	ldd	r23, Y+50	; 0x32
    31de:	8b a9       	ldd	r24, Y+51	; 0x33
    31e0:	9c a9       	ldd	r25, Y+52	; 0x34
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	98 ab       	std	Y+48, r25	; 0x30
    31ec:	8f a7       	std	Y+47, r24	; 0x2f
    31ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    31f0:	98 a9       	ldd	r25, Y+48	; 0x30
    31f2:	9c a7       	std	Y+44, r25	; 0x2c
    31f4:	8b a7       	std	Y+43, r24	; 0x2b
    31f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <main+0xe00>
    31fe:	9c a7       	std	Y+44, r25	; 0x2c
    3200:	8b a7       	std	Y+43, r24	; 0x2b
    3202:	ac c1       	rjmp	.+856    	; 0x355c <main+0x1162>
							_delay_ms(500);
						}
						else if(Res_check==1)
    3204:	fe 01       	movw	r30, r28
    3206:	e5 56       	subi	r30, 0x65	; 101
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	09 f0       	breq	.+2      	; 0x3212 <main+0xe18>
    3210:	a5 c1       	rjmp	.+842    	; 0x355c <main+0x1162>
						{
							DIO_vSetPin(DIO_PORTA,5); //Green LED
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	65 e0       	ldi	r22, 0x05	; 5
    3216:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
							DIO_vSetPin(DIO_PORTA,7); //Motor
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	67 e0       	ldi	r22, 0x07	; 7
    321e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	aa e7       	ldi	r26, 0x7A	; 122
    3228:	b4 e4       	ldi	r27, 0x44	; 68
    322a:	8f a3       	std	Y+39, r24	; 0x27
    322c:	98 a7       	std	Y+40, r25	; 0x28
    322e:	a9 a7       	std	Y+41, r26	; 0x29
    3230:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3232:	6f a1       	ldd	r22, Y+39	; 0x27
    3234:	78 a5       	ldd	r23, Y+40	; 0x28
    3236:	89 a5       	ldd	r24, Y+41	; 0x29
    3238:	9a a5       	ldd	r25, Y+42	; 0x2a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a e7       	ldi	r20, 0x7A	; 122
    3240:	53 e4       	ldi	r21, 0x43	; 67
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	8b a3       	std	Y+35, r24	; 0x23
    324c:	9c a3       	std	Y+36, r25	; 0x24
    324e:	ad a3       	std	Y+37, r26	; 0x25
    3250:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3252:	6b a1       	ldd	r22, Y+35	; 0x23
    3254:	7c a1       	ldd	r23, Y+36	; 0x24
    3256:	8d a1       	ldd	r24, Y+37	; 0x25
    3258:	9e a1       	ldd	r25, Y+38	; 0x26
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e8       	ldi	r20, 0x80	; 128
    3260:	5f e3       	ldi	r21, 0x3F	; 63
    3262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3266:	88 23       	and	r24, r24
    3268:	2c f4       	brge	.+10     	; 0x3274 <main+0xe7a>
		__ticks = 1;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	9a a3       	std	Y+34, r25	; 0x22
    3270:	89 a3       	std	Y+33, r24	; 0x21
    3272:	3f c0       	rjmp	.+126    	; 0x32f2 <main+0xef8>
	else if (__tmp > 65535)
    3274:	6b a1       	ldd	r22, Y+35	; 0x23
    3276:	7c a1       	ldd	r23, Y+36	; 0x24
    3278:	8d a1       	ldd	r24, Y+37	; 0x25
    327a:	9e a1       	ldd	r25, Y+38	; 0x26
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	3f ef       	ldi	r19, 0xFF	; 255
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	57 e4       	ldi	r21, 0x47	; 71
    3284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	4c f5       	brge	.+82     	; 0x32de <main+0xee4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328c:	6f a1       	ldd	r22, Y+39	; 0x27
    328e:	78 a5       	ldd	r23, Y+40	; 0x28
    3290:	89 a5       	ldd	r24, Y+41	; 0x29
    3292:	9a a5       	ldd	r25, Y+42	; 0x2a
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e2       	ldi	r20, 0x20	; 32
    329a:	51 e4       	ldi	r21, 0x41	; 65
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9a a3       	std	Y+34, r25	; 0x22
    32b2:	89 a3       	std	Y+33, r24	; 0x21
    32b4:	0f c0       	rjmp	.+30     	; 0x32d4 <main+0xeda>
    32b6:	89 e1       	ldi	r24, 0x19	; 25
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	98 a3       	std	Y+32, r25	; 0x20
    32bc:	8f 8f       	std	Y+31, r24	; 0x1f
    32be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c0:	98 a1       	ldd	r25, Y+32	; 0x20
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <main+0xec8>
    32c6:	98 a3       	std	Y+32, r25	; 0x20
    32c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ca:	89 a1       	ldd	r24, Y+33	; 0x21
    32cc:	9a a1       	ldd	r25, Y+34	; 0x22
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	9a a3       	std	Y+34, r25	; 0x22
    32d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d4:	89 a1       	ldd	r24, Y+33	; 0x21
    32d6:	9a a1       	ldd	r25, Y+34	; 0x22
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	69 f7       	brne	.-38     	; 0x32b6 <main+0xebc>
    32dc:	3f c1       	rjmp	.+638    	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32de:	6b a1       	ldd	r22, Y+35	; 0x23
    32e0:	7c a1       	ldd	r23, Y+36	; 0x24
    32e2:	8d a1       	ldd	r24, Y+37	; 0x25
    32e4:	9e a1       	ldd	r25, Y+38	; 0x26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9a a3       	std	Y+34, r25	; 0x22
    32f0:	89 a3       	std	Y+33, r24	; 0x21
    32f2:	89 a1       	ldd	r24, Y+33	; 0x21
    32f4:	9a a1       	ldd	r25, Y+34	; 0x22
    32f6:	9e 8f       	std	Y+30, r25	; 0x1e
    32f8:	8d 8f       	std	Y+29, r24	; 0x1d
    32fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <main+0xf04>
    3302:	9e 8f       	std	Y+30, r25	; 0x1e
    3304:	8d 8f       	std	Y+29, r24	; 0x1d
    3306:	2a c1       	rjmp	.+596    	; 0x355c <main+0x1162>
							_delay_ms(1000);
						}
		}
		else if(Global_count==0)
    3308:	80 91 9e 00 	lds	r24, 0x009E
    330c:	88 23       	and	r24, r24
    330e:	09 f0       	breq	.+2      	; 0x3312 <main+0xf18>
    3310:	25 c1       	rjmp	.+586    	; 0x355c <main+0x1162>
		{
			count=enter_pass(arr_password);
    3312:	ce 01       	movw	r24, r28
    3314:	83 56       	subi	r24, 0x63	; 99
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	0e 94 63 11 	call	0x22c6	; 0x22c6 <enter_pass>
    331c:	fe 01       	movw	r30, r28
    331e:	e4 56       	subi	r30, 0x64	; 100
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 83       	st	Z, r24
						Res_check=check(arr_real_pass,arr_password,5,count);
    3324:	ce 01       	movw	r24, r28
    3326:	89 55       	subi	r24, 0x59	; 89
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	9e 01       	movw	r18, r28
    332c:	23 56       	subi	r18, 0x63	; 99
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	fe 01       	movw	r30, r28
    3332:	e4 56       	subi	r30, 0x64	; 100
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	b9 01       	movw	r22, r18
    3338:	45 e0       	ldi	r20, 0x05	; 5
    333a:	20 81       	ld	r18, Z
    333c:	0e 94 a9 11 	call	0x2352	; 0x2352 <check>
    3340:	fe 01       	movw	r30, r28
    3342:	e5 56       	subi	r30, 0x65	; 101
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 83       	st	Z, r24
						if(Res_check==0)
    3348:	fe 01       	movw	r30, r28
    334a:	e5 56       	subi	r30, 0x65	; 101
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	88 23       	and	r24, r24
    3352:	09 f0       	breq	.+2      	; 0x3356 <main+0xf5c>
    3354:	82 c0       	rjmp	.+260    	; 0x345a <main+0x1060>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	aa e7       	ldi	r26, 0x7A	; 122
    335c:	b4 e4       	ldi	r27, 0x44	; 68
    335e:	89 8f       	std	Y+25, r24	; 0x19
    3360:	9a 8f       	std	Y+26, r25	; 0x1a
    3362:	ab 8f       	std	Y+27, r26	; 0x1b
    3364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3366:	69 8d       	ldd	r22, Y+25	; 0x19
    3368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    336a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	53 e4       	ldi	r21, 0x43	; 67
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8d 8b       	std	Y+21, r24	; 0x15
    3380:	9e 8b       	std	Y+22, r25	; 0x16
    3382:	af 8b       	std	Y+23, r26	; 0x17
    3384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3386:	6d 89       	ldd	r22, Y+21	; 0x15
    3388:	7e 89       	ldd	r23, Y+22	; 0x16
    338a:	8f 89       	ldd	r24, Y+23	; 0x17
    338c:	98 8d       	ldd	r25, Y+24	; 0x18
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <main+0xfae>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9c 8b       	std	Y+20, r25	; 0x14
    33a4:	8b 8b       	std	Y+19, r24	; 0x13
    33a6:	3f c0       	rjmp	.+126    	; 0x3426 <main+0x102c>
	else if (__tmp > 65535)
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	3f ef       	ldi	r19, 0xFF	; 255
    33b4:	4f e7       	ldi	r20, 0x7F	; 127
    33b6:	57 e4       	ldi	r21, 0x47	; 71
    33b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33bc:	18 16       	cp	r1, r24
    33be:	4c f5       	brge	.+82     	; 0x3412 <main+0x1018>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	69 8d       	ldd	r22, Y+25	; 0x19
    33c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e2       	ldi	r20, 0x20	; 32
    33ce:	51 e4       	ldi	r21, 0x41	; 65
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	8b 8b       	std	Y+19, r24	; 0x13
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <main+0x100e>
    33ea:	89 e1       	ldi	r24, 0x19	; 25
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9a 8b       	std	Y+18, r25	; 0x12
    33f0:	89 8b       	std	Y+17, r24	; 0x11
    33f2:	89 89       	ldd	r24, Y+17	; 0x11
    33f4:	9a 89       	ldd	r25, Y+18	; 0x12
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <main+0xffc>
    33fa:	9a 8b       	std	Y+18, r25	; 0x12
    33fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3400:	9c 89       	ldd	r25, Y+20	; 0x14
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	9c 8b       	std	Y+20, r25	; 0x14
    3406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	9c 89       	ldd	r25, Y+20	; 0x14
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	69 f7       	brne	.-38     	; 0x33ea <main+0xff0>
    3410:	14 c0       	rjmp	.+40     	; 0x343a <main+0x1040>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9c 8b       	std	Y+20, r25	; 0x14
    3424:	8b 8b       	std	Y+19, r24	; 0x13
    3426:	8b 89       	ldd	r24, Y+19	; 0x13
    3428:	9c 89       	ldd	r25, Y+20	; 0x14
    342a:	98 8b       	std	Y+16, r25	; 0x10
    342c:	8f 87       	std	Y+15, r24	; 0x0f
    342e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3430:	98 89       	ldd	r25, Y+16	; 0x10
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <main+0x1038>
    3436:	98 8b       	std	Y+16, r25	; 0x10
    3438:	8f 87       	std	Y+15, r24	; 0x0f
						{
							_delay_ms(1000);
							LCD_vWriteCommand(0b00000001);
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <LCD_vWriteCommand>
							LCD_vWriteString("Finsh");
    3440:	8b e7       	ldi	r24, 0x7B	; 123
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_vWriteString>
							DIO_vSetPin(DIO_PORTA,3); //Red LED
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	63 e0       	ldi	r22, 0x03	; 3
    344c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
							DIO_vSetPin(DIO_PORTA,6); //buzzer
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	66 e0       	ldi	r22, 0x06	; 6
    3454:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3458:	81 c0       	rjmp	.+258    	; 0x355c <main+0x1162>
						}
						else if(Res_check==1)
    345a:	fe 01       	movw	r30, r28
    345c:	e5 56       	subi	r30, 0x65	; 101
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	81 30       	cpi	r24, 0x01	; 1
    3464:	09 f0       	breq	.+2      	; 0x3468 <main+0x106e>
    3466:	7a c0       	rjmp	.+244    	; 0x355c <main+0x1162>
						{
							DIO_vSetPin(DIO_PORTA,5); //Green LED
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	65 e0       	ldi	r22, 0x05	; 5
    346c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
							DIO_vSetPin(DIO_PORTA,7); //Motor
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	aa e7       	ldi	r26, 0x7A	; 122
    347e:	b4 e4       	ldi	r27, 0x44	; 68
    3480:	8b 87       	std	Y+11, r24	; 0x0b
    3482:	9c 87       	std	Y+12, r25	; 0x0c
    3484:	ad 87       	std	Y+13, r26	; 0x0d
    3486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3488:	6b 85       	ldd	r22, Y+11	; 0x0b
    348a:	7c 85       	ldd	r23, Y+12	; 0x0c
    348c:	8d 85       	ldd	r24, Y+13	; 0x0d
    348e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	4a e7       	ldi	r20, 0x7A	; 122
    3496:	53 e4       	ldi	r21, 0x43	; 67
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	8f 83       	std	Y+7, r24	; 0x07
    34a2:	98 87       	std	Y+8, r25	; 0x08
    34a4:	a9 87       	std	Y+9, r26	; 0x09
    34a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a8:	6f 81       	ldd	r22, Y+7	; 0x07
    34aa:	78 85       	ldd	r23, Y+8	; 0x08
    34ac:	89 85       	ldd	r24, Y+9	; 0x09
    34ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	5f e3       	ldi	r21, 0x3F	; 63
    34b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34bc:	88 23       	and	r24, r24
    34be:	2c f4       	brge	.+10     	; 0x34ca <main+0x10d0>
		__ticks = 1;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	8d 83       	std	Y+5, r24	; 0x05
    34c8:	3f c0       	rjmp	.+126    	; 0x3548 <main+0x114e>
	else if (__tmp > 65535)
    34ca:	6f 81       	ldd	r22, Y+7	; 0x07
    34cc:	78 85       	ldd	r23, Y+8	; 0x08
    34ce:	89 85       	ldd	r24, Y+9	; 0x09
    34d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	57 e4       	ldi	r21, 0x47	; 71
    34da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34de:	18 16       	cp	r1, r24
    34e0:	4c f5       	brge	.+82     	; 0x3534 <main+0x113a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9e 83       	std	Y+6, r25	; 0x06
    3508:	8d 83       	std	Y+5, r24	; 0x05
    350a:	0f c0       	rjmp	.+30     	; 0x352a <main+0x1130>
    350c:	89 e1       	ldi	r24, 0x19	; 25
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	9c 81       	ldd	r25, Y+4	; 0x04
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <main+0x111e>
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352a:	8d 81       	ldd	r24, Y+5	; 0x05
    352c:	9e 81       	ldd	r25, Y+6	; 0x06
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	69 f7       	brne	.-38     	; 0x350c <main+0x1112>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <main+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3534:	6f 81       	ldd	r22, Y+7	; 0x07
    3536:	78 85       	ldd	r23, Y+8	; 0x08
    3538:	89 85       	ldd	r24, Y+9	; 0x09
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	9e 81       	ldd	r25, Y+6	; 0x06
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	9a 81       	ldd	r25, Y+2	; 0x02
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <main+0x115a>
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01

	u8 arr_password[10];
	u8 arr_real_pass[5]={1,2,3,4,5};


	for(Global_count=3 ; Global_count>-1 ; Global_count--)
    355c:	80 91 9e 00 	lds	r24, 0x009E
    3560:	81 50       	subi	r24, 0x01	; 1
    3562:	80 93 9e 00 	sts	0x009E, r24
    3566:	56 c8       	rjmp	.-3924   	; 0x2614 <main+0x21a>

00003568 <seven_seg_NumOutput>:
 * Descraption:
 * input:
 * output:
 */
void seven_seg_NumOutput(u8 copy_u8Port_num , u8 copy_u8NumOutput)
{
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <seven_seg_NumOutput+0x6>
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8NumOutput==0)
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	88 23       	and	r24, r24
    357a:	e9 f4       	brne	.+58     	; 0x35b6 <seven_seg_NumOutput+0x4e>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	61 e0       	ldi	r22, 0x01	; 1
    3588:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	62 e0       	ldi	r22, 0x02	; 2
    3590:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	63 e0       	ldi	r22, 0x03	; 3
    3598:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,4);
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	64 e0       	ldi	r22, 0x04	; 4
    35a0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,6);
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	66 e0       	ldi	r22, 0x06	; 6
    35a8:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,5);
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	65 e0       	ldi	r22, 0x05	; 5
    35b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    35b4:	06 c1       	rjmp	.+524    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==1)
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	81 30       	cpi	r24, 0x01	; 1
    35ba:	e9 f4       	brne	.+58     	; 0x35f6 <seven_seg_NumOutput+0x8e>
	{
		DIO_vClearPin(copy_u8Port_num,1);
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	61 e0       	ldi	r22, 0x01	; 1
    35c0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	62 e0       	ldi	r22, 0x02	; 2
    35c8:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,0);
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,3);
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	63 e0       	ldi	r22, 0x03	; 3
    35d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,4);
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	64 e0       	ldi	r22, 0x04	; 4
    35e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,5);
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	65 e0       	ldi	r22, 0x05	; 5
    35e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,6);
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	66 e0       	ldi	r22, 0x06	; 6
    35f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    35f4:	e6 c0       	rjmp	.+460    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==2)
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	82 30       	cpi	r24, 0x02	; 2
    35fa:	e9 f4       	brne	.+58     	; 0x3636 <seven_seg_NumOutput+0xce>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	65 e0       	ldi	r22, 0x05	; 5
    3610:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,4);
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	64 e0       	ldi	r22, 0x04	; 4
    3618:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	63 e0       	ldi	r22, 0x03	; 3
    3620:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,2);
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	62 e0       	ldi	r22, 0x02	; 2
    3628:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,6);
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	66 e0       	ldi	r22, 0x06	; 6
    3630:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3634:	c6 c0       	rjmp	.+396    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==3)
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	83 30       	cpi	r24, 0x03	; 3
    363a:	e9 f4       	brne	.+58     	; 0x3676 <seven_seg_NumOutput+0x10e>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	61 e0       	ldi	r22, 0x01	; 1
    3648:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	62 e0       	ldi	r22, 0x02	; 2
    3650:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	63 e0       	ldi	r22, 0x03	; 3
    3658:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	65 e0       	ldi	r22, 0x05	; 5
    3660:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,4);
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	64 e0       	ldi	r22, 0x04	; 4
    3668:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,6);
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	66 e0       	ldi	r22, 0x06	; 6
    3670:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3674:	a6 c0       	rjmp	.+332    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==4)
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	84 30       	cpi	r24, 0x04	; 4
    367a:	e9 f4       	brne	.+58     	; 0x36b6 <seven_seg_NumOutput+0x14e>
	{
		DIO_vClearPin(copy_u8Port_num,6);
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	66 e0       	ldi	r22, 0x06	; 6
    3680:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	65 e0       	ldi	r22, 0x05	; 5
    3688:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	62 e0       	ldi	r22, 0x02	; 2
    3698:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,0);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,3);
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	63 e0       	ldi	r22, 0x03	; 3
    36a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,4);
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	64 e0       	ldi	r22, 0x04	; 4
    36b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    36b4:	86 c0       	rjmp	.+268    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==5)
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	85 30       	cpi	r24, 0x05	; 5
    36ba:	e9 f4       	brne	.+58     	; 0x36f6 <seven_seg_NumOutput+0x18e>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,6);
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	66 e0       	ldi	r22, 0x06	; 6
    36c8:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	65 e0       	ldi	r22, 0x05	; 5
    36d0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	63 e0       	ldi	r22, 0x03	; 3
    36e0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,1);
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	61 e0       	ldi	r22, 0x01	; 1
    36e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,4);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	64 e0       	ldi	r22, 0x04	; 4
    36f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    36f4:	66 c0       	rjmp	.+204    	; 0x37c2 <seven_seg_NumOutput+0x25a>
	}
	else if(copy_u8NumOutput==6)
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	86 30       	cpi	r24, 0x06	; 6
    36fa:	e9 f4       	brne	.+58     	; 0x3736 <seven_seg_NumOutput+0x1ce>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,6);
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	66 e0       	ldi	r22, 0x06	; 6
    3708:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,4);
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	64 e0       	ldi	r22, 0x04	; 4
    3710:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	63 e0       	ldi	r22, 0x03	; 3
    3718:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	62 e0       	ldi	r22, 0x02	; 2
    3720:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	65 e0       	ldi	r22, 0x05	; 5
    3728:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,1);
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3734:	46 c0       	rjmp	.+140    	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==7)
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	87 30       	cpi	r24, 0x07	; 7
    373a:	e9 f4       	brne	.+58     	; 0x3776 <seven_seg_NumOutput+0x20e>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	62 e0       	ldi	r22, 0x02	; 2
    3750:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,3);
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	63 e0       	ldi	r22, 0x03	; 3
    3758:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,4);
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	64 e0       	ldi	r22, 0x04	; 4
    3760:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,5);
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	65 e0       	ldi	r22, 0x05	; 5
    3768:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(copy_u8Port_num,6);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	66 e0       	ldi	r22, 0x06	; 6
    3770:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    3774:	26 c0       	rjmp	.+76     	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==8)
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	88 30       	cpi	r24, 0x08	; 8
    377a:	21 f4       	brne	.+8      	; 0x3784 <seven_seg_NumOutput+0x21c>
	{
		DIO_vClearPort(copy_u8Port_num);
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_vClearPort>
    3782:	1f c0       	rjmp	.+62     	; 0x37c2 <seven_seg_NumOutput+0x25a>

	}
	else if(copy_u8NumOutput==9)
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	89 30       	cpi	r24, 0x09	; 9
    3788:	e1 f4       	brne	.+56     	; 0x37c2 <seven_seg_NumOutput+0x25a>
	{
		DIO_vClearPin(copy_u8Port_num,0);
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,1);
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	61 e0       	ldi	r22, 0x01	; 1
    3796:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,2);
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	62 e0       	ldi	r22, 0x02	; 2
    379e:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,3);
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	63 e0       	ldi	r22, 0x03	; 3
    37a6:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,5);
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	65 e0       	ldi	r22, 0x05	; 5
    37ae:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vClearPin(copy_u8Port_num,6);
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	66 e0       	ldi	r22, 0x06	; 6
    37b6:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
		DIO_vSetPin(copy_u8Port_num,4);
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	64 e0       	ldi	r22, 0x04	; 4
    37be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	}
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <__prologue_saves__>:
    37cc:	2f 92       	push	r2
    37ce:	3f 92       	push	r3
    37d0:	4f 92       	push	r4
    37d2:	5f 92       	push	r5
    37d4:	6f 92       	push	r6
    37d6:	7f 92       	push	r7
    37d8:	8f 92       	push	r8
    37da:	9f 92       	push	r9
    37dc:	af 92       	push	r10
    37de:	bf 92       	push	r11
    37e0:	cf 92       	push	r12
    37e2:	df 92       	push	r13
    37e4:	ef 92       	push	r14
    37e6:	ff 92       	push	r15
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	ca 1b       	sub	r28, r26
    37f6:	db 0b       	sbc	r29, r27
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	09 94       	ijmp

00003804 <__epilogue_restores__>:
    3804:	2a 88       	ldd	r2, Y+18	; 0x12
    3806:	39 88       	ldd	r3, Y+17	; 0x11
    3808:	48 88       	ldd	r4, Y+16	; 0x10
    380a:	5f 84       	ldd	r5, Y+15	; 0x0f
    380c:	6e 84       	ldd	r6, Y+14	; 0x0e
    380e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3810:	8c 84       	ldd	r8, Y+12	; 0x0c
    3812:	9b 84       	ldd	r9, Y+11	; 0x0b
    3814:	aa 84       	ldd	r10, Y+10	; 0x0a
    3816:	b9 84       	ldd	r11, Y+9	; 0x09
    3818:	c8 84       	ldd	r12, Y+8	; 0x08
    381a:	df 80       	ldd	r13, Y+7	; 0x07
    381c:	ee 80       	ldd	r14, Y+6	; 0x06
    381e:	fd 80       	ldd	r15, Y+5	; 0x05
    3820:	0c 81       	ldd	r16, Y+4	; 0x04
    3822:	1b 81       	ldd	r17, Y+3	; 0x03
    3824:	aa 81       	ldd	r26, Y+2	; 0x02
    3826:	b9 81       	ldd	r27, Y+1	; 0x01
    3828:	ce 0f       	add	r28, r30
    382a:	d1 1d       	adc	r29, r1
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	ed 01       	movw	r28, r26
    3838:	08 95       	ret

0000383a <strlen>:
    383a:	fc 01       	movw	r30, r24
    383c:	01 90       	ld	r0, Z+
    383e:	00 20       	and	r0, r0
    3840:	e9 f7       	brne	.-6      	; 0x383c <strlen+0x2>
    3842:	80 95       	com	r24
    3844:	90 95       	com	r25
    3846:	8e 0f       	add	r24, r30
    3848:	9f 1f       	adc	r25, r31
    384a:	08 95       	ret

0000384c <_exit>:
    384c:	f8 94       	cli

0000384e <__stop_program>:
    384e:	ff cf       	rjmp	.-2      	; 0x384e <__stop_program>
