
I2C_ArduinoSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001f5c  00001fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001788  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000aab  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000420b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000434b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000044bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008189  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <main>
      8e:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__>

00000636 <__gtsf2>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x18>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e8 2e       	mov	r14, r24
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	40 f0       	brcs	.+16     	; 0x68c <__gtsf2+0x56>
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	28 f0       	brcs	.+10     	; 0x68c <__gtsf2+0x56>
     682:	c7 01       	movw	r24, r14
     684:	b8 01       	movw	r22, r16
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <__gtsf2+0x58>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	68 96       	adiw	r28, 0x18	; 24
     690:	e6 e0       	ldi	r30, 0x06	; 6
     692:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

00000696 <__gesf2>:
     696:	a8 e1       	ldi	r26, 0x18	; 24
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	40 f0       	brcs	.+16     	; 0x6ec <__gesf2+0x56>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	28 f0       	brcs	.+10     	; 0x6ec <__gesf2+0x56>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b8 01       	movw	r22, r16
     6e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__gesf2+0x58>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	e6 e0       	ldi	r30, 0x06	; 6
     6f2:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

000006f6 <__ltsf2>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x18>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	e8 2e       	mov	r14, r24
     716:	f1 2c       	mov	r15, r1
     718:	ec 0e       	add	r14, r28
     71a:	fd 1e       	adc	r15, r29
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	b7 01       	movw	r22, r14
     722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     726:	8e 01       	movw	r16, r28
     728:	0f 5e       	subi	r16, 0xEF	; 239
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b8 01       	movw	r22, r16
     732:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	40 f0       	brcs	.+16     	; 0x74c <__ltsf2+0x56>
     73c:	89 89       	ldd	r24, Y+17	; 0x11
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	28 f0       	brcs	.+10     	; 0x74c <__ltsf2+0x56>
     742:	c7 01       	movw	r24, r14
     744:	b8 01       	movw	r22, r16
     746:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     74a:	01 c0       	rjmp	.+2      	; 0x74e <__ltsf2+0x58>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	68 96       	adiw	r28, 0x18	; 24
     750:	e6 e0       	ldi	r30, 0x06	; 6
     752:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__epilogue_restores__+0x20>

000007fe <__pack_f>:
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	fc 01       	movw	r30, r24
     80a:	e4 80       	ldd	r14, Z+4	; 0x04
     80c:	f5 80       	ldd	r15, Z+5	; 0x05
     80e:	06 81       	ldd	r16, Z+6	; 0x06
     810:	17 81       	ldd	r17, Z+7	; 0x07
     812:	d1 80       	ldd	r13, Z+1	; 0x01
     814:	80 81       	ld	r24, Z
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	48 f4       	brcc	.+18     	; 0x82c <__pack_f+0x2e>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e1       	ldi	r26, 0x10	; 16
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	0a 2b       	or	r16, r26
     828:	1b 2b       	or	r17, r27
     82a:	a5 c0       	rjmp	.+330    	; 0x976 <__stack+0x77>
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	09 f4       	brne	.+2      	; 0x832 <__pack_f+0x34>
     830:	9f c0       	rjmp	.+318    	; 0x970 <__stack+0x71>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <__pack_f+0x40>
     836:	ee 24       	eor	r14, r14
     838:	ff 24       	eor	r15, r15
     83a:	87 01       	movw	r16, r14
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x4a>
     83e:	e1 14       	cp	r14, r1
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	19 f4       	brne	.+6      	; 0x84e <__pack_f+0x50>
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x7b>
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	62 38       	cpi	r22, 0x82	; 130
     856:	79 07       	cpc	r23, r25
     858:	0c f0       	brlt	.+2      	; 0x85c <__pack_f+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <__stack+0x13>
     85c:	22 e8       	ldi	r18, 0x82	; 130
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	26 1b       	sub	r18, r22
     862:	37 0b       	sbc	r19, r23
     864:	2a 31       	cpi	r18, 0x1A	; 26
     866:	31 05       	cpc	r19, r1
     868:	2c f0       	brlt	.+10     	; 0x874 <__pack_f+0x76>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <__pack_f+0xca>
     874:	b8 01       	movw	r22, r16
     876:	a7 01       	movw	r20, r14
     878:	02 2e       	mov	r0, r18
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__pack_f+0x86>
     87c:	76 95       	lsr	r23
     87e:	67 95       	ror	r22
     880:	57 95       	ror	r21
     882:	47 95       	ror	r20
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__pack_f+0x7e>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__pack_f+0x9c>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	2a 95       	dec	r18
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__pack_f+0x94>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	8e 21       	and	r24, r14
     8a6:	9f 21       	and	r25, r15
     8a8:	a0 23       	and	r26, r16
     8aa:	b1 23       	and	r27, r17
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	21 f0       	breq	.+8      	; 0x8bc <__pack_f+0xbe>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	39 2b       	or	r19, r25
     8c4:	4a 2b       	or	r20, r26
     8c6:	5b 2b       	or	r21, r27
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	80 34       	cpi	r24, 0x40	; 64
     8d6:	91 05       	cpc	r25, r1
     8d8:	a1 05       	cpc	r26, r1
     8da:	b1 05       	cpc	r27, r1
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__pack_f+0xee>
     8de:	27 ff       	sbrs	r18, 7
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__pack_f+0xf6>
     8e2:	20 5c       	subi	r18, 0xC0	; 192
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	4f 4f       	sbci	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__pack_f+0xf6>
     8ec:	21 5c       	subi	r18, 0xC1	; 193
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4f 4f       	sbci	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	3a 07       	cpc	r19, r26
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	4a 07       	cpc	r20, r26
     902:	a0 e4       	ldi	r26, 0x40	; 64
     904:	5a 07       	cpc	r21, r26
     906:	10 f0       	brcs	.+4      	; 0x90c <__stack+0xd>
     908:	e1 e0       	ldi	r30, 0x01	; 1
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	79 01       	movw	r14, r18
     90e:	8a 01       	movw	r16, r20
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x61>
     912:	60 38       	cpi	r22, 0x80	; 128
     914:	71 05       	cpc	r23, r1
     916:	64 f5       	brge	.+88     	; 0x970 <__stack+0x71>
     918:	fb 01       	movw	r30, r22
     91a:	e1 58       	subi	r30, 0x81	; 129
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	d8 01       	movw	r26, r16
     920:	c7 01       	movw	r24, r14
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	90 70       	andi	r25, 0x00	; 0
     926:	a0 70       	andi	r26, 0x00	; 0
     928:	b0 70       	andi	r27, 0x00	; 0
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0x43>
     934:	e7 fe       	sbrs	r14, 7
     936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
     952:	17 ff       	sbrs	r17, 7
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
     956:	16 95       	lsr	r17
     958:	07 95       	ror	r16
     95a:	f7 94       	ror	r15
     95c:	e7 94       	ror	r14
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d1 f7       	brne	.-12     	; 0x962 <__stack+0x63>
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
     974:	87 01       	movw	r16, r14
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	6e 2f       	mov	r22, r30
     97c:	67 95       	ror	r22
     97e:	66 27       	eor	r22, r22
     980:	67 95       	ror	r22
     982:	90 2f       	mov	r25, r16
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	d7 94       	ror	r13
     988:	dd 24       	eor	r13, r13
     98a:	d7 94       	ror	r13
     98c:	8e 2f       	mov	r24, r30
     98e:	86 95       	lsr	r24
     990:	49 2f       	mov	r20, r25
     992:	46 2b       	or	r20, r22
     994:	58 2f       	mov	r21, r24
     996:	5d 29       	or	r21, r13
     998:	b7 01       	movw	r22, r14
     99a:	ca 01       	movw	r24, r20
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <__unpack_f>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	db 01       	movw	r26, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	62 2f       	mov	r22, r18
     9b4:	6f 77       	andi	r22, 0x7F	; 127
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	22 1f       	adc	r18, r18
     9ba:	22 27       	eor	r18, r18
     9bc:	22 1f       	adc	r18, r18
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	89 2f       	mov	r24, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	82 2b       	or	r24, r18
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	99 1f       	adc	r25, r25
     9cc:	99 27       	eor	r25, r25
     9ce:	99 1f       	adc	r25, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	a9 f5       	brne	.+106    	; 0xa46 <__unpack_f+0x9e>
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__unpack_f+0x42>
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <__unpack_f+0xb0>
     9ea:	82 e8       	ldi	r24, 0x82	; 130
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	d1 f7       	brne	.-12     	; 0x9fc <__unpack_f+0x54>
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8c 93       	st	X, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__unpack_f+0x80>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8d 91       	ld	r24, X+
     a1a:	9c 91       	ld	r25, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	20 30       	cpi	r18, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	38 07       	cpc	r19, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	48 07       	cpc	r20, r24
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	58 07       	cpc	r21, r24
     a36:	58 f3       	brcs	.-42     	; 0xa0e <__unpack_f+0x66>
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	2d 93       	st	X+, r18
     a3c:	3d 93       	st	X+, r19
     a3e:	4d 93       	st	X+, r20
     a40:	5c 93       	st	X, r21
     a42:	17 97       	sbiw	r26, 0x07	; 7
     a44:	08 95       	ret
     a46:	2f 3f       	cpi	r18, 0xFF	; 255
     a48:	31 05       	cpc	r19, r1
     a4a:	79 f4       	brne	.+30     	; 0xa6a <__unpack_f+0xc2>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	61 05       	cpc	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__unpack_f+0xb4>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	08 95       	ret
     a5c:	64 ff       	sbrs	r22, 4
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__unpack_f+0xbe>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8c 93       	st	X, r24
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__unpack_f+0xe2>
     a66:	1c 92       	st	X, r1
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <__unpack_f+0xe2>
     a6a:	2f 57       	subi	r18, 0x7F	; 127
     a6c:	30 40       	sbci	r19, 0x00	; 0
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 93       	st	X, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__unpack_f+0xd4>
     a88:	70 64       	ori	r23, 0x40	; 64
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	4d 93       	st	X+, r20
     a8e:	5d 93       	st	X+, r21
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	17 97       	sbiw	r26, 0x07	; 7
     a96:	08 95       	ret

00000a98 <__fpcmp_parts_f>:
     a98:	1f 93       	push	r17
     a9a:	dc 01       	movw	r26, r24
     a9c:	fb 01       	movw	r30, r22
     a9e:	9c 91       	ld	r25, X
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0xe>
     aa4:	47 c0       	rjmp	.+142    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0x16>
     aac:	43 c0       	rjmp	.+134    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	51 f4       	brne	.+20     	; 0xac6 <__fpcmp_parts_f+0x2e>
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 91       	ld	r17, X
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	99 f5       	brne	.+102    	; 0xb20 <__fpcmp_parts_f+0x88>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	61 1b       	sub	r22, r17
     ac2:	71 09       	sbc	r23, r1
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__fpcmp_parts_f+0xac>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	21 f0       	breq	.+8      	; 0xad2 <__fpcmp_parts_f+0x3a>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <__fpcmp_parts_f+0x42>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <__fpcmp_parts_f+0xa8>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	89 f1       	breq	.+98     	; 0xb3a <__fpcmp_parts_f+0xa2>
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <__fpcmp_parts_f+0x9c>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	1c 91       	ld	r17, X
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <__fpcmp_parts_f+0x88>
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	18 17       	cp	r17, r24
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <__fpcmp_parts_f+0x88>
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	13 97       	sbiw	r26, 0x03	; 3
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	94 f0       	brlt	.+36     	; 0xb20 <__fpcmp_parts_f+0x88>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	bc f0       	brlt	.+46     	; 0xb30 <__fpcmp_parts_f+0x98>
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	24 81       	ldd	r18, Z+4	; 0x04
     b10:	35 81       	ldd	r19, Z+5	; 0x05
     b12:	46 81       	ldd	r20, Z+6	; 0x06
     b14:	57 81       	ldd	r21, Z+7	; 0x07
     b16:	28 17       	cp	r18, r24
     b18:	39 07       	cpc	r19, r25
     b1a:	4a 07       	cpc	r20, r26
     b1c:	5b 07       	cpc	r21, r27
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <__fpcmp_parts_f+0x8e>
     b20:	11 23       	and	r17, r17
     b22:	41 f0       	breq	.+16     	; 0xb34 <__fpcmp_parts_f+0x9c>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <__fpcmp_parts_f+0xa2>
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	a4 07       	cpc	r26, r20
     b2c:	b5 07       	cpc	r27, r21
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fpcmp_parts_f+0xa8>
     b30:	11 23       	and	r17, r17
     b32:	19 f0       	breq	.+6      	; 0xb3a <__fpcmp_parts_f+0xa2>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__fpcmp_parts_f+0xac>
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__fpcmp_parts_f+0xac>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <DIO_vSetPin>:
 * Input: Port number , pin number
 * Output:
 * 1
 */
void DIO_vSetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_vSetPin+0x6>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <DIO_vSetPin+0x8>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3c 83       	std	Y+4, r19	; 0x04
     b62:	2b 83       	std	Y+3, r18	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	91 05       	cpc	r25, r1
     b6c:	f1 f0       	breq	.+60     	; 0xbaa <DIO_vSetPin+0x60>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	23 30       	cpi	r18, 0x03	; 3
     b74:	31 05       	cpc	r19, r1
     b76:	69 f1       	breq	.+90     	; 0xbd2 <DIO_vSetPin+0x88>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	d9 f5       	brne	.+118    	; 0xbf8 <DIO_vSetPin+0xae>
	{

	case  DIO_PORTB:
			setbit(PORTB,Copy_u8PinNumber);
     b82:	a5 e2       	ldi	r26, 0x25	; 37
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e5 e2       	ldi	r30, 0x25	; 37
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	48 2f       	mov	r20, r24
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 2e       	mov	r0, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_vSetPin+0x56>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_vSetPin+0x52>
     ba4:	84 2b       	or	r24, r20
     ba6:	8c 93       	st	X, r24
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <DIO_vSetPin+0xae>
			break;
	case  DIO_PORTC:
				setbit(PORTC,Copy_u8PinNumber);
     baa:	a8 e2       	ldi	r26, 0x28	; 40
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e8 e2       	ldi	r30, 0x28	; 40
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 2e       	mov	r0, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_vSetPin+0x7e>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_vSetPin+0x7a>
     bcc:	84 2b       	or	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <DIO_vSetPin+0xae>
				break;
	case  DIO_PORTD:
				setbit(PORTD,Copy_u8PinNumber);
     bd2:	ab e2       	ldi	r26, 0x2B	; 43
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	eb e2       	ldi	r30, 0x2B	; 43
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_vSetPin+0xa6>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_vSetPin+0xa2>
     bf4:	84 2b       	or	r24, r20
     bf6:	8c 93       	st	X, r24
				break;
	}
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <DIO_vClearPin>:
 * Input: Port number , pin number
 * Output:
 * 2
 */
void DIO_vClearPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <DIO_vClearPin+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <DIO_vClearPin+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	3c 83       	std	Y+4, r19	; 0x04
     c1e:	2b 83       	std	Y+3, r18	; 0x03
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	01 f1       	breq	.+64     	; 0xc6a <DIO_vClearPin+0x64>
     c2a:	2b 81       	ldd	r18, Y+3	; 0x03
     c2c:	3c 81       	ldd	r19, Y+4	; 0x04
     c2e:	23 30       	cpi	r18, 0x03	; 3
     c30:	31 05       	cpc	r19, r1
     c32:	81 f1       	breq	.+96     	; 0xc94 <DIO_vClearPin+0x8e>
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <DIO_vClearPin+0x3a>
     c3e:	3e c0       	rjmp	.+124    	; 0xcbc <DIO_vClearPin+0xb6>
	{

	case  DIO_PORTB:
		clearbit(PORTB,Copy_u8PinNumber);
     c40:	a5 e2       	ldi	r26, 0x25	; 37
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e5 e2       	ldi	r30, 0x25	; 37
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_vClearPin+0x58>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_vClearPin+0x54>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	29 c0       	rjmp	.+82     	; 0xcbc <DIO_vClearPin+0xb6>
			break;
	case  DIO_PORTC:
		clearbit(PORTC,Copy_u8PinNumber);
     c6a:	a8 e2       	ldi	r26, 0x28	; 40
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e8 e2       	ldi	r30, 0x28	; 40
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	48 2f       	mov	r20, r24
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 2e       	mov	r0, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_vClearPin+0x82>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	0a 94       	dec	r0
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_vClearPin+0x7e>
     c8c:	80 95       	com	r24
     c8e:	84 23       	and	r24, r20
     c90:	8c 93       	st	X, r24
     c92:	14 c0       	rjmp	.+40     	; 0xcbc <DIO_vClearPin+0xb6>
				break;
	case  DIO_PORTD:
		clearbit(PORTD,Copy_u8PinNumber);
     c94:	ab e2       	ldi	r26, 0x2B	; 43
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	eb e2       	ldi	r30, 0x2B	; 43
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2f       	mov	r20, r24
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 2e       	mov	r0, r18
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_vClearPin+0xac>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	0a 94       	dec	r0
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_vClearPin+0xa8>
     cb6:	80 95       	com	r24
     cb8:	84 23       	and	r24, r20
     cba:	8c 93       	st	X, r24
				break;
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <DIO_vTogglePin>:
 * Input: Port number , pin number
 * Output:
 * 3
 */
void DIO_vTogglePin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <DIO_vTogglePin+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <DIO_vTogglePin+0x8>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3c 83       	std	Y+4, r19	; 0x04
     ce2:	2b 83       	std	Y+3, r18	; 0x03
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	91 05       	cpc	r25, r1
     cec:	f1 f0       	breq	.+60     	; 0xd2a <DIO_vTogglePin+0x60>
     cee:	2b 81       	ldd	r18, Y+3	; 0x03
     cf0:	3c 81       	ldd	r19, Y+4	; 0x04
     cf2:	23 30       	cpi	r18, 0x03	; 3
     cf4:	31 05       	cpc	r19, r1
     cf6:	69 f1       	breq	.+90     	; 0xd52 <DIO_vTogglePin+0x88>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	d9 f5       	brne	.+118    	; 0xd78 <DIO_vTogglePin+0xae>
	{

	case  DIO_PORTB:
		togglebit(PORTB,Copy_u8PinNumber);
     d02:	a5 e2       	ldi	r26, 0x25	; 37
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e5 e2       	ldi	r30, 0x25	; 37
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_vTogglePin+0x56>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_vTogglePin+0x52>
     d24:	84 27       	eor	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	27 c0       	rjmp	.+78     	; 0xd78 <DIO_vTogglePin+0xae>
			break;
	case  DIO_PORTC:
		togglebit(PORTC,Copy_u8PinNumber);
     d2a:	a8 e2       	ldi	r26, 0x28	; 40
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e2       	ldi	r30, 0x28	; 40
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_vTogglePin+0x7e>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_vTogglePin+0x7a>
     d4c:	84 27       	eor	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	13 c0       	rjmp	.+38     	; 0xd78 <DIO_vTogglePin+0xae>
				break;
	case  DIO_PORTD:
		togglebit(PORTD,Copy_u8PinNumber);
     d52:	ab e2       	ldi	r26, 0x2B	; 43
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	eb e2       	ldi	r30, 0x2B	; 43
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_vTogglePin+0xa6>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_vTogglePin+0xa2>
     d74:	84 27       	eor	r24, r20
     d76:	8c 93       	st	X, r24
				break;
	}
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <DIO_vGetPin>:
 * Input: Port number , pin number
 * Output:return number of pin whether 0 or 1
 * 4
 */
u8 DIO_vGetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <DIO_vGetPin+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <DIO_vGetPin+0x8>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	8a 83       	std	Y+2, r24	; 0x02
     d96:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret;
	switch(Copy_u8PORTNumber)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3d 83       	std	Y+5, r19	; 0x05
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	4c 81       	ldd	r20, Y+4	; 0x04
     da4:	5d 81       	ldd	r21, Y+5	; 0x05
     da6:	42 30       	cpi	r20, 0x02	; 2
     da8:	51 05       	cpc	r21, r1
     daa:	51 f1       	breq	.+84     	; 0xe00 <DIO_vGetPin+0x7a>
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <DIO_vGetPin+0x32>
     db6:	42 c0       	rjmp	.+132    	; 0xe3c <DIO_vGetPin+0xb6>
     db8:	2c 81       	ldd	r18, Y+4	; 0x04
     dba:	3d 81       	ldd	r19, Y+5	; 0x05
     dbc:	21 30       	cpi	r18, 0x01	; 1
     dbe:	31 05       	cpc	r19, r1
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <DIO_vGetPin+0x3e>
     dc2:	59 c0       	rjmp	.+178    	; 0xe76 <DIO_vGetPin+0xf0>
	{

	case  DIO_PORTB:
		ret= getbit(PINB,Copy_u8PinNumber);
     dc4:	e3 e2       	ldi	r30, 0x23	; 35
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_vGetPin+0x58>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	2a 95       	dec	r18
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_vGetPin+0x54>
     de2:	9a 01       	movw	r18, r20
     de4:	28 23       	and	r18, r24
     de6:	39 23       	and	r19, r25
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_vGetPin+0x70>
     df2:	55 95       	asr	r21
     df4:	47 95       	ror	r20
     df6:	8a 95       	dec	r24
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_vGetPin+0x6c>
     dfa:	ca 01       	movw	r24, r20
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	3b c0       	rjmp	.+118    	; 0xe76 <DIO_vGetPin+0xf0>
			break;
	case  DIO_PORTC:
		ret= getbit(PINC,Copy_u8PinNumber);
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_vGetPin+0x94>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	2a 95       	dec	r18
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_vGetPin+0x90>
     e1e:	9a 01       	movw	r18, r20
     e20:	28 23       	and	r18, r24
     e22:	39 23       	and	r19, r25
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_vGetPin+0xac>
     e2e:	55 95       	asr	r21
     e30:	47 95       	ror	r20
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_vGetPin+0xa8>
     e36:	ca 01       	movw	r24, r20
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	1d c0       	rjmp	.+58     	; 0xe76 <DIO_vGetPin+0xf0>
				break;
	case  DIO_PORTD:
		ret= getbit(PIND,Copy_u8PinNumber);
     e3c:	e9 e2       	ldi	r30, 0x29	; 41
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_vGetPin+0xd0>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	2a 95       	dec	r18
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_vGetPin+0xcc>
     e5a:	9a 01       	movw	r18, r20
     e5c:	28 23       	and	r18, r24
     e5e:	39 23       	and	r19, r25
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a9 01       	movw	r20, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_vGetPin+0xe8>
     e6a:	55 95       	asr	r21
     e6c:	47 95       	ror	r20
     e6e:	8a 95       	dec	r24
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_vGetPin+0xe4>
     e72:	ca 01       	movw	r24, r20
     e74:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return ret;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <DIO_vSetPort>:
 * Input: Port number
 * Output:
 * 5
 */
void DIO_vSetPort(u8 Copy_u8PORTNumber)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_vSetPort+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3b 83       	std	Y+3, r19	; 0x03
     e9e:	2a 83       	std	Y+2, r18	; 0x02
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	79 f0       	breq	.+30     	; 0xec8 <DIO_vSetPort+0x40>
     eaa:	2a 81       	ldd	r18, Y+2	; 0x02
     eac:	3b 81       	ldd	r19, Y+3	; 0x03
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	31 05       	cpc	r19, r1
     eb2:	79 f0       	breq	.+30     	; 0xed2 <DIO_vSetPort+0x4a>
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	71 f4       	brne	.+28     	; 0xeda <DIO_vSetPort+0x52>
	{

	case  DIO_PORTB:
		PORTB=0b11111111;
     ebe:	e5 e2       	ldi	r30, 0x25	; 37
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	80 83       	st	Z, r24
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <DIO_vSetPort+0x52>
		break;
	case  DIO_PORTC:
		PORTC=0b11111111;
     ec8:	e8 e2       	ldi	r30, 0x28	; 40
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	80 83       	st	Z, r24
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <DIO_vSetPort+0x52>
		break;
	case  DIO_PORTD:
		PORTD=0b11111111;
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
		break;
	}
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_vClearPort>:
 * Input: Port number
 * Output:
 * 6
 */
void DIO_vClearPort(u8 Copy_u8PORTNumber)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <DIO_vClearPort+0x6>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3b 83       	std	Y+3, r19	; 0x03
     efc:	2a 83       	std	Y+2, r18	; 0x02
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	91 05       	cpc	r25, r1
     f06:	71 f0       	breq	.+28     	; 0xf24 <DIO_vClearPort+0x3e>
     f08:	2a 81       	ldd	r18, Y+2	; 0x02
     f0a:	3b 81       	ldd	r19, Y+3	; 0x03
     f0c:	23 30       	cpi	r18, 0x03	; 3
     f0e:	31 05       	cpc	r19, r1
     f10:	69 f0       	breq	.+26     	; 0xf2c <DIO_vClearPort+0x46>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	59 f4       	brne	.+22     	; 0xf32 <DIO_vClearPort+0x4c>
	{

	case  DIO_PORTB:
		PORTB=0b00000000;
     f1c:	e5 e2       	ldi	r30, 0x25	; 37
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	10 82       	st	Z, r1
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <DIO_vClearPort+0x4c>
		break;
	case  DIO_PORTC:
		PORTC=0b00000000;
     f24:	e8 e2       	ldi	r30, 0x28	; 40
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	10 82       	st	Z, r1
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <DIO_vClearPort+0x4c>
		break;
	case  DIO_PORTD:
		PORTD=0b00000000;
     f2c:	eb e2       	ldi	r30, 0x2B	; 43
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	10 82       	st	Z, r1
		break;
	}
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_vSetPinDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 7
 */
void DIO_vSetPinDirec(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber,u8 Copy_u8Direc)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	2b 97       	sbiw	r28, 0x0b	; 11
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
     f56:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORTNumber)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3b 87       	std	Y+11, r19	; 0x0b
     f60:	2a 87       	std	Y+10, r18	; 0x0a
     f62:	8a 85       	ldd	r24, Y+10	; 0x0a
     f64:	9b 85       	ldd	r25, Y+11	; 0x0b
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <DIO_vSetPinDirec+0x30>
     f6c:	44 c0       	rjmp	.+136    	; 0xff6 <DIO_vSetPinDirec+0xb8>
     f6e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f70:	3b 85       	ldd	r19, Y+11	; 0x0b
     f72:	23 30       	cpi	r18, 0x03	; 3
     f74:	31 05       	cpc	r19, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <DIO_vSetPinDirec+0x3c>
     f78:	76 c0       	rjmp	.+236    	; 0x1066 <DIO_vSetPinDirec+0x128>
     f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	09 f0       	breq	.+2      	; 0xf86 <DIO_vSetPinDirec+0x48>
     f84:	a7 c0       	rjmp	.+334    	; 0x10d4 <DIO_vSetPinDirec+0x196>
		{

		case  DIO_PORTB:
			switch(Copy_u8Direc)
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	39 87       	std	Y+9, r19	; 0x09
     f8e:	28 87       	std	Y+8, r18	; 0x08
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	31 f0       	breq	.+12     	; 0xfa4 <DIO_vSetPinDirec+0x66>
     f98:	28 85       	ldd	r18, Y+8	; 0x08
     f9a:	39 85       	ldd	r19, Y+9	; 0x09
     f9c:	21 30       	cpi	r18, 0x01	; 1
     f9e:	31 05       	cpc	r19, r1
     fa0:	b1 f0       	breq	.+44     	; 0xfce <DIO_vSetPinDirec+0x90>
     fa2:	98 c0       	rjmp	.+304    	; 0x10d4 <DIO_vSetPinDirec+0x196>
						{
						case DIO_INPUT:
							clearbit(DDRB,Copy_u8PinNumber);
     fa4:	a4 e2       	ldi	r26, 0x24	; 36
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e4 e2       	ldi	r30, 0x24	; 36
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_vSetPinDirec+0x84>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_vSetPinDirec+0x80>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	83 c0       	rjmp	.+262    	; 0x10d4 <DIO_vSetPinDirec+0x196>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,Copy_u8PinNumber);
     fce:	a4 e2       	ldi	r26, 0x24	; 36
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e2       	ldi	r30, 0x24	; 36
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_vSetPinDirec+0xae>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_vSetPinDirec+0xaa>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	6f c0       	rjmp	.+222    	; 0x10d4 <DIO_vSetPinDirec+0x196>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3f 83       	std	Y+7, r19	; 0x07
     ffe:	2e 83       	std	Y+6, r18	; 0x06
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	31 f0       	breq	.+12     	; 0x1014 <DIO_vSetPinDirec+0xd6>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	21 30       	cpi	r18, 0x01	; 1
    100e:	31 05       	cpc	r19, r1
    1010:	b1 f0       	breq	.+44     	; 0x103e <DIO_vSetPinDirec+0x100>
    1012:	60 c0       	rjmp	.+192    	; 0x10d4 <DIO_vSetPinDirec+0x196>
						{
						case DIO_INPUT:
							clearbit(DDRC,Copy_u8PinNumber);
    1014:	a7 e2       	ldi	r26, 0x27	; 39
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e7 e2       	ldi	r30, 0x27	; 39
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_vSetPinDirec+0xf4>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_vSetPinDirec+0xf0>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	4b c0       	rjmp	.+150    	; 0x10d4 <DIO_vSetPinDirec+0x196>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,Copy_u8PinNumber);
    103e:	a7 e2       	ldi	r26, 0x27	; 39
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e7 e2       	ldi	r30, 0x27	; 39
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_vSetPinDirec+0x11e>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_vSetPinDirec+0x11a>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	37 c0       	rjmp	.+110    	; 0x10d4 <DIO_vSetPinDirec+0x196>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3d 83       	std	Y+5, r19	; 0x05
    106e:	2c 83       	std	Y+4, r18	; 0x04
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	31 f0       	breq	.+12     	; 0x1084 <DIO_vSetPinDirec+0x146>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	21 30       	cpi	r18, 0x01	; 1
    107e:	31 05       	cpc	r19, r1
    1080:	b1 f0       	breq	.+44     	; 0x10ae <DIO_vSetPinDirec+0x170>
    1082:	28 c0       	rjmp	.+80     	; 0x10d4 <DIO_vSetPinDirec+0x196>
						{
						case DIO_INPUT:
							clearbit(DDRD,Copy_u8PinNumber);
    1084:	aa e2       	ldi	r26, 0x2A	; 42
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e2       	ldi	r30, 0x2A	; 42
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_vSetPinDirec+0x164>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_vSetPinDirec+0x160>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	13 c0       	rjmp	.+38     	; 0x10d4 <DIO_vSetPinDirec+0x196>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,Copy_u8PinNumber);
    10ae:	aa e2       	ldi	r26, 0x2A	; 42
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e2       	ldi	r30, 0x2A	; 42
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_vSetPinDirec+0x18e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_vSetPinDirec+0x18a>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    10d4:	2b 96       	adiw	r28, 0x0b	; 11
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <DIO_vToggletPort>:
 * Input: Port number
 * Output:
 * 8
 */
void DIO_vToggletPort(u8 Copy_u8PORTNumber)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	29 97       	sbiw	r28, 0x09	; 9
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	8f 83       	std	Y+7, r24	; 0x07
	switch(Copy_u8PORTNumber)
    10fc:	8f 81       	ldd	r24, Y+7	; 0x07
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	39 87       	std	Y+9, r19	; 0x09
    1104:	28 87       	std	Y+8, r18	; 0x08
    1106:	88 85       	ldd	r24, Y+8	; 0x08
    1108:	99 85       	ldd	r25, Y+9	; 0x09
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	51 f1       	breq	.+84     	; 0x1164 <DIO_vToggletPort+0x7e>
    1110:	28 85       	ldd	r18, Y+8	; 0x08
    1112:	39 85       	ldd	r19, Y+9	; 0x09
    1114:	23 30       	cpi	r18, 0x03	; 3
    1116:	31 05       	cpc	r19, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <DIO_vToggletPort+0x36>
    111a:	42 c0       	rjmp	.+132    	; 0x11a0 <DIO_vToggletPort+0xba>
    111c:	88 85       	ldd	r24, Y+8	; 0x08
    111e:	99 85       	ldd	r25, Y+9	; 0x09
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	09 f0       	breq	.+2      	; 0x1128 <DIO_vToggletPort+0x42>
    1126:	59 c0       	rjmp	.+178    	; 0x11da <DIO_vToggletPort+0xf4>
	{

	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1128:	1e 82       	std	Y+6, r1	; 0x06
    112a:	1d 82       	std	Y+5, r1	; 0x05
    112c:	15 c0       	rjmp	.+42     	; 0x1158 <DIO_vToggletPort+0x72>
		{
			togglebit(PORTB , Pin_Counter) ;
    112e:	a5 e2       	ldi	r26, 0x25	; 37
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e2       	ldi	r30, 0x25	; 37
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	28 2f       	mov	r18, r24
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0d 80       	ldd	r0, Y+5	; 0x05
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_vToggletPort+0x60>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_vToggletPort+0x5c>
    114a:	82 27       	eor	r24, r18
    114c:	8c 93       	st	X, r24
	switch(Copy_u8PORTNumber)
	{

	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	91 05       	cpc	r25, r1
    1160:	34 f3       	brlt	.-52     	; 0x112e <DIO_vToggletPort+0x48>
    1162:	3b c0       	rjmp	.+118    	; 0x11da <DIO_vToggletPort+0xf4>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	1b 82       	std	Y+3, r1	; 0x03
    1168:	15 c0       	rjmp	.+42     	; 0x1194 <DIO_vToggletPort+0xae>
		{
			togglebit(PORTC , Pin_Counter) ;
    116a:	a8 e2       	ldi	r26, 0x28	; 40
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e2       	ldi	r30, 0x28	; 40
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0b 80       	ldd	r0, Y+3	; 0x03
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_vToggletPort+0x9c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_vToggletPort+0x98>
    1186:	82 27       	eor	r24, r18
    1188:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	91 05       	cpc	r25, r1
    119c:	34 f3       	brlt	.-52     	; 0x116a <DIO_vToggletPort+0x84>
    119e:	1d c0       	rjmp	.+58     	; 0x11da <DIO_vToggletPort+0xf4>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    11a0:	1a 82       	std	Y+2, r1	; 0x02
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	15 c0       	rjmp	.+42     	; 0x11d0 <DIO_vToggletPort+0xea>
		{
			togglebit(PORTD , Pin_Counter) ;
    11a6:	ab e2       	ldi	r26, 0x2B	; 43
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e2       	ldi	r30, 0x2B	; 43
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	09 80       	ldd	r0, Y+1	; 0x01
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_vToggletPort+0xd8>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_vToggletPort+0xd4>
    11c2:	82 27       	eor	r24, r18
    11c4:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	88 30       	cpi	r24, 0x08	; 8
    11d6:	91 05       	cpc	r25, r1
    11d8:	34 f3       	brlt	.-52     	; 0x11a6 <DIO_vToggletPort+0xc0>
	}

	}


}
    11da:	29 96       	adiw	r28, 0x09	; 9
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_vSetPortvalue>:
 * Input: Port number , command
 * Output:
 * 9
 */
void DIO_vSetPortvalue(u8 Copy_u8PORTNumber,u8 Copy_u8value)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_vSetPortvalue+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_vSetPortvalue+0x8>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	91 05       	cpc	r25, r1
    120e:	79 f0       	breq	.+30     	; 0x122e <DIO_vSetPortvalue+0x42>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	23 30       	cpi	r18, 0x03	; 3
    1216:	31 05       	cpc	r19, r1
    1218:	79 f0       	breq	.+30     	; 0x1238 <DIO_vSetPortvalue+0x4c>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	71 f4       	brne	.+28     	; 0x1240 <DIO_vSetPortvalue+0x54>
		{

		case DIO_PORTB:
			PORTB=Copy_u8value;
    1224:	e5 e2       	ldi	r30, 0x25	; 37
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <DIO_vSetPortvalue+0x54>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8value;
    122e:	e8 e2       	ldi	r30, 0x28	; 40
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <DIO_vSetPortvalue+0x54>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8value;
    1238:	eb e2       	ldi	r30, 0x2B	; 43
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
			break;

		}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <DIO_vSetPortDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 10
 */
void DIO_vSetPortDirec(u8 Copy_u8PORTNumber ,u8 Copy_u8Direc)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	2a 97       	sbiw	r28, 0x0a	; 10
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3a 87       	std	Y+10, r19	; 0x0a
    126e:	29 87       	std	Y+9, r18	; 0x09
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <DIO_vSetPortDirec+0x2e>
    127a:	8d c0       	rjmp	.+282    	; 0x1396 <DIO_vSetPortDirec+0x148>
    127c:	29 85       	ldd	r18, Y+9	; 0x09
    127e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1280:	23 30       	cpi	r18, 0x03	; 3
    1282:	31 05       	cpc	r19, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_vSetPortDirec+0x3a>
    1286:	08 c1       	rjmp	.+528    	; 0x1498 <DIO_vSetPortDirec+0x24a>
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	09 f0       	breq	.+2      	; 0x1294 <DIO_vSetPortDirec+0x46>
    1292:	82 c1       	rjmp	.+772    	; 0x1598 <DIO_vSetPortDirec+0x34a>
		{

		case  DIO_PORTB:
			switch(Copy_u8Direc)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	38 87       	std	Y+8, r19	; 0x08
    129c:	2f 83       	std	Y+7, r18	; 0x07
    129e:	8f 81       	ldd	r24, Y+7	; 0x07
    12a0:	98 85       	ldd	r25, Y+8	; 0x08
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <DIO_vSetPortDirec+0x64>
    12a6:	2f 81       	ldd	r18, Y+7	; 0x07
    12a8:	38 85       	ldd	r19, Y+8	; 0x08
    12aa:	21 30       	cpi	r18, 0x01	; 1
    12ac:	31 05       	cpc	r19, r1
    12ae:	d1 f1       	breq	.+116    	; 0x1324 <DIO_vSetPortDirec+0xd6>
    12b0:	73 c1       	rjmp	.+742    	; 0x1598 <DIO_vSetPortDirec+0x34a>
						{
						case DIO_INPUT:
							clearbit(DDRB,0);
    12b2:	a4 e2       	ldi	r26, 0x24	; 36
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e4 e2       	ldi	r30, 0x24	; 36
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8e 7f       	andi	r24, 0xFE	; 254
    12be:	8c 93       	st	X, r24
							clearbit(DDRB,1);
    12c0:	a4 e2       	ldi	r26, 0x24	; 36
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e4 e2       	ldi	r30, 0x24	; 36
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8d 7f       	andi	r24, 0xFD	; 253
    12cc:	8c 93       	st	X, r24
							clearbit(DDRB,2);
    12ce:	a4 e2       	ldi	r26, 0x24	; 36
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e4 e2       	ldi	r30, 0x24	; 36
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8b 7f       	andi	r24, 0xFB	; 251
    12da:	8c 93       	st	X, r24
							clearbit(DDRB,3);
    12dc:	a4 e2       	ldi	r26, 0x24	; 36
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e2       	ldi	r30, 0x24	; 36
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	87 7f       	andi	r24, 0xF7	; 247
    12e8:	8c 93       	st	X, r24
							clearbit(DDRB,4);
    12ea:	a4 e2       	ldi	r26, 0x24	; 36
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e4 e2       	ldi	r30, 0x24	; 36
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7e       	andi	r24, 0xEF	; 239
    12f6:	8c 93       	st	X, r24
							clearbit(DDRB,5);
    12f8:	a4 e2       	ldi	r26, 0x24	; 36
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e2       	ldi	r30, 0x24	; 36
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7d       	andi	r24, 0xDF	; 223
    1304:	8c 93       	st	X, r24
							clearbit(DDRB,6);
    1306:	a4 e2       	ldi	r26, 0x24	; 36
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e4 e2       	ldi	r30, 0x24	; 36
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 7b       	andi	r24, 0xBF	; 191
    1312:	8c 93       	st	X, r24
							clearbit(DDRB,7);
    1314:	a4 e2       	ldi	r26, 0x24	; 36
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e4 e2       	ldi	r30, 0x24	; 36
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	8c 93       	st	X, r24
    1322:	3a c1       	rjmp	.+628    	; 0x1598 <DIO_vSetPortDirec+0x34a>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,0);
    1324:	a4 e2       	ldi	r26, 0x24	; 36
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e2       	ldi	r30, 0x24	; 36
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	8c 93       	st	X, r24
							setbit(DDRB,1);
    1332:	a4 e2       	ldi	r26, 0x24	; 36
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e4 e2       	ldi	r30, 0x24	; 36
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	82 60       	ori	r24, 0x02	; 2
    133e:	8c 93       	st	X, r24
							setbit(DDRB,2);
    1340:	a4 e2       	ldi	r26, 0x24	; 36
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e4 e2       	ldi	r30, 0x24	; 36
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	84 60       	ori	r24, 0x04	; 4
    134c:	8c 93       	st	X, r24
							setbit(DDRB,3);
    134e:	a4 e2       	ldi	r26, 0x24	; 36
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e2       	ldi	r30, 0x24	; 36
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	88 60       	ori	r24, 0x08	; 8
    135a:	8c 93       	st	X, r24
							setbit(DDRB,4);
    135c:	a4 e2       	ldi	r26, 0x24	; 36
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 e2       	ldi	r30, 0x24	; 36
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	8c 93       	st	X, r24
							setbit(DDRB,5);
    136a:	a4 e2       	ldi	r26, 0x24	; 36
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e4 e2       	ldi	r30, 0x24	; 36
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 62       	ori	r24, 0x20	; 32
    1376:	8c 93       	st	X, r24
							setbit(DDRB,6);
    1378:	a4 e2       	ldi	r26, 0x24	; 36
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e4 e2       	ldi	r30, 0x24	; 36
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	8c 93       	st	X, r24
							setbit(DDRB,7);
    1386:	a4 e2       	ldi	r26, 0x24	; 36
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e4 e2       	ldi	r30, 0x24	; 36
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
    1394:	01 c1       	rjmp	.+514    	; 0x1598 <DIO_vSetPortDirec+0x34a>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	31 f0       	breq	.+12     	; 0x13b4 <DIO_vSetPortDirec+0x166>
    13a8:	2d 81       	ldd	r18, Y+5	; 0x05
    13aa:	3e 81       	ldd	r19, Y+6	; 0x06
    13ac:	21 30       	cpi	r18, 0x01	; 1
    13ae:	31 05       	cpc	r19, r1
    13b0:	d1 f1       	breq	.+116    	; 0x1426 <DIO_vSetPortDirec+0x1d8>
    13b2:	f2 c0       	rjmp	.+484    	; 0x1598 <DIO_vSetPortDirec+0x34a>
						{
						case DIO_INPUT:
							clearbit(DDRC,0);
    13b4:	a7 e2       	ldi	r26, 0x27	; 39
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e7 e2       	ldi	r30, 0x27	; 39
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	8c 93       	st	X, r24
							clearbit(DDRC,1);
    13c2:	a7 e2       	ldi	r26, 0x27	; 39
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e7 e2       	ldi	r30, 0x27	; 39
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
							clearbit(DDRC,2);
    13d0:	a7 e2       	ldi	r26, 0x27	; 39
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e7 e2       	ldi	r30, 0x27	; 39
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	8c 93       	st	X, r24
							clearbit(DDRC,3);
    13de:	a7 e2       	ldi	r26, 0x27	; 39
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e7 e2       	ldi	r30, 0x27	; 39
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	87 7f       	andi	r24, 0xF7	; 247
    13ea:	8c 93       	st	X, r24
							clearbit(DDRC,4);
    13ec:	a7 e2       	ldi	r26, 0x27	; 39
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e7 e2       	ldi	r30, 0x27	; 39
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 7e       	andi	r24, 0xEF	; 239
    13f8:	8c 93       	st	X, r24
							clearbit(DDRC,5);
    13fa:	a7 e2       	ldi	r26, 0x27	; 39
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e7 e2       	ldi	r30, 0x27	; 39
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8f 7d       	andi	r24, 0xDF	; 223
    1406:	8c 93       	st	X, r24
							clearbit(DDRC,6);
    1408:	a7 e2       	ldi	r26, 0x27	; 39
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e2       	ldi	r30, 0x27	; 39
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	8c 93       	st	X, r24
							clearbit(DDRC,7);
    1416:	a7 e2       	ldi	r26, 0x27	; 39
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e7 e2       	ldi	r30, 0x27	; 39
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24
    1424:	b9 c0       	rjmp	.+370    	; 0x1598 <DIO_vSetPortDirec+0x34a>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,0);
    1426:	a7 e2       	ldi	r26, 0x27	; 39
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e7 e2       	ldi	r30, 0x27	; 39
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	8c 93       	st	X, r24
							setbit(DDRC,1);
    1434:	a7 e2       	ldi	r26, 0x27	; 39
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e2       	ldi	r30, 0x27	; 39
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	8c 93       	st	X, r24
							setbit(DDRC,2);
    1442:	a7 e2       	ldi	r26, 0x27	; 39
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	84 60       	ori	r24, 0x04	; 4
    144e:	8c 93       	st	X, r24
							setbit(DDRC,3);
    1450:	a7 e2       	ldi	r26, 0x27	; 39
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e7 e2       	ldi	r30, 0x27	; 39
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 60       	ori	r24, 0x08	; 8
    145c:	8c 93       	st	X, r24
							setbit(DDRC,4);
    145e:	a7 e2       	ldi	r26, 0x27	; 39
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e7 e2       	ldi	r30, 0x27	; 39
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 61       	ori	r24, 0x10	; 16
    146a:	8c 93       	st	X, r24
							setbit(DDRC,5);
    146c:	a7 e2       	ldi	r26, 0x27	; 39
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e7 e2       	ldi	r30, 0x27	; 39
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 62       	ori	r24, 0x20	; 32
    1478:	8c 93       	st	X, r24
							setbit(DDRC,6);
    147a:	a7 e2       	ldi	r26, 0x27	; 39
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e2       	ldi	r30, 0x27	; 39
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 64       	ori	r24, 0x40	; 64
    1486:	8c 93       	st	X, r24
							setbit(DDRC,7);
    1488:	a7 e2       	ldi	r26, 0x27	; 39
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e7 e2       	ldi	r30, 0x27	; 39
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 68       	ori	r24, 0x80	; 128
    1494:	8c 93       	st	X, r24
    1496:	80 c0       	rjmp	.+256    	; 0x1598 <DIO_vSetPortDirec+0x34a>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	31 f0       	breq	.+12     	; 0x14b6 <DIO_vSetPortDirec+0x268>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	21 30       	cpi	r18, 0x01	; 1
    14b0:	31 05       	cpc	r19, r1
    14b2:	d1 f1       	breq	.+116    	; 0x1528 <DIO_vSetPortDirec+0x2da>
    14b4:	71 c0       	rjmp	.+226    	; 0x1598 <DIO_vSetPortDirec+0x34a>
						{
						case DIO_INPUT:
							clearbit(DDRD,0);
    14b6:	aa e2       	ldi	r26, 0x2A	; 42
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ea e2       	ldi	r30, 0x2A	; 42
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8e 7f       	andi	r24, 0xFE	; 254
    14c2:	8c 93       	st	X, r24
							clearbit(DDRD,1);
    14c4:	aa e2       	ldi	r26, 0x2A	; 42
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ea e2       	ldi	r30, 0x2A	; 42
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8d 7f       	andi	r24, 0xFD	; 253
    14d0:	8c 93       	st	X, r24
							clearbit(DDRD,2);
    14d2:	aa e2       	ldi	r26, 0x2A	; 42
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ea e2       	ldi	r30, 0x2A	; 42
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8b 7f       	andi	r24, 0xFB	; 251
    14de:	8c 93       	st	X, r24
							clearbit(DDRD,3);
    14e0:	aa e2       	ldi	r26, 0x2A	; 42
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ea e2       	ldi	r30, 0x2A	; 42
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	8c 93       	st	X, r24
							clearbit(DDRD,4);
    14ee:	aa e2       	ldi	r26, 0x2A	; 42
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e2       	ldi	r30, 0x2A	; 42
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7e       	andi	r24, 0xEF	; 239
    14fa:	8c 93       	st	X, r24
							clearbit(DDRD,5);
    14fc:	aa e2       	ldi	r26, 0x2A	; 42
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ea e2       	ldi	r30, 0x2A	; 42
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7d       	andi	r24, 0xDF	; 223
    1508:	8c 93       	st	X, r24
							clearbit(DDRD,6);
    150a:	aa e2       	ldi	r26, 0x2A	; 42
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ea e2       	ldi	r30, 0x2A	; 42
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7b       	andi	r24, 0xBF	; 191
    1516:	8c 93       	st	X, r24
							clearbit(DDRD,7);
    1518:	aa e2       	ldi	r26, 0x2A	; 42
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ea e2       	ldi	r30, 0x2A	; 42
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 77       	andi	r24, 0x7F	; 127
    1524:	8c 93       	st	X, r24
    1526:	38 c0       	rjmp	.+112    	; 0x1598 <DIO_vSetPortDirec+0x34a>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,0);
    1528:	aa e2       	ldi	r26, 0x2A	; 42
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ea e2       	ldi	r30, 0x2A	; 42
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	8c 93       	st	X, r24
							setbit(DDRD,1);
    1536:	aa e2       	ldi	r26, 0x2A	; 42
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ea e2       	ldi	r30, 0x2A	; 42
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	8c 93       	st	X, r24
							setbit(DDRD,2);
    1544:	aa e2       	ldi	r26, 0x2A	; 42
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ea e2       	ldi	r30, 0x2A	; 42
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	84 60       	ori	r24, 0x04	; 4
    1550:	8c 93       	st	X, r24
							setbit(DDRD,3);
    1552:	aa e2       	ldi	r26, 0x2A	; 42
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e2       	ldi	r30, 0x2A	; 42
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	8c 93       	st	X, r24
							setbit(DDRD,4);
    1560:	aa e2       	ldi	r26, 0x2A	; 42
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ea e2       	ldi	r30, 0x2A	; 42
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 61       	ori	r24, 0x10	; 16
    156c:	8c 93       	st	X, r24
							setbit(DDRD,5);
    156e:	aa e2       	ldi	r26, 0x2A	; 42
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ea e2       	ldi	r30, 0x2A	; 42
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	8c 93       	st	X, r24
							setbit(DDRD,6);
    157c:	aa e2       	ldi	r26, 0x2A	; 42
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ea e2       	ldi	r30, 0x2A	; 42
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 64       	ori	r24, 0x40	; 64
    1588:	8c 93       	st	X, r24
							setbit(DDRD,7);
    158a:	aa e2       	ldi	r26, 0x2A	; 42
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ea e2       	ldi	r30, 0x2A	; 42
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    1598:	2a 96       	adiw	r28, 0x0a	; 10
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <LCD_vWriteCommand>:
#include "LCD_interface.h"
#include <avr/delay.h>


void LCD_vWriteCommand(u8 copy_u8command)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	2f 97       	sbiw	r28, 0x0f	; 15
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 0
	DIO_vClearPin(Port_Control,LCD_RSPin);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_vClearPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(Port_Data,copy_u8command);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    15d4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_vSetPortvalue>
	//enable ->1
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <DIO_vSetPin>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e4       	ldi	r27, 0x40	; 64
    15e8:	8b 87       	std	Y+11, r24	; 0x0b
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
    15ec:	ad 87       	std	Y+13, r26	; 0x0d
    15ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8f 83       	std	Y+7, r24	; 0x07
    160a:	98 87       	std	Y+8, r25	; 0x08
    160c:	a9 87       	std	Y+9, r26	; 0x09
    160e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <LCD_vWriteCommand+0x88>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <LCD_vWriteCommand+0x106>
	else if (__tmp > 65535)
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <LCD_vWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <LCD_vWriteCommand+0xe8>
    1674:	89 e1       	ldi	r24, 0x19	; 25
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_vWriteCommand+0xd6>
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <LCD_vWriteCommand+0xca>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <LCD_vWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_vWriteCommand+0x112>
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable ->0
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_vClearPin>
}
    16cc:	2f 96       	adiw	r28, 0x0f	; 15
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <LCD_vWriteChar>:

void LCD_vWriteChar(u8 copy_u8Char)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	2f 97       	sbiw	r28, 0x0f	; 15
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 1
	DIO_vSetPin(Port_Control,LCD_RSPin);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <DIO_vSetPin>
	// RW control -> 0
	DIO_vClearPin(Port_Control,LCD_RWPin);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(Port_Data,copy_u8Char);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	6f 85       	ldd	r22, Y+15	; 0x0f
    1708:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_vSetPortvalue>
	//enable
	DIO_vSetPin(Port_Control,LCD_EnablePin);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	0e 94 a5 05 	call	0xb4a	; 0xb4a <DIO_vSetPin>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e4       	ldi	r27, 0x40	; 64
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a e7       	ldi	r20, 0x7A	; 122
    1732:	53 e4       	ldi	r21, 0x43	; 67
    1734:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_vWriteChar+0x88>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_vWriteChar+0x106>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_vWriteChar+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_vWriteChar+0xe8>
    17a8:	89 e1       	ldi	r24, 0x19	; 25
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_vWriteChar+0xd6>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_vWriteChar+0xca>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_vWriteChar+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_vWriteChar+0x112>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable
	DIO_vClearPin(Port_Control,LCD_EnablePin);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_vClearPin>
}
    1800:	2f 96       	adiw	r28, 0x0f	; 15
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <LCD_vInitialize>:

void LCD_vInitialize(void)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	e8 97       	sbiw	r28, 0x38	; 56
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
	//Diricton port data & control
	DIO_vSetPortDirec(Port_Data,DIO_OUTPUT);
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	0e 94 27 09 	call	0x124e	; 0x124e <DIO_vSetPortDirec>

	DIO_vSetPinDirec(Port_Control,0,DIO_OUTPUT);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,1,DIO_OUTPUT);
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(Port_Control,2,DIO_OUTPUT);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	aa ef       	ldi	r26, 0xFA	; 250
    1852:	b3 e4       	ldi	r27, 0x43	; 67
    1854:	8d ab       	std	Y+53, r24	; 0x35
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	af ab       	std	Y+55, r26	; 0x37
    185a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	53 e4       	ldi	r21, 0x43	; 67
    186c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_vInitialize+0x8c>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_vInitialize+0x10a>
	else if (__tmp > 65535)
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_vInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6d a9       	ldd	r22, Y+53	; 0x35
    18b8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ba:	8f a9       	ldd	r24, Y+55	; 0x37
    18bc:	98 ad       	ldd	r25, Y+56	; 0x38
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_vInitialize+0xec>
    18e0:	89 e1       	ldi	r24, 0x19	; 25
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_vInitialize+0xda>
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_vInitialize+0xce>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_vInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	9c a7       	std	Y+44, r25	; 0x2c
    1922:	8b a7       	std	Y+43, r24	; 0x2b
    1924:	8b a5       	ldd	r24, Y+43	; 0x2b
    1926:	9c a5       	ldd	r25, Y+44	; 0x2c
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_vInitialize+0x116>
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b

	//delay 500 ms
	_delay_ms(500);
	//writeCommand 0011 1000
	LCD_vWriteCommand(0b00111000);
    1930:	88 e3       	ldi	r24, 0x38	; 56
    1932:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_vWriteCommand>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e4       	ldi	r27, 0x40	; 64
    193e:	8f a3       	std	Y+39, r24	; 0x27
    1940:	98 a7       	std	Y+40, r25	; 0x28
    1942:	a9 a7       	std	Y+41, r26	; 0x29
    1944:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	6f a1       	ldd	r22, Y+39	; 0x27
    1948:	78 a5       	ldd	r23, Y+40	; 0x28
    194a:	89 a5       	ldd	r24, Y+41	; 0x29
    194c:	9a a5       	ldd	r25, Y+42	; 0x2a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a e7       	ldi	r20, 0x7A	; 122
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8b a3       	std	Y+35, r24	; 0x23
    1960:	9c a3       	std	Y+36, r25	; 0x24
    1962:	ad a3       	std	Y+37, r26	; 0x25
    1964:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_vInitialize+0x176>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9a a3       	std	Y+34, r25	; 0x22
    1984:	89 a3       	std	Y+33, r24	; 0x21
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <LCD_vInitialize+0x1f4>
	else if (__tmp > 65535)
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <LCD_vInitialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	6f a1       	ldd	r22, Y+39	; 0x27
    19a2:	78 a5       	ldd	r23, Y+40	; 0x28
    19a4:	89 a5       	ldd	r24, Y+41	; 0x29
    19a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <LCD_vInitialize+0x1d6>
    19ca:	89 e1       	ldi	r24, 0x19	; 25
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	98 a3       	std	Y+32, r25	; 0x20
    19d0:	8f 8f       	std	Y+31, r24	; 0x1f
    19d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d4:	98 a1       	ldd	r25, Y+32	; 0x20
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_vInitialize+0x1c4>
    19da:	98 a3       	std	Y+32, r25	; 0x20
    19dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	89 a1       	ldd	r24, Y+33	; 0x21
    19e0:	9a a1       	ldd	r25, Y+34	; 0x22
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	9a a3       	std	Y+34, r25	; 0x22
    19e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	69 f7       	brne	.-38     	; 0x19ca <LCD_vInitialize+0x1b8>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <LCD_vInitialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	8d a1       	ldd	r24, Y+37	; 0x25
    19f8:	9e a1       	ldd	r25, Y+38	; 0x26
    19fa:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
    1a06:	89 a1       	ldd	r24, Y+33	; 0x21
    1a08:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_vInitialize+0x200>
    1a16:	9e 8f       	std	Y+30, r25	; 0x1e
    1a18:	8d 8f       	std	Y+29, r24	; 0x1d
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 1100
	LCD_vWriteCommand(0b00001100);
    1a1a:	8c e0       	ldi	r24, 0x0C	; 12
    1a1c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_vWriteCommand>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e4       	ldi	r27, 0x40	; 64
    1a28:	89 8f       	std	Y+25, r24	; 0x19
    1a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a e7       	ldi	r20, 0x7A	; 122
    1a3e:	53 e4       	ldi	r21, 0x43	; 67
    1a40:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8d 8b       	std	Y+21, r24	; 0x15
    1a4a:	9e 8b       	std	Y+22, r25	; 0x16
    1a4c:	af 8b       	std	Y+23, r26	; 0x17
    1a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <LCD_vInitialize+0x260>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <LCD_vInitialize+0x2de>
	else if (__tmp > 65535)
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <LCD_vInitialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <LCD_vInitialize+0x2c0>
    1ab4:	89 e1       	ldi	r24, 0x19	; 25
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a 8b       	std	Y+18, r25	; 0x12
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	89 89       	ldd	r24, Y+17	; 0x11
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_vInitialize+0x2ae>
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <LCD_vInitialize+0x2a2>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <LCD_vInitialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	98 8b       	std	Y+16, r25	; 0x10
    1af6:	8f 87       	std	Y+15, r24	; 0x0f
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 89       	ldd	r25, Y+16	; 0x10
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_vInitialize+0x2ea>
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 0001
	LCD_vWriteCommand(0b00000001);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_vWriteCommand>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e4       	ldi	r27, 0x40	; 64
    1b12:	8b 87       	std	Y+11, r24	; 0x0b
    1b14:	9c 87       	std	Y+12, r25	; 0x0c
    1b16:	ad 87       	std	Y+13, r26	; 0x0d
    1b18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a e7       	ldi	r20, 0x7A	; 122
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8f 83       	std	Y+7, r24	; 0x07
    1b34:	98 87       	std	Y+8, r25	; 0x08
    1b36:	a9 87       	std	Y+9, r26	; 0x09
    1b38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_vInitialize+0x34a>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <LCD_vInitialize+0x3c8>
	else if (__tmp > 65535)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <LCD_vInitialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <LCD_vInitialize+0x3aa>
    1b9e:	89 e1       	ldi	r24, 0x19	; 25
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_vInitialize+0x398>
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <LCD_vInitialize+0x38c>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <LCD_vInitialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_vInitialize+0x3d4>
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
	//delay 2 ms
	_delay_ms(2);
}
    1bee:	e8 96       	adiw	r28, 0x38	; 56
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <gotoXY>:

void gotoXY(u8 X,u8 Y)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <gotoXY+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <gotoXY+0x8>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(X)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3d 83       	std	Y+5, r19	; 0x05
    1c1a:	2c 83       	std	Y+4, r18	; 0x04
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <gotoXY+0x30>
    1c24:	2c 81       	ldd	r18, Y+4	; 0x04
    1c26:	3d 81       	ldd	r19, Y+5	; 0x05
    1c28:	21 30       	cpi	r18, 0x01	; 1
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <gotoXY+0x36>
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <gotoXY+0x3c>
	{
	case 0:
		Address=Y;
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <gotoXY+0x3c>
		break;
	case 1:
		Address =Y+(0x40);
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	80 5c       	subi	r24, 0xC0	; 192
    1c3a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	setbit(Address,7);
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vWriteCommand(Address);
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_vWriteCommand>
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <LCD_vWriteString>:

void LCD_vWriteString(u8 copy_u8Chararr[])
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	63 97       	sbiw	r28, 0x13	; 19
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	9b 8b       	std	Y+19, r25	; 0x13
    1c6e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 lenght;
	lenght=strlen(copy_u8Chararr);
    1c70:	8a 89       	ldd	r24, Y+18	; 0x12
    1c72:	9b 89       	ldd	r25, Y+19	; 0x13
    1c74:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strlen>
    1c78:	89 8b       	std	Y+17, r24	; 0x11

	for(int i=0 ; i<lenght ;i++)
    1c7a:	18 8a       	std	Y+16, r1	; 0x10
    1c7c:	1f 86       	std	Y+15, r1	; 0x0f
    1c7e:	81 c0       	rjmp	.+258    	; 0x1d82 <LCD_vWriteString+0x12a>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
    1c80:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c82:	38 89       	ldd	r19, Y+16	; 0x10
    1c84:	8a 89       	ldd	r24, Y+18	; 0x12
    1c86:	9b 89       	ldd	r25, Y+19	; 0x13
    1c88:	fc 01       	movw	r30, r24
    1c8a:	e2 0f       	add	r30, r18
    1c8c:	f3 1f       	adc	r31, r19
    1c8e:	80 81       	ld	r24, Z
    1c90:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_vWriteChar>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a8 e4       	ldi	r26, 0x48	; 72
    1c9a:	b2 e4       	ldi	r27, 0x42	; 66
    1c9c:	8b 87       	std	Y+11, r24	; 0x0b
    1c9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ca0:	ad 87       	std	Y+13, r26	; 0x0d
    1ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a e7       	ldi	r20, 0x7A	; 122
    1cb2:	53 e4       	ldi	r21, 0x43	; 67
    1cb4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
    1cbe:	98 87       	std	Y+8, r25	; 0x08
    1cc0:	a9 87       	std	Y+9, r26	; 0x09
    1cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <LCD_vWriteString+0x8e>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <LCD_vWriteString+0x10c>
	else if (__tmp > 65535)
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <LCD_vWriteString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_vWriteString+0xee>
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_vWriteString+0xdc>
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_vWriteString+0xd0>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <LCD_vWriteString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_vWriteString+0x118>
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
void LCD_vWriteString(u8 copy_u8Chararr[])
{
	u8 lenght;
	lenght=strlen(copy_u8Chararr);

	for(int i=0 ; i<lenght ;i++)
    1d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7a:	98 89       	ldd	r25, Y+16	; 0x10
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
    1d82:	89 89       	ldd	r24, Y+17	; 0x11
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	98 89       	ldd	r25, Y+16	; 0x10
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	0c f4       	brge	.+2      	; 0x1d94 <LCD_vWriteString+0x13c>
    1d92:	76 cf       	rjmp	.-276    	; 0x1c80 <LCD_vWriteString+0x28>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
		_delay_ms(50);
	}
}
    1d94:	63 96       	adiw	r28, 0x13	; 19
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <i2c_initSlave>:
 */

#include <avr/io.h>
#include "slave.h"
void i2c_initSlave(unsigned char slaveAddress)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
	TWCR = 0x04;
    1db2:	ec eb       	ldi	r30, 0xBC	; 188
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	80 83       	st	Z, r24
	TWAR = slaveAddress;
    1dba:	ea eb       	ldi	r30, 0xBA	; 186
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1dc2:	ec eb       	ldi	r30, 0xBC	; 188
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	84 ec       	ldi	r24, 0xC4	; 196
    1dc8:	80 83       	st	Z, r24

}
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <i2c_receive>:

unsigned char i2c_receive(unsigned char islast)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	if (islast ==0)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 23       	and	r24, r24
    1de2:	29 f4       	brne	.+10     	; 0x1dee <i2c_receive+0x1c>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1de4:	ec eb       	ldi	r30, 0xBC	; 188
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	84 ec       	ldi	r24, 0xC4	; 196
    1dea:	80 83       	st	Z, r24
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <i2c_receive+0x24>
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
    1dee:	ec eb       	ldi	r30, 0xBC	; 188
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	84 e8       	ldi	r24, 0x84	; 132
    1df4:	80 83       	st	Z, r24

	while((TWCR & (1<<TWINT))==0);
    1df6:	ec eb       	ldi	r30, 0xBC	; 188
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 23       	and	r24, r24
    1dfe:	dc f7       	brge	.-10     	; 0x1df6 <i2c_receive+0x24>

	return (TWDR);
    1e00:	eb eb       	ldi	r30, 0xBB	; 187
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
}
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <i2c_listen>:

void i2c_listen()
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	while((TWCR & (1<<TWINT))==0);
    1e16:	ec eb       	ldi	r30, 0xBC	; 188
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	dc f7       	brge	.-10     	; 0x1e16 <i2c_listen+0x8>
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <main>:
#include "../_standard/calcbit.h"
#include <avr/delay.h>
#include "slave.h"

void main(void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	unsigned char res='n';
    1e30:	8e e6       	ldi	r24, 0x6E	; 110
    1e32:	89 83       	std	Y+1, r24	; 0x01

	DIO_vSetPinDirec(DIO_PORTB,0,DIO_OUTPUT);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,1,DIO_OUTPUT);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,2,DIO_OUTPUT);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>

	DIO_vSetPinDirec(DIO_PORTD,0,DIO_OUTPUT);
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,1,DIO_OUTPUT);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,2,DIO_OUTPUT);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,3,DIO_OUTPUT);
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	63 e0       	ldi	r22, 0x03	; 3
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,4,DIO_OUTPUT);
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	64 e0       	ldi	r22, 0x04	; 4
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,5,DIO_OUTPUT);
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	65 e0       	ldi	r22, 0x05	; 5
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTD,6,DIO_OUTPUT);
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	66 e0       	ldi	r22, 0x06	; 6
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_vSetPinDirec>

	LCD_vInitialize();
    1e98:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_vInitialize>
	LCD_vWriteChar(res);
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_vWriteChar>
	i2c_initSlave(0x10);
    1ea2:	80 e1       	ldi	r24, 0x10	; 16
    1ea4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <i2c_initSlave>
	i2c_listen();
    1ea8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <i2c_listen>
	res = i2c_receive(1);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <i2c_receive>
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	LCD_vWriteChar(res);
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_vWriteChar>
	res = i2c_receive(1);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <i2c_receive>
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	LCD_vWriteChar(res);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_vWriteChar>
	res = i2c_receive(1);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <i2c_receive>
    1ece:	89 83       	std	Y+1, r24	; 0x01
	LCD_vWriteChar(res);
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	0e 94 6f 0b 	call	0x16de	; 0x16de <LCD_vWriteChar>
    1ed6:	ff cf       	rjmp	.-2      	; 0x1ed6 <main+0xb0>

00001ed8 <__prologue_saves__>:
    1ed8:	2f 92       	push	r2
    1eda:	3f 92       	push	r3
    1edc:	4f 92       	push	r4
    1ede:	5f 92       	push	r5
    1ee0:	6f 92       	push	r6
    1ee2:	7f 92       	push	r7
    1ee4:	8f 92       	push	r8
    1ee6:	9f 92       	push	r9
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	ca 1b       	sub	r28, r26
    1f02:	db 0b       	sbc	r29, r27
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	09 94       	ijmp

00001f10 <__epilogue_restores__>:
    1f10:	2a 88       	ldd	r2, Y+18	; 0x12
    1f12:	39 88       	ldd	r3, Y+17	; 0x11
    1f14:	48 88       	ldd	r4, Y+16	; 0x10
    1f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f22:	b9 84       	ldd	r11, Y+9	; 0x09
    1f24:	c8 84       	ldd	r12, Y+8	; 0x08
    1f26:	df 80       	ldd	r13, Y+7	; 0x07
    1f28:	ee 80       	ldd	r14, Y+6	; 0x06
    1f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f30:	aa 81       	ldd	r26, Y+2	; 0x02
    1f32:	b9 81       	ldd	r27, Y+1	; 0x01
    1f34:	ce 0f       	add	r28, r30
    1f36:	d1 1d       	adc	r29, r1
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	ed 01       	movw	r28, r26
    1f44:	08 95       	ret

00001f46 <strlen>:
    1f46:	fc 01       	movw	r30, r24
    1f48:	01 90       	ld	r0, Z+
    1f4a:	00 20       	and	r0, r0
    1f4c:	e9 f7       	brne	.-6      	; 0x1f48 <strlen+0x2>
    1f4e:	80 95       	com	r24
    1f50:	90 95       	com	r25
    1f52:	8e 0f       	add	r24, r30
    1f54:	9f 1f       	adc	r25, r31
    1f56:	08 95       	ret

00001f58 <_exit>:
    1f58:	f8 94       	cli

00001f5a <__stop_program>:
    1f5a:	ff cf       	rjmp	.-2      	; 0x1f5a <__stop_program>
