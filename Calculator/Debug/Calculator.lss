
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000240c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000240c  000024a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  000024b8  2**0
                  ALLOC
  3 .stab         00001a1c  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aef  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000068bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000077a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000086b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008941  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000910f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <main>
      8a:	0c 94 04 12 	jmp	0x2408	; 0x2408 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vSetPin>:
 * Input: Port number , pin number
 * Output:
 * 1
 */
void DIO_vSetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vSetPin+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vSetPin+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	49 f1       	breq	.+82     	; 0xbbc <DIO_vSetPin+0x76>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <DIO_vSetPin+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <DIO_vSetPin+0x4e>
     b7c:	5a c0       	rjmp	.+180    	; 0xc32 <DIO_vSetPin+0xec>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	71 f1       	breq	.+92     	; 0xbe4 <DIO_vSetPin+0x9e>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	e9 f1       	breq	.+122    	; 0xc0c <DIO_vSetPin+0xc6>
     b92:	4f c0       	rjmp	.+158    	; 0xc32 <DIO_vSetPin+0xec>
	{
	case  DIO_PORTA:
		setbit(PORTA,Copy_u8PinNumber);
     b94:	ab e3       	ldi	r26, 0x3B	; 59
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	eb e3       	ldi	r30, 0x3B	; 59
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_vSetPin+0x6c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_vSetPin+0x68>
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	3b c0       	rjmp	.+118    	; 0xc32 <DIO_vSetPin+0xec>
		break;
	case  DIO_PORTB:
			setbit(PORTB,Copy_u8PinNumber);
     bbc:	a8 e3       	ldi	r26, 0x38	; 56
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e8 e3       	ldi	r30, 0x38	; 56
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_vSetPin+0x94>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_vSetPin+0x90>
     bde:	84 2b       	or	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	27 c0       	rjmp	.+78     	; 0xc32 <DIO_vSetPin+0xec>
			break;
	case  DIO_PORTC:
				setbit(PORTC,Copy_u8PinNumber);
     be4:	a5 e3       	ldi	r26, 0x35	; 53
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e5 e3       	ldi	r30, 0x35	; 53
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_vSetPin+0xbc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_vSetPin+0xb8>
     c06:	84 2b       	or	r24, r20
     c08:	8c 93       	st	X, r24
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <DIO_vSetPin+0xec>
				break;
	case  DIO_PORTD:
				setbit(PORTD,Copy_u8PinNumber);
     c0c:	a2 e3       	ldi	r26, 0x32	; 50
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e2 e3       	ldi	r30, 0x32	; 50
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_vSetPin+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_vSetPin+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
				break;
	}
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <DIO_vClearPin>:
 * Input: Port number , pin number
 * Output:
 * 2
 */
void DIO_vClearPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <DIO_vClearPin+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <DIO_vClearPin+0x8>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3c 83       	std	Y+4, r19	; 0x04
     c58:	2b 83       	std	Y+3, r18	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	59 f1       	breq	.+86     	; 0xcba <DIO_vClearPin+0x7a>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_vClearPin+0x38>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	69 f0       	breq	.+26     	; 0xc90 <DIO_vClearPin+0x50>
     c76:	5f c0       	rjmp	.+190    	; 0xd36 <DIO_vClearPin+0xf6>
     c78:	2b 81       	ldd	r18, Y+3	; 0x03
     c7a:	3c 81       	ldd	r19, Y+4	; 0x04
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	89 f1       	breq	.+98     	; 0xce4 <DIO_vClearPin+0xa4>
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <DIO_vClearPin+0x4e>
     c8c:	40 c0       	rjmp	.+128    	; 0xd0e <DIO_vClearPin+0xce>
     c8e:	53 c0       	rjmp	.+166    	; 0xd36 <DIO_vClearPin+0xf6>
	{
	case  DIO_PORTA:
		clearbit(PORTA,Copy_u8PinNumber);
     c90:	ab e3       	ldi	r26, 0x3B	; 59
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e3       	ldi	r30, 0x3B	; 59
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_vClearPin+0x6e>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_vClearPin+0x6a>
     cb2:	80 95       	com	r24
     cb4:	84 23       	and	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	3e c0       	rjmp	.+124    	; 0xd36 <DIO_vClearPin+0xf6>
		break;
	case  DIO_PORTB:
		clearbit(PORTB,Copy_u8PinNumber);
     cba:	a8 e3       	ldi	r26, 0x38	; 56
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e3       	ldi	r30, 0x38	; 56
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_vClearPin+0x98>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_vClearPin+0x94>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	29 c0       	rjmp	.+82     	; 0xd36 <DIO_vClearPin+0xf6>
			break;
	case  DIO_PORTC:
		clearbit(PORTC,Copy_u8PinNumber);
     ce4:	a5 e3       	ldi	r26, 0x35	; 53
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e5 e3       	ldi	r30, 0x35	; 53
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_vClearPin+0xc2>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_vClearPin+0xbe>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <DIO_vClearPin+0xf6>
				break;
	case  DIO_PORTD:
		clearbit(PORTD,Copy_u8PinNumber);
     d0e:	a2 e3       	ldi	r26, 0x32	; 50
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e2 e3       	ldi	r30, 0x32	; 50
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vClearPin+0xec>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vClearPin+0xe8>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
				break;
	}
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DIO_vTogglePin>:
 * Input: Port number , pin number
 * Output:
 * 3
 */
void DIO_vTogglePin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <DIO_vTogglePin+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_vTogglePin+0x8>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3c 83       	std	Y+4, r19	; 0x04
     d5c:	2b 83       	std	Y+3, r18	; 0x03
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 05       	cpc	r25, r1
     d66:	49 f1       	breq	.+82     	; 0xdba <DIO_vTogglePin+0x76>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	2c f4       	brge	.+10     	; 0xd7c <DIO_vTogglePin+0x38>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	61 f0       	breq	.+24     	; 0xd92 <DIO_vTogglePin+0x4e>
     d7a:	5a c0       	rjmp	.+180    	; 0xe30 <DIO_vTogglePin+0xec>
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	71 f1       	breq	.+92     	; 0xde2 <DIO_vTogglePin+0x9e>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	91 05       	cpc	r25, r1
     d8e:	e9 f1       	breq	.+122    	; 0xe0a <DIO_vTogglePin+0xc6>
     d90:	4f c0       	rjmp	.+158    	; 0xe30 <DIO_vTogglePin+0xec>
	{
	case  DIO_PORTA:
		togglebit(PORTA,Copy_u8PinNumber);
     d92:	ab e3       	ldi	r26, 0x3B	; 59
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_vTogglePin+0x6c>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_vTogglePin+0x68>
     db4:	84 27       	eor	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	3b c0       	rjmp	.+118    	; 0xe30 <DIO_vTogglePin+0xec>
		break;
	case  DIO_PORTB:
		togglebit(PORTB,Copy_u8PinNumber);
     dba:	a8 e3       	ldi	r26, 0x38	; 56
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 e3       	ldi	r30, 0x38	; 56
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_vTogglePin+0x94>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_vTogglePin+0x90>
     ddc:	84 27       	eor	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	27 c0       	rjmp	.+78     	; 0xe30 <DIO_vTogglePin+0xec>
			break;
	case  DIO_PORTC:
		togglebit(PORTC,Copy_u8PinNumber);
     de2:	a5 e3       	ldi	r26, 0x35	; 53
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e3       	ldi	r30, 0x35	; 53
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_vTogglePin+0xbc>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_vTogglePin+0xb8>
     e04:	84 27       	eor	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <DIO_vTogglePin+0xec>
				break;
	case  DIO_PORTD:
		togglebit(PORTD,Copy_u8PinNumber);
     e0a:	a2 e3       	ldi	r26, 0x32	; 50
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e2 e3       	ldi	r30, 0x32	; 50
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_vTogglePin+0xe4>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_vTogglePin+0xe0>
     e2c:	84 27       	eor	r24, r20
     e2e:	8c 93       	st	X, r24
				break;
	}
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <DIO_vGetPin>:
 * Input: Port number , pin number
 * Output:return number of pin whether 0 or 1
 * 4
 */
u8 DIO_vGetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_vGetPin+0x6>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_vGetPin+0x8>
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret;
	switch(Copy_u8PORTNumber)
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3d 83       	std	Y+5, r19	; 0x05
     e58:	2c 83       	std	Y+4, r18	; 0x04
     e5a:	4c 81       	ldd	r20, Y+4	; 0x04
     e5c:	5d 81       	ldd	r21, Y+5	; 0x05
     e5e:	41 30       	cpi	r20, 0x01	; 1
     e60:	51 05       	cpc	r21, r1
     e62:	b1 f1       	breq	.+108    	; 0xed0 <DIO_vGetPin+0x92>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	91 05       	cpc	r25, r1
     e6c:	34 f4       	brge	.+12     	; 0xe7a <DIO_vGetPin+0x3c>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	71 f0       	breq	.+28     	; 0xe94 <DIO_vGetPin+0x56>
     e78:	84 c0       	rjmp	.+264    	; 0xf82 <DIO_vGetPin+0x144>
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	42 30       	cpi	r20, 0x02	; 2
     e80:	51 05       	cpc	r21, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_vGetPin+0x48>
     e84:	43 c0       	rjmp	.+134    	; 0xf0c <DIO_vGetPin+0xce>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_vGetPin+0x54>
     e90:	5b c0       	rjmp	.+182    	; 0xf48 <DIO_vGetPin+0x10a>
     e92:	77 c0       	rjmp	.+238    	; 0xf82 <DIO_vGetPin+0x144>
	{
	case  DIO_PORTA:
		ret= getbit(PINA,Copy_u8PinNumber);
     e94:	e9 e3       	ldi	r30, 0x39	; 57
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_vGetPin+0x70>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	2a 95       	dec	r18
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_vGetPin+0x6c>
     eb2:	9a 01       	movw	r18, r20
     eb4:	28 23       	and	r18, r24
     eb6:	39 23       	and	r19, r25
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a9 01       	movw	r20, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_vGetPin+0x88>
     ec2:	55 95       	asr	r21
     ec4:	47 95       	ror	r20
     ec6:	8a 95       	dec	r24
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_vGetPin+0x84>
     eca:	ca 01       	movw	r24, r20
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	59 c0       	rjmp	.+178    	; 0xf82 <DIO_vGetPin+0x144>

		break;
	case  DIO_PORTB:
		ret= getbit(PINB,Copy_u8PinNumber);
     ed0:	e6 e3       	ldi	r30, 0x36	; 54
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_vGetPin+0xac>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	2a 95       	dec	r18
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_vGetPin+0xa8>
     eee:	9a 01       	movw	r18, r20
     ef0:	28 23       	and	r18, r24
     ef2:	39 23       	and	r19, r25
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_vGetPin+0xc4>
     efe:	55 95       	asr	r21
     f00:	47 95       	ror	r20
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_vGetPin+0xc0>
     f06:	ca 01       	movw	r24, r20
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	3b c0       	rjmp	.+118    	; 0xf82 <DIO_vGetPin+0x144>
			break;
	case  DIO_PORTC:
		ret= getbit(PINC,Copy_u8PinNumber);
     f0c:	e3 e3       	ldi	r30, 0x33	; 51
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_vGetPin+0xe8>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_vGetPin+0xe4>
     f2a:	9a 01       	movw	r18, r20
     f2c:	28 23       	and	r18, r24
     f2e:	39 23       	and	r19, r25
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a9 01       	movw	r20, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_vGetPin+0x100>
     f3a:	55 95       	asr	r21
     f3c:	47 95       	ror	r20
     f3e:	8a 95       	dec	r24
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_vGetPin+0xfc>
     f42:	ca 01       	movw	r24, r20
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <DIO_vGetPin+0x144>
				break;
	case  DIO_PORTD:
		ret= getbit(PIND,Copy_u8PinNumber);
     f48:	e0 e3       	ldi	r30, 0x30	; 48
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_vGetPin+0x124>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	2a 95       	dec	r18
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_vGetPin+0x120>
     f66:	9a 01       	movw	r18, r20
     f68:	28 23       	and	r18, r24
     f6a:	39 23       	and	r19, r25
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a9 01       	movw	r20, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_vGetPin+0x13c>
     f76:	55 95       	asr	r21
     f78:	47 95       	ror	r20
     f7a:	8a 95       	dec	r24
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_vGetPin+0x138>
     f7e:	ca 01       	movw	r24, r20
     f80:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return ret;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <DIO_vSetPort>:
 * Input: Port number
 * Output:
 * 5
 */
void DIO_vSetPort(u8 Copy_u8PORTNumber)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_vSetPort+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3b 83       	std	Y+3, r19	; 0x03
     faa:	2a 83       	std	Y+2, r18	; 0x02
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	91 05       	cpc	r25, r1
     fb4:	d1 f0       	breq	.+52     	; 0xfea <DIO_vSetPort+0x56>
     fb6:	2a 81       	ldd	r18, Y+2	; 0x02
     fb8:	3b 81       	ldd	r19, Y+3	; 0x03
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	2c f4       	brge	.+10     	; 0xfca <DIO_vSetPort+0x36>
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <DIO_vSetPort+0x4c>
     fc8:	1e c0       	rjmp	.+60     	; 0x1006 <DIO_vSetPort+0x72>
     fca:	2a 81       	ldd	r18, Y+2	; 0x02
     fcc:	3b 81       	ldd	r19, Y+3	; 0x03
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	81 f0       	breq	.+32     	; 0xff4 <DIO_vSetPort+0x60>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	81 f0       	breq	.+32     	; 0xffe <DIO_vSetPort+0x6a>
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <DIO_vSetPort+0x72>
	{
	case  DIO_PORTA:
		PORTA=0b11111111;
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 83       	st	Z, r24
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTB:
		PORTB=0b11111111;
     fea:	e8 e3       	ldi	r30, 0x38	; 56
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTC:
		PORTC=0b11111111;
     ff4:	e5 e3       	ldi	r30, 0x35	; 53
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 83       	st	Z, r24
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTD:
		PORTD=0b11111111;
     ffe:	e2 e3       	ldi	r30, 0x32	; 50
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	80 83       	st	Z, r24
		break;
	}
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_vClearPort>:
 * Input: Port number
 * Output:
 * 6
 */
void DIO_vClearPort(u8 Copy_u8PORTNumber)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_vClearPort+0x6>
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3b 83       	std	Y+3, r19	; 0x03
    1028:	2a 83       	std	Y+2, r18	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	c9 f0       	breq	.+50     	; 0x1066 <DIO_vClearPort+0x54>
    1034:	2a 81       	ldd	r18, Y+2	; 0x02
    1036:	3b 81       	ldd	r19, Y+3	; 0x03
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <DIO_vClearPort+0x36>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <DIO_vClearPort+0x4c>
    1046:	1a c0       	rjmp	.+52     	; 0x107c <DIO_vClearPort+0x6a>
    1048:	2a 81       	ldd	r18, Y+2	; 0x02
    104a:	3b 81       	ldd	r19, Y+3	; 0x03
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	71 f0       	breq	.+28     	; 0x106e <DIO_vClearPort+0x5c>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	69 f0       	breq	.+26     	; 0x1076 <DIO_vClearPort+0x64>
    105c:	0f c0       	rjmp	.+30     	; 0x107c <DIO_vClearPort+0x6a>
	{
	case  DIO_PORTA:
		PORTA=0b00000000;
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	10 82       	st	Z, r1
    1064:	0b c0       	rjmp	.+22     	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTB:
		PORTB=0b00000000;
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	10 82       	st	Z, r1
    106c:	07 c0       	rjmp	.+14     	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTC:
		PORTC=0b00000000;
    106e:	e5 e3       	ldi	r30, 0x35	; 53
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	10 82       	st	Z, r1
    1074:	03 c0       	rjmp	.+6      	; 0x107c <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTD:
		PORTD=0b00000000;
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	10 82       	st	Z, r1
		break;
	}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_vSetPinDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 7
 */
void DIO_vSetPinDirec(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber,u8 Copy_u8Direc)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2d 97       	sbiw	r28, 0x0d	; 13
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6a 83       	std	Y+2, r22	; 0x02
    10a0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORTNumber)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 87       	std	Y+13, r19	; 0x0d
    10aa:	2c 87       	std	Y+12, r18	; 0x0c
    10ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <DIO_vSetPinDirec+0x30>
    10b6:	4f c0       	rjmp	.+158    	; 0x1156 <DIO_vSetPinDirec+0xce>
    10b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_vSetPinDirec+0x44>
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <DIO_vSetPinDirec+0x5e>
    10ca:	ec c0       	rjmp	.+472    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
    10cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <DIO_vSetPinDirec+0x50>
    10d6:	77 c0       	rjmp	.+238    	; 0x11c6 <DIO_vSetPinDirec+0x13e>
    10d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10da:	9d 85       	ldd	r25, Y+13	; 0x0d
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_vSetPinDirec+0x5c>
    10e2:	a9 c0       	rjmp	.+338    	; 0x1236 <DIO_vSetPinDirec+0x1ae>
    10e4:	df c0       	rjmp	.+446    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3b 87       	std	Y+11, r19	; 0x0b
    10ee:	2a 87       	std	Y+10, r18	; 0x0a
    10f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	31 f0       	breq	.+12     	; 0x1104 <DIO_vSetPinDirec+0x7c>
    10f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	31 05       	cpc	r19, r1
    1100:	b1 f0       	breq	.+44     	; 0x112e <DIO_vSetPinDirec+0xa6>
    1102:	d0 c0       	rjmp	.+416    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
			{
			case DIO_INPUT:
				clearbit(DDRA,Copy_u8PinNumber);
    1104:	aa e3       	ldi	r26, 0x3A	; 58
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ea e3       	ldi	r30, 0x3A	; 58
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_vSetPinDirec+0x9a>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_vSetPinDirec+0x96>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	bb c0       	rjmp	.+374    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,Copy_u8PinNumber);
    112e:	aa e3       	ldi	r26, 0x3A	; 58
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ea e3       	ldi	r30, 0x3A	; 58
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_vSetPinDirec+0xc4>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_vSetPinDirec+0xc0>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	a7 c0       	rjmp	.+334    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	39 87       	std	Y+9, r19	; 0x09
    115e:	28 87       	std	Y+8, r18	; 0x08
    1160:	88 85       	ldd	r24, Y+8	; 0x08
    1162:	99 85       	ldd	r25, Y+9	; 0x09
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	31 f0       	breq	.+12     	; 0x1174 <DIO_vSetPinDirec+0xec>
    1168:	28 85       	ldd	r18, Y+8	; 0x08
    116a:	39 85       	ldd	r19, Y+9	; 0x09
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	b1 f0       	breq	.+44     	; 0x119e <DIO_vSetPinDirec+0x116>
    1172:	98 c0       	rjmp	.+304    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRB,Copy_u8PinNumber);
    1174:	a7 e3       	ldi	r26, 0x37	; 55
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_vSetPinDirec+0x10a>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_vSetPinDirec+0x106>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	83 c0       	rjmp	.+262    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,Copy_u8PinNumber);
    119e:	a7 e3       	ldi	r26, 0x37	; 55
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e7 e3       	ldi	r30, 0x37	; 55
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_vSetPinDirec+0x134>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_vSetPinDirec+0x130>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	6f c0       	rjmp	.+222    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <DIO_vSetPinDirec+0x15c>
    11d8:	2e 81       	ldd	r18, Y+6	; 0x06
    11da:	3f 81       	ldd	r19, Y+7	; 0x07
    11dc:	21 30       	cpi	r18, 0x01	; 1
    11de:	31 05       	cpc	r19, r1
    11e0:	b1 f0       	breq	.+44     	; 0x120e <DIO_vSetPinDirec+0x186>
    11e2:	60 c0       	rjmp	.+192    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRC,Copy_u8PinNumber);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_vSetPinDirec+0x17a>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_vSetPinDirec+0x176>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	4b c0       	rjmp	.+150    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,Copy_u8PinNumber);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_vSetPinDirec+0x1a4>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_vSetPinDirec+0x1a0>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	37 c0       	rjmp	.+110    	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	31 f0       	breq	.+12     	; 0x1254 <DIO_vSetPinDirec+0x1cc>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	21 30       	cpi	r18, 0x01	; 1
    124e:	31 05       	cpc	r19, r1
    1250:	b1 f0       	breq	.+44     	; 0x127e <DIO_vSetPinDirec+0x1f6>
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRD,Copy_u8PinNumber);
    1254:	a1 e3       	ldi	r26, 0x31	; 49
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e1 e3       	ldi	r30, 0x31	; 49
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_vSetPinDirec+0x1ea>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_vSetPinDirec+0x1e6>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,Copy_u8PinNumber);
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_vSetPinDirec+0x214>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_vSetPinDirec+0x210>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    12a4:	2d 96       	adiw	r28, 0x0d	; 13
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <DIO_vToggletPort>:
 * Input: Port number
 * Output:
 * 8
 */
void DIO_vToggletPort(u8 Copy_u8PORTNumber)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2b 97       	sbiw	r28, 0x0b	; 11
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	89 87       	std	Y+9, r24	; 0x09
	switch(Copy_u8PORTNumber)
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3b 87       	std	Y+11, r19	; 0x0b
    12d4:	2a 87       	std	Y+10, r18	; 0x0a
    12d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	a9 f1       	breq	.+106    	; 0x134a <DIO_vToggletPort+0x94>
    12e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    12e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_vToggletPort+0x3e>
    12ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	71 f0       	breq	.+28     	; 0x130e <DIO_vToggletPort+0x58>
    12f2:	84 c0       	rjmp	.+264    	; 0x13fc <DIO_vToggletPort+0x146>
    12f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <DIO_vToggletPort+0x4a>
    12fe:	43 c0       	rjmp	.+134    	; 0x1386 <DIO_vToggletPort+0xd0>
    1300:	8a 85       	ldd	r24, Y+10	; 0x0a
    1302:	9b 85       	ldd	r25, Y+11	; 0x0b
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <DIO_vToggletPort+0x56>
    130a:	5b c0       	rjmp	.+182    	; 0x13c2 <DIO_vToggletPort+0x10c>
    130c:	77 c0       	rjmp	.+238    	; 0x13fc <DIO_vToggletPort+0x146>
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    130e:	18 86       	std	Y+8, r1	; 0x08
    1310:	1f 82       	std	Y+7, r1	; 0x07
    1312:	15 c0       	rjmp	.+42     	; 0x133e <DIO_vToggletPort+0x88>
		{
			togglebit(PORTA , Pin_Counter) ;
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0f 80       	ldd	r0, Y+7	; 0x07
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_vToggletPort+0x76>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_vToggletPort+0x72>
    1330:	82 27       	eor	r24, r18
    1332:	8c 93       	st	X, r24
{
	switch(Copy_u8PORTNumber)
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	98 87       	std	Y+8, r25	; 0x08
    133c:	8f 83       	std	Y+7, r24	; 0x07
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	91 05       	cpc	r25, r1
    1346:	34 f3       	brlt	.-52     	; 0x1314 <DIO_vToggletPort+0x5e>
    1348:	59 c0       	rjmp	.+178    	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    134a:	1e 82       	std	Y+6, r1	; 0x06
    134c:	1d 82       	std	Y+5, r1	; 0x05
    134e:	15 c0       	rjmp	.+42     	; 0x137a <DIO_vToggletPort+0xc4>
		{
			togglebit(PORTB , Pin_Counter) ;
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0d 80       	ldd	r0, Y+5	; 0x05
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_vToggletPort+0xb2>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_vToggletPort+0xae>
    136c:	82 27       	eor	r24, r18
    136e:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	91 05       	cpc	r25, r1
    1382:	34 f3       	brlt	.-52     	; 0x1350 <DIO_vToggletPort+0x9a>
    1384:	3b c0       	rjmp	.+118    	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1386:	1c 82       	std	Y+4, r1	; 0x04
    1388:	1b 82       	std	Y+3, r1	; 0x03
    138a:	15 c0       	rjmp	.+42     	; 0x13b6 <DIO_vToggletPort+0x100>
		{
			togglebit(PORTC , Pin_Counter) ;
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0b 80       	ldd	r0, Y+3	; 0x03
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_vToggletPort+0xee>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_vToggletPort+0xea>
    13a8:	82 27       	eor	r24, r18
    13aa:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f3       	brlt	.-52     	; 0x138c <DIO_vToggletPort+0xd6>
    13c0:	1d c0       	rjmp	.+58     	; 0x13fc <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13c2:	1a 82       	std	Y+2, r1	; 0x02
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	15 c0       	rjmp	.+42     	; 0x13f2 <DIO_vToggletPort+0x13c>
		{
			togglebit(PORTD , Pin_Counter) ;
    13c8:	a2 e3       	ldi	r26, 0x32	; 50
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	09 80       	ldd	r0, Y+1	; 0x01
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_vToggletPort+0x12a>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_vToggletPort+0x126>
    13e4:	82 27       	eor	r24, r18
    13e6:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	91 05       	cpc	r25, r1
    13fa:	34 f3       	brlt	.-52     	; 0x13c8 <DIO_vToggletPort+0x112>
	}

	}


}
    13fc:	2b 96       	adiw	r28, 0x0b	; 11
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <DIO_vSetPortvalue>:
 * Input: Port number , command
 * Output:
 * 9
 */
void DIO_vSetPortvalue(u8 Copy_u8PORTNumber,u8 Copy_u8value)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_vSetPortvalue+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <DIO_vSetPortvalue+0x8>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	d1 f0       	breq	.+52     	; 0x1466 <DIO_vSetPortvalue+0x58>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_vSetPortvalue+0x38>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_vSetPortvalue+0x4e>
    1444:	1e c0       	rjmp	.+60     	; 0x1482 <DIO_vSetPortvalue+0x74>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <DIO_vSetPortvalue+0x62>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <DIO_vSetPortvalue+0x6c>
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_vSetPortvalue+0x74>
		{
		case DIO_PORTA:
			PORTA=Copy_u8value;
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8value;
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8value;
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8value;
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
			break;

		}
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <Keypad_u8ReadKey>:
 * input:
 * output:retrun number from 0 to 15
 */

u8 Keypad_u8ReadKey(void)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	69 97       	sbiw	r28, 0x19	; 25
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	u8 local_au8KeypadArr[4][4]={{1,4,7,'.'},{2,5,8,0},{3,6,9,'='},{'+','-','*','/'}};
    14a4:	ce 01       	movw	r24, r28
    14a6:	05 96       	adiw	r24, 0x05	; 5
    14a8:	9e 8b       	std	Y+22, r25	; 0x16
    14aa:	8d 8b       	std	Y+21, r24	; 0x15
    14ac:	e8 e6       	ldi	r30, 0x68	; 104
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	f8 8f       	std	Y+24, r31	; 0x18
    14b2:	ef 8b       	std	Y+23, r30	; 0x17
    14b4:	f0 e1       	ldi	r31, 0x10	; 16
    14b6:	f9 8f       	std	Y+25, r31	; 0x19
    14b8:	ef 89       	ldd	r30, Y+23	; 0x17
    14ba:	f8 8d       	ldd	r31, Y+24	; 0x18
    14bc:	00 80       	ld	r0, Z
    14be:	8f 89       	ldd	r24, Y+23	; 0x17
    14c0:	98 8d       	ldd	r25, Y+24	; 0x18
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	98 8f       	std	Y+24, r25	; 0x18
    14c6:	8f 8b       	std	Y+23, r24	; 0x17
    14c8:	ed 89       	ldd	r30, Y+21	; 0x15
    14ca:	fe 89       	ldd	r31, Y+22	; 0x16
    14cc:	00 82       	st	Z, r0
    14ce:	8d 89       	ldd	r24, Y+21	; 0x15
    14d0:	9e 89       	ldd	r25, Y+22	; 0x16
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	9e 8b       	std	Y+22, r25	; 0x16
    14d6:	8d 8b       	std	Y+21, r24	; 0x15
    14d8:	99 8d       	ldd	r25, Y+25	; 0x19
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	99 8f       	std	Y+25, r25	; 0x19
    14de:	e9 8d       	ldd	r30, Y+25	; 0x19
    14e0:	ee 23       	and	r30, r30
    14e2:	51 f7       	brne	.-44     	; 0x14b8 <Keypad_u8ReadKey+0x28>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;
    14e4:	84 e6       	ldi	r24, 0x64	; 100
    14e6:	89 83       	std	Y+1, r24	; 0x01

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    14e8:	1b 82       	std	Y+3, r1	; 0x03
    14ea:	45 c0       	rjmp	.+138    	; 0x1576 <Keypad_u8ReadKey+0xe6>
	{
		DIO_vSetPin(Colums_Port,0);
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,1);
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,2);
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(Colums_Port,3);
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>

		DIO_vClearPin(Colums_Port,local_u8Colum);
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	6b 81       	ldd	r22, Y+3	; 0x03
    1510:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	8c 83       	std	Y+4, r24	; 0x04
    1518:	28 c0       	rjmp	.+80     	; 0x156a <Keypad_u8ReadKey+0xda>
		{
			local_u8Read=DIO_vGetPin(Rows_Port,local_u8Row);
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	6c 81       	ldd	r22, Y+4	; 0x04
    151e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_vGetPin>
    1522:	8a 83       	std	Y+2, r24	; 0x02
			if(local_u8Read==0)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 23       	and	r24, r24
    1528:	e9 f4       	brne	.+58     	; 0x1564 <Keypad_u8ReadKey+0xd4>
			{
				local_u8RetrunValue= local_au8KeypadArr[local_u8Row-4][local_u8Colum];
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9c 01       	movw	r18, r24
    1532:	24 50       	subi	r18, 0x04	; 4
    1534:	30 40       	sbci	r19, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	48 2f       	mov	r20, r24
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	82 0f       	add	r24, r18
    154a:	93 1f       	adc	r25, r19
    154c:	84 0f       	add	r24, r20
    154e:	95 1f       	adc	r25, r21
    1550:	fc 01       	movw	r30, r24
    1552:	34 96       	adiw	r30, 0x04	; 4
    1554:	80 81       	ld	r24, Z
    1556:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_vGetPin(Rows_Port,local_u8Row)==0)
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	6c 81       	ldd	r22, Y+4	; 0x04
    155c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_vGetPin>
    1560:	88 23       	and	r24, r24
    1562:	d1 f3       	breq	.-12     	; 0x1558 <Keypad_u8ReadKey+0xc8>
		DIO_vSetPin(Colums_Port,2);
		DIO_vSetPin(Colums_Port,3);

		DIO_vClearPin(Colums_Port,local_u8Colum);

		for(local_u8Row =4 ; local_u8Row <8 ; local_u8Row ++)
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	8c 83       	std	Y+4, r24	; 0x04
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	a8 f2       	brcs	.-86     	; 0x151a <Keypad_u8ReadKey+0x8a>
	u8 local_u8Row;
	u8 local_u8Colum;
	u8 local_u8Read;
	u8 local_u8RetrunValue =100;

	for(local_u8Colum =0 ; local_u8Colum <4 ; local_u8Colum ++)
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	08 f4       	brcc	.+2      	; 0x157e <Keypad_u8ReadKey+0xee>
    157c:	b7 cf       	rjmp	.-146    	; 0x14ec <Keypad_u8ReadKey+0x5c>
				//nothing
			}
		}

	}
	return local_u8RetrunValue;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	69 96       	adiw	r28, 0x19	; 25
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <LCD_vWriteCommand>:
#include <avr/delay.h>



void LCD_vWriteCommand(u8 copy_u8command)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2f 97       	sbiw	r28, 0x0f	; 15
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RSPin);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	// RW control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RWPin);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(DIO_PORTB,copy_u8command);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    15bc:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_vSetPortvalue>
	//enable ->1
	DIO_vSetPin(DIO_PORTA,LCD_EnablePin);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e0       	ldi	r26, 0x00	; 0
    15ce:	b0 e4       	ldi	r27, 0x40	; 64
    15d0:	8b 87       	std	Y+11, r24	; 0x0b
    15d2:	9c 87       	std	Y+12, r25	; 0x0c
    15d4:	ad 87       	std	Y+13, r26	; 0x0d
    15d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15da:	7c 85       	ldd	r23, Y+12	; 0x0c
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a ef       	ldi	r20, 0xFA	; 250
    15e6:	54 e4       	ldi	r21, 0x44	; 68
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8f 83       	std	Y+7, r24	; 0x07
    15f2:	98 87       	std	Y+8, r25	; 0x08
    15f4:	a9 87       	std	Y+9, r26	; 0x09
    15f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <LCD_vWriteCommand+0x88>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <LCD_vWriteCommand+0x106>
	else if (__tmp > 65535)
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <LCD_vWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	0f c0       	rjmp	.+30     	; 0x167a <LCD_vWriteCommand+0xe8>
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_vWriteCommand+0xd6>
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <LCD_vWriteCommand+0xca>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <LCD_vWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_vWriteCommand+0x112>
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable ->0
	DIO_vClearPin(DIO_PORTA,LCD_EnablePin);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
}
    16b4:	2f 96       	adiw	r28, 0x0f	; 15
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <LCD_vWriteChar>:

void LCD_vWriteChar(u8 copy_u8Char)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	2f 97       	sbiw	r28, 0x0f	; 15
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 1
	DIO_vSetPin(DIO_PORTA,LCD_RSPin);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
	// RW control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RWPin);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(DIO_PORTB,copy_u8Char);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    16f0:	0e 94 07 0a 	call	0x140e	; 0x140e <DIO_vSetPortvalue>
	//enable
	DIO_vSetPin(DIO_PORTA,LCD_EnablePin);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	62 e0       	ldi	r22, 0x02	; 2
    16f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e4       	ldi	r27, 0x40	; 64
    1704:	8b 87       	std	Y+11, r24	; 0x0b
    1706:	9c 87       	std	Y+12, r25	; 0x0c
    1708:	ad 87       	std	Y+13, r26	; 0x0d
    170a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8f 83       	std	Y+7, r24	; 0x07
    1726:	98 87       	std	Y+8, r25	; 0x08
    1728:	a9 87       	std	Y+9, r26	; 0x09
    172a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <LCD_vWriteChar+0x88>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <LCD_vWriteChar+0x106>
	else if (__tmp > 65535)
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <LCD_vWriteChar+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_vWriteChar+0xe8>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_vWriteChar+0xd6>
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <LCD_vWriteChar+0xca>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <LCD_vWriteChar+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_vWriteChar+0x112>
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable
	DIO_vClearPin(DIO_PORTA,LCD_EnablePin);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_vClearPin>
}
    17e8:	2f 96       	adiw	r28, 0x0f	; 15
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <LCD_vInitialize>:

void LCD_vInitialize(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	e8 97       	sbiw	r28, 0x38	; 56
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	aa ef       	ldi	r26, 0xFA	; 250
    1814:	b3 e4       	ldi	r27, 0x43	; 67
    1816:	8d ab       	std	Y+53, r24	; 0x35
    1818:	9e ab       	std	Y+54, r25	; 0x36
    181a:	af ab       	std	Y+55, r26	; 0x37
    181c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6d a9       	ldd	r22, Y+53	; 0x35
    1820:	7e a9       	ldd	r23, Y+54	; 0x36
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a ef       	ldi	r20, 0xFA	; 250
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	89 ab       	std	Y+49, r24	; 0x31
    1838:	9a ab       	std	Y+50, r25	; 0x32
    183a:	ab ab       	std	Y+51, r26	; 0x33
    183c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    183e:	69 a9       	ldd	r22, Y+49	; 0x31
    1840:	7a a9       	ldd	r23, Y+50	; 0x32
    1842:	8b a9       	ldd	r24, Y+51	; 0x33
    1844:	9c a9       	ldd	r25, Y+52	; 0x34
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_vInitialize+0x66>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	98 ab       	std	Y+48, r25	; 0x30
    185c:	8f a7       	std	Y+47, r24	; 0x2f
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_vInitialize+0xe4>
	else if (__tmp > 65535)
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_vInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6d a9       	ldd	r22, Y+53	; 0x35
    187a:	7e a9       	ldd	r23, Y+54	; 0x36
    187c:	8f a9       	ldd	r24, Y+55	; 0x37
    187e:	98 ad       	ldd	r25, Y+56	; 0x38
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_vInitialize+0xc6>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
    18aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_vInitialize+0xb4>
    18b2:	9e a7       	std	Y+46, r25	; 0x2e
    18b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	98 ab       	std	Y+48, r25	; 0x30
    18be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c2:	98 a9       	ldd	r25, Y+48	; 0x30
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_vInitialize+0xa8>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_vInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	69 a9       	ldd	r22, Y+49	; 0x31
    18cc:	7a a9       	ldd	r23, Y+50	; 0x32
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e0:	98 a9       	ldd	r25, Y+48	; 0x30
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
    18e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_vInitialize+0xf0>
    18ee:	9c a7       	std	Y+44, r25	; 0x2c
    18f0:	8b a7       	std	Y+43, r24	; 0x2b
	//delay 500 ms
	_delay_ms(500);
	//writeCommand 0011 1000
	LCD_vWriteCommand(0b00111000);
    18f2:	88 e3       	ldi	r24, 0x38	; 56
    18f4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	8f a3       	std	Y+39, r24	; 0x27
    1902:	98 a7       	std	Y+40, r25	; 0x28
    1904:	a9 a7       	std	Y+41, r26	; 0x29
    1906:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6f a1       	ldd	r22, Y+39	; 0x27
    190a:	78 a5       	ldd	r23, Y+40	; 0x28
    190c:	89 a5       	ldd	r24, Y+41	; 0x29
    190e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8b a3       	std	Y+35, r24	; 0x23
    1922:	9c a3       	std	Y+36, r25	; 0x24
    1924:	ad a3       	std	Y+37, r26	; 0x25
    1926:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1928:	6b a1       	ldd	r22, Y+35	; 0x23
    192a:	7c a1       	ldd	r23, Y+36	; 0x24
    192c:	8d a1       	ldd	r24, Y+37	; 0x25
    192e:	9e a1       	ldd	r25, Y+38	; 0x26
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_vInitialize+0x150>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9a a3       	std	Y+34, r25	; 0x22
    1946:	89 a3       	std	Y+33, r24	; 0x21
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_vInitialize+0x1ce>
	else if (__tmp > 65535)
    194a:	6b a1       	ldd	r22, Y+35	; 0x23
    194c:	7c a1       	ldd	r23, Y+36	; 0x24
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_vInitialize+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6f a1       	ldd	r22, Y+39	; 0x27
    1964:	78 a5       	ldd	r23, Y+40	; 0x28
    1966:	89 a5       	ldd	r24, Y+41	; 0x29
    1968:	9a a5       	ldd	r25, Y+42	; 0x2a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_vInitialize+0x1b0>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	98 a3       	std	Y+32, r25	; 0x20
    1992:	8f 8f       	std	Y+31, r24	; 0x1f
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_vInitialize+0x19e>
    199c:	98 a3       	std	Y+32, r25	; 0x20
    199e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	89 a1       	ldd	r24, Y+33	; 0x21
    19a2:	9a a1       	ldd	r25, Y+34	; 0x22
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9a a3       	std	Y+34, r25	; 0x22
    19a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_vInitialize+0x192>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_vInitialize+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ca:	9a a1       	ldd	r25, Y+34	; 0x22
    19cc:	9e 8f       	std	Y+30, r25	; 0x1e
    19ce:	8d 8f       	std	Y+29, r24	; 0x1d
    19d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_vInitialize+0x1da>
    19d8:	9e 8f       	std	Y+30, r25	; 0x1e
    19da:	8d 8f       	std	Y+29, r24	; 0x1d
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 1100
	LCD_vWriteCommand(0b00001100);
    19dc:	8c e0       	ldi	r24, 0x0C	; 12
    19de:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e4       	ldi	r27, 0x40	; 64
    19ea:	89 8f       	std	Y+25, r24	; 0x19
    19ec:	9a 8f       	std	Y+26, r25	; 0x1a
    19ee:	ab 8f       	std	Y+27, r26	; 0x1b
    19f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	69 8d       	ldd	r22, Y+25	; 0x19
    19f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8d 8b       	std	Y+21, r24	; 0x15
    1a0c:	9e 8b       	std	Y+22, r25	; 0x16
    1a0e:	af 8b       	std	Y+23, r26	; 0x17
    1a10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a12:	6d 89       	ldd	r22, Y+21	; 0x15
    1a14:	7e 89       	ldd	r23, Y+22	; 0x16
    1a16:	8f 89       	ldd	r24, Y+23	; 0x17
    1a18:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <LCD_vInitialize+0x23a>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <LCD_vInitialize+0x2b8>
	else if (__tmp > 65535)
    1a34:	6d 89       	ldd	r22, Y+21	; 0x15
    1a36:	7e 89       	ldd	r23, Y+22	; 0x16
    1a38:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <LCD_vInitialize+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <LCD_vInitialize+0x29a>
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
    1a7e:	89 89       	ldd	r24, Y+17	; 0x11
    1a80:	9a 89       	ldd	r25, Y+18	; 0x12
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_vInitialize+0x288>
    1a86:	9a 8b       	std	Y+18, r25	; 0x12
    1a88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9c 8b       	std	Y+20, r25	; 0x14
    1a92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8b 89       	ldd	r24, Y+19	; 0x13
    1a96:	9c 89       	ldd	r25, Y+20	; 0x14
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <LCD_vInitialize+0x27c>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <LCD_vInitialize+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	98 8b       	std	Y+16, r25	; 0x10
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
    1aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abc:	98 89       	ldd	r25, Y+16	; 0x10
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_vInitialize+0x2c4>
    1ac2:	98 8b       	std	Y+16, r25	; 0x10
    1ac4:	8f 87       	std	Y+15, r24	; 0x0f
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 0001
	LCD_vWriteCommand(0b00000001);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e4       	ldi	r27, 0x40	; 64
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
    1ad6:	9c 87       	std	Y+12, r25	; 0x0c
    1ad8:	ad 87       	std	Y+13, r26	; 0x0d
    1ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8f 83       	std	Y+7, r24	; 0x07
    1af6:	98 87       	std	Y+8, r25	; 0x08
    1af8:	a9 87       	std	Y+9, r26	; 0x09
    1afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_vInitialize+0x324>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_vInitialize+0x3a2>
	else if (__tmp > 65535)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_vInitialize+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_vInitialize+0x384>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_vInitialize+0x372>
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_vInitialize+0x366>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_vInitialize+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_vInitialize+0x3ae>
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
	//delay 2 ms
	_delay_ms(2);
}
    1bb0:	e8 96       	adiw	r28, 0x38	; 56
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <gotoXY>:

void gotoXY(u8 X,u8 Y)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <gotoXY+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <gotoXY+0x8>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(X)
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3d 83       	std	Y+5, r19	; 0x05
    1bdc:	2c 83       	std	Y+4, r18	; 0x04
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	31 f0       	breq	.+12     	; 0x1bf2 <gotoXY+0x30>
    1be6:	2c 81       	ldd	r18, Y+4	; 0x04
    1be8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bea:	21 30       	cpi	r18, 0x01	; 1
    1bec:	31 05       	cpc	r19, r1
    1bee:	21 f0       	breq	.+8      	; 0x1bf8 <gotoXY+0x36>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <gotoXY+0x3c>
	{
	case 0:
		Address=Y;
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <gotoXY+0x3c>
		break;
	case 1:
		Address =Y+(0x40);
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	80 5c       	subi	r24, 0xC0	; 192
    1bfc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	setbit(Address,7);
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vWriteCommand(Address);
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <main>:
s16 dev(u8 num1,u8 num2);
s16 operator(u8 num1 , u8 num2 , u8 op);
void fun_t2sem(s8 arr[],u8 size ,u8 num_of_op, u8 num_of_eq );

void main(void)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	2c 97       	sbiw	r28, 0x0c	; 12
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
	//Keypad Pins
	   //PORT D Colums
		DIO_vSetPinDirec(DIO_PORTD,0,DIO_OUTPUT);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,1,DIO_OUTPUT);
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,2,DIO_OUTPUT);
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,3,DIO_OUTPUT);
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	63 e0       	ldi	r22, 0x03	; 3
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>

		//PORT D Rows
		DIO_vSetPinDirec(DIO_PORTD,4,DIO_INPUT);
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	64 e0       	ldi	r22, 0x04	; 4
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,5,DIO_INPUT);
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	65 e0       	ldi	r22, 0x05	; 5
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,6,DIO_INPUT);
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	66 e0       	ldi	r22, 0x06	; 6
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
		DIO_vSetPinDirec(DIO_PORTD,7,DIO_INPUT);
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>

		//intional
		DIO_vSetPin(DIO_PORTD,4);
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(DIO_PORTD,5);
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	65 e0       	ldi	r22, 0x05	; 5
    1c8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(DIO_PORTD,6);
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	66 e0       	ldi	r22, 0x06	; 6
    1c92:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>
		DIO_vSetPin(DIO_PORTD,7);
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	67 e0       	ldi	r22, 0x07	; 7
    1c9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPin>

	//LCD Pins

	//LCD data pins
	DIO_vSetPinDirec(DIO_PORTB,0,DIO_OUTPUT);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,1,DIO_OUTPUT);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,2,DIO_OUTPUT);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,3,DIO_OUTPUT);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	63 e0       	ldi	r22, 0x03	; 3
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,4,DIO_OUTPUT);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	64 e0       	ldi	r22, 0x04	; 4
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,5,DIO_OUTPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	65 e0       	ldi	r22, 0x05	; 5
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,6,DIO_OUTPUT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	66 e0       	ldi	r22, 0x06	; 6
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTB,7,DIO_OUTPUT);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	67 e0       	ldi	r22, 0x07	; 7
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	//LCD control pins
	DIO_vSetPinDirec(DIO_PORTA,0,DIO_OUTPUT);
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,1,DIO_OUTPUT);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>
	DIO_vSetPinDirec(DIO_PORTA,2,DIO_OUTPUT);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_vSetPinDirec>


	LCD_vInitialize();
    1d0c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <LCD_vInitialize>
	LCD_vWriteChar('0');
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>

	u8 res;
	s16 the_Res;
	u8 count=0;
    1d16:	1b 82       	std	Y+3, r1	; 0x03



	while(1)
	{
		res=Keypad_u8ReadKey();
    1d18:	0e 94 48 0a 	call	0x1490	; 0x1490 <Keypad_u8ReadKey>
    1d1c:	8e 83       	std	Y+6, r24	; 0x06
		//first num
		if(res<10 && count==0)
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	8a 30       	cpi	r24, 0x0A	; 10
    1d22:	c0 f4       	brcc	.+48     	; 0x1d54 <main+0x13a>
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	88 23       	and	r24, r24
    1d28:	a9 f4       	brne	.+42     	; 0x1d54 <main+0x13a>
		{
			LCD_vWriteCommand(0b00000001);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
			LCD_vWriteChar(res+'0');
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	80 5d       	subi	r24, 0xD0	; 208
    1d34:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
			arr[count]=res;
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d40:	ce 01       	movw	r24, r28
    1d42:	07 96       	adiw	r24, 0x07	; 7
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	40 83       	st	Z, r20
			count++;
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	e2 cf       	rjmp	.-60     	; 0x1d18 <main+0xfe>
		}
		//normal num
		else if(res<10 && count!=0)
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
    1d56:	8a 30       	cpi	r24, 0x0A	; 10
    1d58:	a8 f4       	brcc	.+42     	; 0x1d84 <main+0x16a>
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	88 23       	and	r24, r24
    1d5e:	91 f0       	breq	.+36     	; 0x1d84 <main+0x16a>
		{
			LCD_vWriteChar(res+'0');
    1d60:	8e 81       	ldd	r24, Y+6	; 0x06
    1d62:	80 5d       	subi	r24, 0xD0	; 208
    1d64:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
			arr[count]=res;
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d70:	ce 01       	movw	r24, r28
    1d72:	07 96       	adiw	r24, 0x07	; 7
    1d74:	fc 01       	movw	r30, r24
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	40 83       	st	Z, r20
			count++;
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	ca cf       	rjmp	.-108    	; 0x1d18 <main+0xfe>
		}

		//op
		else if(res>10 && res<100)
    1d84:	8e 81       	ldd	r24, Y+6	; 0x06
    1d86:	8b 30       	cpi	r24, 0x0B	; 11
    1d88:	38 f2       	brcs	.-114    	; 0x1d18 <main+0xfe>
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	84 36       	cpi	r24, 0x64	; 100
    1d8e:	20 f6       	brcc	.-120    	; 0x1d18 <main+0xfe>
		{

			LCD_vWriteChar(res);
    1d90:	8e 81       	ldd	r24, Y+6	; 0x06
    1d92:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
			if(res=='=')
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	8d 33       	cpi	r24, 0x3D	; 61
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <main+0x184>
    1d9c:	18 c1       	rjmp	.+560    	; 0x1fce <main+0x3b4>
			{

				num_of_eq=count;
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	89 83       	std	Y+1, r24	; 0x01
				fun_t2sem(arr,6,num_of_op,num_of_eq );
    1da2:	ce 01       	movw	r24, r28
    1da4:	07 96       	adiw	r24, 0x07	; 7
    1da6:	66 e0       	ldi	r22, 0x06	; 6
    1da8:	4a 81       	ldd	r20, Y+2	; 0x02
    1daa:	29 81       	ldd	r18, Y+1	; 0x01
    1dac:	0e 94 9e 10 	call	0x213c	; 0x213c <fun_t2sem>
				the_Res=operator(final_res[0],final_res[2],final_res[1]);
    1db0:	80 91 78 00 	lds	r24, 0x0078
    1db4:	90 91 79 00 	lds	r25, 0x0079
    1db8:	28 2f       	mov	r18, r24
    1dba:	80 91 7c 00 	lds	r24, 0x007C
    1dbe:	90 91 7d 00 	lds	r25, 0x007D
    1dc2:	38 2f       	mov	r19, r24
    1dc4:	80 91 7a 00 	lds	r24, 0x007A
    1dc8:	90 91 7b 00 	lds	r25, 0x007B
    1dcc:	98 2f       	mov	r25, r24
    1dce:	82 2f       	mov	r24, r18
    1dd0:	63 2f       	mov	r22, r19
    1dd2:	49 2f       	mov	r20, r25
    1dd4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <operator>
    1dd8:	9d 83       	std	Y+5, r25	; 0x05
    1dda:	8c 83       	std	Y+4, r24	; 0x04
				if(the_Res>=0)
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	9d 81       	ldd	r25, Y+5	; 0x05
    1de0:	99 23       	and	r25, r25
    1de2:	0c f4       	brge	.+2      	; 0x1de6 <main+0x1cc>
    1de4:	75 c0       	rjmp	.+234    	; 0x1ed0 <main+0x2b6>
				{
					final_res[0]=the_Res/100;
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	24 e6       	ldi	r18, 0x64	; 100
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1df4:	cb 01       	movw	r24, r22
    1df6:	90 93 79 00 	sts	0x0079, r25
    1dfa:	80 93 78 00 	sts	0x0078, r24
					the_Res=the_Res%100;
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	24 e6       	ldi	r18, 0x64	; 100
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	b9 01       	movw	r22, r18
    1e08:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1e0c:	9d 83       	std	Y+5, r25	; 0x05
    1e0e:	8c 83       	std	Y+4, r24	; 0x04
					//LCD_vWriteChar(final_res[0]+'0');
					final_res[1]=the_Res/10;
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	2a e0       	ldi	r18, 0x0A	; 10
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	b9 01       	movw	r22, r18
    1e1a:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1e1e:	cb 01       	movw	r24, r22
    1e20:	90 93 7b 00 	sts	0x007B, r25
    1e24:	80 93 7a 00 	sts	0x007A, r24
					the_Res=the_Res%10;
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	b9 01       	movw	r22, r18
    1e32:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1e36:	9d 83       	std	Y+5, r25	; 0x05
    1e38:	8c 83       	std	Y+4, r24	; 0x04
					//LCD_vWriteChar(final_res[1]+'0');
					final_res[2]=the_Res;
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	90 93 7d 00 	sts	0x007D, r25
    1e42:	80 93 7c 00 	sts	0x007C, r24
					//LCD_vWriteChar(final_res[2]+'0');
					if(final_res[0]==0 && final_res[1]==0)
    1e46:	80 91 78 00 	lds	r24, 0x0078
    1e4a:	90 91 79 00 	lds	r25, 0x0079
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	71 f4       	brne	.+28     	; 0x1e6e <main+0x254>
    1e52:	80 91 7a 00 	lds	r24, 0x007A
    1e56:	90 91 7b 00 	lds	r25, 0x007B
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	41 f4       	brne	.+16     	; 0x1e6e <main+0x254>
					{
						LCD_vWriteChar(final_res[2]+'0');
    1e5e:	80 91 7c 00 	lds	r24, 0x007C
    1e62:	90 91 7d 00 	lds	r25, 0x007D
    1e66:	80 5d       	subi	r24, 0xD0	; 208
    1e68:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1e6c:	55 cf       	rjmp	.-342    	; 0x1d18 <main+0xfe>
					}
					else if(final_res[0]==0 && final_res[1]!=0)
    1e6e:	80 91 78 00 	lds	r24, 0x0078
    1e72:	90 91 79 00 	lds	r25, 0x0079
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	a9 f4       	brne	.+42     	; 0x1ea4 <main+0x28a>
    1e7a:	80 91 7a 00 	lds	r24, 0x007A
    1e7e:	90 91 7b 00 	lds	r25, 0x007B
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	79 f0       	breq	.+30     	; 0x1ea4 <main+0x28a>
					{
						LCD_vWriteChar(final_res[1]+'0');
    1e86:	80 91 7a 00 	lds	r24, 0x007A
    1e8a:	90 91 7b 00 	lds	r25, 0x007B
    1e8e:	80 5d       	subi	r24, 0xD0	; 208
    1e90:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
						LCD_vWriteChar(final_res[2]+'0');
    1e94:	80 91 7c 00 	lds	r24, 0x007C
    1e98:	90 91 7d 00 	lds	r25, 0x007D
    1e9c:	80 5d       	subi	r24, 0xD0	; 208
    1e9e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1ea2:	3a cf       	rjmp	.-396    	; 0x1d18 <main+0xfe>
					}
					else
					{
						LCD_vWriteChar(final_res[0]+'0');
    1ea4:	80 91 78 00 	lds	r24, 0x0078
    1ea8:	90 91 79 00 	lds	r25, 0x0079
    1eac:	80 5d       	subi	r24, 0xD0	; 208
    1eae:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
						LCD_vWriteChar(final_res[1]+'0');
    1eb2:	80 91 7a 00 	lds	r24, 0x007A
    1eb6:	90 91 7b 00 	lds	r25, 0x007B
    1eba:	80 5d       	subi	r24, 0xD0	; 208
    1ebc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
						LCD_vWriteChar(final_res[2]+'0');
    1ec0:	80 91 7c 00 	lds	r24, 0x007C
    1ec4:	90 91 7d 00 	lds	r25, 0x007D
    1ec8:	80 5d       	subi	r24, 0xD0	; 208
    1eca:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1ece:	24 cf       	rjmp	.-440    	; 0x1d18 <main+0xfe>
					}
				}
				else
				{
					LCD_vWriteChar('-');
    1ed0:	8d e2       	ldi	r24, 0x2D	; 45
    1ed2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
					the_Res=the_Res*(-1);
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	90 95       	com	r25
    1edc:	81 95       	neg	r24
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	9d 83       	std	Y+5, r25	; 0x05
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
					                   final_res[0]=the_Res/100;
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	24 e6       	ldi	r18, 0x64	; 100
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	b9 01       	movw	r22, r18
    1eee:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	90 93 79 00 	sts	0x0079, r25
    1ef8:	80 93 78 00 	sts	0x0078, r24
										the_Res=the_Res%100;
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	24 e6       	ldi	r18, 0x64	; 100
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	b9 01       	movw	r22, r18
    1f06:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1f0a:	9d 83       	std	Y+5, r25	; 0x05
    1f0c:	8c 83       	std	Y+4, r24	; 0x04
										//LCD_vWriteChar(final_res[0]+'0');
										final_res[1]=the_Res/10;
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	9d 81       	ldd	r25, Y+5	; 0x05
    1f12:	2a e0       	ldi	r18, 0x0A	; 10
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	b9 01       	movw	r22, r18
    1f18:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	90 93 7b 00 	sts	0x007B, r25
    1f22:	80 93 7a 00 	sts	0x007A, r24
										the_Res=the_Res%10;
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	b9 01       	movw	r22, r18
    1f30:	0e 94 a6 11 	call	0x234c	; 0x234c <__divmodhi4>
    1f34:	9d 83       	std	Y+5, r25	; 0x05
    1f36:	8c 83       	std	Y+4, r24	; 0x04
										//LCD_vWriteChar(final_res[1]+'0');
										final_res[2]=the_Res;
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	90 93 7d 00 	sts	0x007D, r25
    1f40:	80 93 7c 00 	sts	0x007C, r24
										//LCD_vWriteChar(final_res[2]+'0');
										if(final_res[0]==0 && final_res[1]==0)
    1f44:	80 91 78 00 	lds	r24, 0x0078
    1f48:	90 91 79 00 	lds	r25, 0x0079
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	71 f4       	brne	.+28     	; 0x1f6c <main+0x352>
    1f50:	80 91 7a 00 	lds	r24, 0x007A
    1f54:	90 91 7b 00 	lds	r25, 0x007B
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	41 f4       	brne	.+16     	; 0x1f6c <main+0x352>
										{
											LCD_vWriteChar(final_res[2]+'0');
    1f5c:	80 91 7c 00 	lds	r24, 0x007C
    1f60:	90 91 7d 00 	lds	r25, 0x007D
    1f64:	80 5d       	subi	r24, 0xD0	; 208
    1f66:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1f6a:	d6 ce       	rjmp	.-596    	; 0x1d18 <main+0xfe>
										}
										else if(final_res[0]==0 && final_res[1]!=0)
    1f6c:	80 91 78 00 	lds	r24, 0x0078
    1f70:	90 91 79 00 	lds	r25, 0x0079
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	a9 f4       	brne	.+42     	; 0x1fa2 <main+0x388>
    1f78:	80 91 7a 00 	lds	r24, 0x007A
    1f7c:	90 91 7b 00 	lds	r25, 0x007B
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	79 f0       	breq	.+30     	; 0x1fa2 <main+0x388>
										{
											LCD_vWriteChar(final_res[1]+'0');
    1f84:	80 91 7a 00 	lds	r24, 0x007A
    1f88:	90 91 7b 00 	lds	r25, 0x007B
    1f8c:	80 5d       	subi	r24, 0xD0	; 208
    1f8e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
											LCD_vWriteChar(final_res[2]+'0');
    1f92:	80 91 7c 00 	lds	r24, 0x007C
    1f96:	90 91 7d 00 	lds	r25, 0x007D
    1f9a:	80 5d       	subi	r24, 0xD0	; 208
    1f9c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1fa0:	bb ce       	rjmp	.-650    	; 0x1d18 <main+0xfe>
										}
										else
										{
											LCD_vWriteChar(final_res[0]+'0');
    1fa2:	80 91 78 00 	lds	r24, 0x0078
    1fa6:	90 91 79 00 	lds	r25, 0x0079
    1faa:	80 5d       	subi	r24, 0xD0	; 208
    1fac:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
											LCD_vWriteChar(final_res[1]+'0');
    1fb0:	80 91 7a 00 	lds	r24, 0x007A
    1fb4:	90 91 7b 00 	lds	r25, 0x007B
    1fb8:	80 5d       	subi	r24, 0xD0	; 208
    1fba:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
											LCD_vWriteChar(final_res[2]+'0');
    1fbe:	80 91 7c 00 	lds	r24, 0x007C
    1fc2:	90 91 7d 00 	lds	r25, 0x007D
    1fc6:	80 5d       	subi	r24, 0xD0	; 208
    1fc8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_vWriteChar>
    1fcc:	a5 ce       	rjmp	.-694    	; 0x1d18 <main+0xfe>
										}

				}

			}
			else if(res=='.')
    1fce:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd0:	8e 32       	cpi	r24, 0x2E	; 46
    1fd2:	29 f4       	brne	.+10     	; 0x1fde <main+0x3c4>
			{
				LCD_vWriteCommand(0b00000001);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_vWriteCommand>
				count=0;
    1fda:	1b 82       	std	Y+3, r1	; 0x03
    1fdc:	9d ce       	rjmp	.-710    	; 0x1d18 <main+0xfe>
			}
			else
			{
				arr[count]=res;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4e 81       	ldd	r20, Y+6	; 0x06
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	07 96       	adiw	r24, 0x07	; 7
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 0f       	add	r30, r18
    1fee:	f3 1f       	adc	r31, r19
    1ff0:	40 83       	st	Z, r20
				num_of_op=count;
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	8a 83       	std	Y+2, r24	; 0x02
				count++;
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	8d ce       	rjmp	.-742    	; 0x1d18 <main+0xfe>

00001ffe <add>:
	}

}

//fun add +
s16 add(u8 num1,u8 num2){
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <add+0x6>
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	6a 83       	std	Y+2, r22	; 0x02
	return num1+num2;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	82 0f       	add	r24, r18
    201a:	93 1f       	adc	r25, r19
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <sub>:
//fun sub -
s16 sub(u8 num1,u8 num2){
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <sub+0x6>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	6a 83       	std	Y+2, r22	; 0x02
	return num1-num2;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a9 01       	movw	r20, r18
    2042:	48 1b       	sub	r20, r24
    2044:	59 0b       	sbc	r21, r25
    2046:	ca 01       	movw	r24, r20
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <mult>:
//fun mult *
s16 mult(u8 num1,u8 num2){
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <mult+0x6>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	6a 83       	std	Y+2, r22	; 0x02
	return num1*num2;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	ac 01       	movw	r20, r24
    206e:	24 9f       	mul	r18, r20
    2070:	c0 01       	movw	r24, r0
    2072:	25 9f       	mul	r18, r21
    2074:	90 0d       	add	r25, r0
    2076:	34 9f       	mul	r19, r20
    2078:	90 0d       	add	r25, r0
    207a:	11 24       	eor	r1, r1
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <dev>:
//fun dev /
s16 dev(u8 num1,u8 num2){
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <dev+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <dev+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	6a 83       	std	Y+2, r22	; 0x02
	if(num2 == 0){
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	88 23       	and	r24, r24
    209a:	19 f4       	brne	.+6      	; 0x20a2 <dev+0x1c>
		return 0;
    209c:	1c 82       	std	Y+4, r1	; 0x04
    209e:	1b 82       	std	Y+3, r1	; 0x03
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <dev+0x2e>
	}
	else{
		return num1/num2;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	69 2f       	mov	r22, r25
    20a8:	0e 94 9a 11 	call	0x2334	; 0x2334 <__udivmodqi4>
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3c 83       	std	Y+4, r19	; 0x04
    20b2:	2b 83       	std	Y+3, r18	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <operator>:

//fun
s16 operator(u8 num1 , u8 num2 , u8 op){
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <operator+0x6>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <operator+0x8>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	6c 83       	std	Y+4, r22	; 0x04
    20d8:	4d 83       	std	Y+5, r20	; 0x05
	s16 res;
	if(op=='+'){
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	8b 32       	cpi	r24, 0x2B	; 43
    20de:	39 f4       	brne	.+14     	; 0x20ee <operator+0x28>
		res=add(num1,num2);
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	6c 81       	ldd	r22, Y+4	; 0x04
    20e4:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <add>
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	1d c0       	rjmp	.+58     	; 0x2128 <operator+0x62>
	}
	else if(op=='-'){
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	8d 32       	cpi	r24, 0x2D	; 45
    20f2:	39 f4       	brne	.+14     	; 0x2102 <operator+0x3c>
		res=sub(num1,num2);
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	6c 81       	ldd	r22, Y+4	; 0x04
    20f8:	0e 94 13 10 	call	0x2026	; 0x2026 <sub>
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	13 c0       	rjmp	.+38     	; 0x2128 <operator+0x62>
	}
	else if(op=='*'){
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	8a 32       	cpi	r24, 0x2A	; 42
    2106:	39 f4       	brne	.+14     	; 0x2116 <operator+0x50>
		res=mult(num1,num2);
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	6c 81       	ldd	r22, Y+4	; 0x04
    210c:	0e 94 29 10 	call	0x2052	; 0x2052 <mult>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	09 c0       	rjmp	.+18     	; 0x2128 <operator+0x62>
	}
	else if(op=='/'){
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	8f 32       	cpi	r24, 0x2F	; 47
    211a:	31 f4       	brne	.+12     	; 0x2128 <operator+0x62>
		res=dev(num1,num2);
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	6c 81       	ldd	r22, Y+4	; 0x04
    2120:	0e 94 43 10 	call	0x2086	; 0x2086 <dev>
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
	}
	return res;
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02

}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <fun_t2sem>:

void fun_t2sem(s8 arr[],u8 size ,u8 num_of_op, u8 num_of_eq )
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <fun_t2sem+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <fun_t2sem+0x8>
    2144:	0f 92       	push	r0
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	6b 83       	std	Y+3, r22	; 0x03
    2150:	4c 83       	std	Y+4, r20	; 0x04
    2152:	2d 83       	std	Y+5, r18	; 0x05
	size=6;
    2154:	86 e0       	ldi	r24, 0x06	; 6
    2156:	8b 83       	std	Y+3, r24	; 0x03
	if(num_of_eq==3)
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	19 f5       	brne	.+70     	; 0x21a4 <fun_t2sem+0x68>
	{
		final_res[0]=arr[0];
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	80 81       	ld	r24, Z
    2164:	99 27       	eor	r25, r25
    2166:	87 fd       	sbrc	r24, 7
    2168:	90 95       	com	r25
    216a:	90 93 79 00 	sts	0x0079, r25
    216e:	80 93 78 00 	sts	0x0078, r24
		final_res[1]=arr[1];
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	fc 01       	movw	r30, r24
    2178:	31 96       	adiw	r30, 0x01	; 1
    217a:	80 81       	ld	r24, Z
    217c:	99 27       	eor	r25, r25
    217e:	87 fd       	sbrc	r24, 7
    2180:	90 95       	com	r25
    2182:	90 93 7b 00 	sts	0x007B, r25
    2186:	80 93 7a 00 	sts	0x007A, r24
		final_res[2]=arr[2];
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	fc 01       	movw	r30, r24
    2190:	32 96       	adiw	r30, 0x02	; 2
    2192:	80 81       	ld	r24, Z
    2194:	99 27       	eor	r25, r25
    2196:	87 fd       	sbrc	r24, 7
    2198:	90 95       	com	r25
    219a:	90 93 7d 00 	sts	0x007D, r25
    219e:	80 93 7c 00 	sts	0x007C, r24
    21a2:	c0 c0       	rjmp	.+384    	; 0x2324 <fun_t2sem+0x1e8>
	}
	else if(num_of_eq==4)
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	84 30       	cpi	r24, 0x04	; 4
    21a8:	09 f0       	breq	.+2      	; 0x21ac <fun_t2sem+0x70>
    21aa:	71 c0       	rjmp	.+226    	; 0x228e <fun_t2sem+0x152>
	{
		if(num_of_op==1)
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	b9 f5       	brne	.+110    	; 0x2220 <fun_t2sem+0xe4>
		{
			final_res[0]=arr[0];
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	80 81       	ld	r24, Z
    21b8:	99 27       	eor	r25, r25
    21ba:	87 fd       	sbrc	r24, 7
    21bc:	90 95       	com	r25
    21be:	90 93 79 00 	sts	0x0079, r25
    21c2:	80 93 78 00 	sts	0x0078, r24
			final_res[1]=arr[1];
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	fc 01       	movw	r30, r24
    21cc:	31 96       	adiw	r30, 0x01	; 1
    21ce:	80 81       	ld	r24, Z
    21d0:	99 27       	eor	r25, r25
    21d2:	87 fd       	sbrc	r24, 7
    21d4:	90 95       	com	r25
    21d6:	90 93 7b 00 	sts	0x007B, r25
    21da:	80 93 7a 00 	sts	0x007A, r24
			final_res[2]=arr[2]*10+arr[3];
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	fc 01       	movw	r30, r24
    21e4:	32 96       	adiw	r30, 0x02	; 2
    21e6:	80 81       	ld	r24, Z
    21e8:	99 27       	eor	r25, r25
    21ea:	87 fd       	sbrc	r24, 7
    21ec:	90 95       	com	r25
    21ee:	9c 01       	movw	r18, r24
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	c9 01       	movw	r24, r18
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	28 0f       	add	r18, r24
    2200:	39 1f       	adc	r19, r25
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	fc 01       	movw	r30, r24
    2208:	33 96       	adiw	r30, 0x03	; 3
    220a:	80 81       	ld	r24, Z
    220c:	99 27       	eor	r25, r25
    220e:	87 fd       	sbrc	r24, 7
    2210:	90 95       	com	r25
    2212:	82 0f       	add	r24, r18
    2214:	93 1f       	adc	r25, r19
    2216:	90 93 7d 00 	sts	0x007D, r25
    221a:	80 93 7c 00 	sts	0x007C, r24
    221e:	82 c0       	rjmp	.+260    	; 0x2324 <fun_t2sem+0x1e8>
		}
		else
		{
			final_res[0]=arr[0]*10+arr[1];
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	80 81       	ld	r24, Z
    2226:	99 27       	eor	r25, r25
    2228:	87 fd       	sbrc	r24, 7
    222a:	90 95       	com	r25
    222c:	9c 01       	movw	r18, r24
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	c9 01       	movw	r24, r18
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	28 0f       	add	r18, r24
    223e:	39 1f       	adc	r19, r25
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	fc 01       	movw	r30, r24
    2246:	31 96       	adiw	r30, 0x01	; 1
    2248:	80 81       	ld	r24, Z
    224a:	99 27       	eor	r25, r25
    224c:	87 fd       	sbrc	r24, 7
    224e:	90 95       	com	r25
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	90 93 79 00 	sts	0x0079, r25
    2258:	80 93 78 00 	sts	0x0078, r24
			final_res[1]=arr[2];
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	fc 01       	movw	r30, r24
    2262:	32 96       	adiw	r30, 0x02	; 2
    2264:	80 81       	ld	r24, Z
    2266:	99 27       	eor	r25, r25
    2268:	87 fd       	sbrc	r24, 7
    226a:	90 95       	com	r25
    226c:	90 93 7b 00 	sts	0x007B, r25
    2270:	80 93 7a 00 	sts	0x007A, r24
			final_res[2]=arr[3];
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	fc 01       	movw	r30, r24
    227a:	33 96       	adiw	r30, 0x03	; 3
    227c:	80 81       	ld	r24, Z
    227e:	99 27       	eor	r25, r25
    2280:	87 fd       	sbrc	r24, 7
    2282:	90 95       	com	r25
    2284:	90 93 7d 00 	sts	0x007D, r25
    2288:	80 93 7c 00 	sts	0x007C, r24
    228c:	4b c0       	rjmp	.+150    	; 0x2324 <fun_t2sem+0x1e8>

		}
	}
	else if(num_of_eq==5)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	85 30       	cpi	r24, 0x05	; 5
    2292:	09 f0       	breq	.+2      	; 0x2296 <fun_t2sem+0x15a>
    2294:	47 c0       	rjmp	.+142    	; 0x2324 <fun_t2sem+0x1e8>
	{
		final_res[0]=arr[0]*10+arr[1];
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	80 81       	ld	r24, Z
    229c:	99 27       	eor	r25, r25
    229e:	87 fd       	sbrc	r24, 7
    22a0:	90 95       	com	r25
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	c9 01       	movw	r24, r18
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	28 0f       	add	r18, r24
    22b4:	39 1f       	adc	r19, r25
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	fc 01       	movw	r30, r24
    22bc:	31 96       	adiw	r30, 0x01	; 1
    22be:	80 81       	ld	r24, Z
    22c0:	99 27       	eor	r25, r25
    22c2:	87 fd       	sbrc	r24, 7
    22c4:	90 95       	com	r25
    22c6:	82 0f       	add	r24, r18
    22c8:	93 1f       	adc	r25, r19
    22ca:	90 93 79 00 	sts	0x0079, r25
    22ce:	80 93 78 00 	sts	0x0078, r24
		final_res[1]=arr[2];
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	fc 01       	movw	r30, r24
    22d8:	32 96       	adiw	r30, 0x02	; 2
    22da:	80 81       	ld	r24, Z
    22dc:	99 27       	eor	r25, r25
    22de:	87 fd       	sbrc	r24, 7
    22e0:	90 95       	com	r25
    22e2:	90 93 7b 00 	sts	0x007B, r25
    22e6:	80 93 7a 00 	sts	0x007A, r24
		final_res[2]=arr[3]*arr[4];
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	fc 01       	movw	r30, r24
    22f0:	33 96       	adiw	r30, 0x03	; 3
    22f2:	80 81       	ld	r24, Z
    22f4:	28 2f       	mov	r18, r24
    22f6:	33 27       	eor	r19, r19
    22f8:	27 fd       	sbrc	r18, 7
    22fa:	30 95       	com	r19
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	fc 01       	movw	r30, r24
    2302:	34 96       	adiw	r30, 0x04	; 4
    2304:	80 81       	ld	r24, Z
    2306:	99 27       	eor	r25, r25
    2308:	87 fd       	sbrc	r24, 7
    230a:	90 95       	com	r25
    230c:	ac 01       	movw	r20, r24
    230e:	24 9f       	mul	r18, r20
    2310:	c0 01       	movw	r24, r0
    2312:	25 9f       	mul	r18, r21
    2314:	90 0d       	add	r25, r0
    2316:	34 9f       	mul	r19, r20
    2318:	90 0d       	add	r25, r0
    231a:	11 24       	eor	r1, r1
    231c:	90 93 7d 00 	sts	0x007D, r25
    2320:	80 93 7c 00 	sts	0x007C, r24
	}
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <__udivmodqi4>:
    2334:	99 1b       	sub	r25, r25
    2336:	79 e0       	ldi	r23, 0x09	; 9
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <__udivmodqi4_ep>

0000233a <__udivmodqi4_loop>:
    233a:	99 1f       	adc	r25, r25
    233c:	96 17       	cp	r25, r22
    233e:	08 f0       	brcs	.+2      	; 0x2342 <__udivmodqi4_ep>
    2340:	96 1b       	sub	r25, r22

00002342 <__udivmodqi4_ep>:
    2342:	88 1f       	adc	r24, r24
    2344:	7a 95       	dec	r23
    2346:	c9 f7       	brne	.-14     	; 0x233a <__udivmodqi4_loop>
    2348:	80 95       	com	r24
    234a:	08 95       	ret

0000234c <__divmodhi4>:
    234c:	97 fb       	bst	r25, 7
    234e:	09 2e       	mov	r0, r25
    2350:	07 26       	eor	r0, r23
    2352:	0a d0       	rcall	.+20     	; 0x2368 <__divmodhi4_neg1>
    2354:	77 fd       	sbrc	r23, 7
    2356:	04 d0       	rcall	.+8      	; 0x2360 <__divmodhi4_neg2>
    2358:	0c d0       	rcall	.+24     	; 0x2372 <__udivmodhi4>
    235a:	06 d0       	rcall	.+12     	; 0x2368 <__divmodhi4_neg1>
    235c:	00 20       	and	r0, r0
    235e:	1a f4       	brpl	.+6      	; 0x2366 <__divmodhi4_exit>

00002360 <__divmodhi4_neg2>:
    2360:	70 95       	com	r23
    2362:	61 95       	neg	r22
    2364:	7f 4f       	sbci	r23, 0xFF	; 255

00002366 <__divmodhi4_exit>:
    2366:	08 95       	ret

00002368 <__divmodhi4_neg1>:
    2368:	f6 f7       	brtc	.-4      	; 0x2366 <__divmodhi4_exit>
    236a:	90 95       	com	r25
    236c:	81 95       	neg	r24
    236e:	9f 4f       	sbci	r25, 0xFF	; 255
    2370:	08 95       	ret

00002372 <__udivmodhi4>:
    2372:	aa 1b       	sub	r26, r26
    2374:	bb 1b       	sub	r27, r27
    2376:	51 e1       	ldi	r21, 0x11	; 17
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <__udivmodhi4_ep>

0000237a <__udivmodhi4_loop>:
    237a:	aa 1f       	adc	r26, r26
    237c:	bb 1f       	adc	r27, r27
    237e:	a6 17       	cp	r26, r22
    2380:	b7 07       	cpc	r27, r23
    2382:	10 f0       	brcs	.+4      	; 0x2388 <__udivmodhi4_ep>
    2384:	a6 1b       	sub	r26, r22
    2386:	b7 0b       	sbc	r27, r23

00002388 <__udivmodhi4_ep>:
    2388:	88 1f       	adc	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	5a 95       	dec	r21
    238e:	a9 f7       	brne	.-22     	; 0x237a <__udivmodhi4_loop>
    2390:	80 95       	com	r24
    2392:	90 95       	com	r25
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	08 95       	ret

0000239a <__prologue_saves__>:
    239a:	2f 92       	push	r2
    239c:	3f 92       	push	r3
    239e:	4f 92       	push	r4
    23a0:	5f 92       	push	r5
    23a2:	6f 92       	push	r6
    23a4:	7f 92       	push	r7
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	ca 1b       	sub	r28, r26
    23c4:	db 0b       	sbc	r29, r27
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	09 94       	ijmp

000023d2 <__epilogue_restores__>:
    23d2:	2a 88       	ldd	r2, Y+18	; 0x12
    23d4:	39 88       	ldd	r3, Y+17	; 0x11
    23d6:	48 88       	ldd	r4, Y+16	; 0x10
    23d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23da:	6e 84       	ldd	r6, Y+14	; 0x0e
    23dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    23de:	8c 84       	ldd	r8, Y+12	; 0x0c
    23e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e4:	b9 84       	ldd	r11, Y+9	; 0x09
    23e6:	c8 84       	ldd	r12, Y+8	; 0x08
    23e8:	df 80       	ldd	r13, Y+7	; 0x07
    23ea:	ee 80       	ldd	r14, Y+6	; 0x06
    23ec:	fd 80       	ldd	r15, Y+5	; 0x05
    23ee:	0c 81       	ldd	r16, Y+4	; 0x04
    23f0:	1b 81       	ldd	r17, Y+3	; 0x03
    23f2:	aa 81       	ldd	r26, Y+2	; 0x02
    23f4:	b9 81       	ldd	r27, Y+1	; 0x01
    23f6:	ce 0f       	add	r28, r30
    23f8:	d1 1d       	adc	r29, r1
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	ed 01       	movw	r28, r26
    2406:	08 95       	ret

00002408 <_exit>:
    2408:	f8 94       	cli

0000240a <__stop_program>:
    240a:	ff cf       	rjmp	.-2      	; 0x240a <__stop_program>
