
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002224  000022b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080016e  0080016e  000023c6  2**0
                  ALLOC
  3 .stab         0000150c  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ab8  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000066ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000784e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00008854  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  000089f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00008cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000095c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 86 10 	jmp	0x210c	; 0x210c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <main>
      8a:	0c 94 10 11 	jmp	0x2220	; 0x2220 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e2 59       	subi	r30, 0x92	; 146
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_vSetPin>:
 * Input: Port number , pin number
 * Output:
 * 1
 */
void DIO_vSetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vSetPin+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_vSetPin+0x8>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3c 83       	std	Y+4, r19	; 0x04
     cb8:	2b 83       	std	Y+3, r18	; 0x03
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	49 f1       	breq	.+82     	; 0xd16 <DIO_vSetPin+0x76>
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <DIO_vSetPin+0x38>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <DIO_vSetPin+0x4e>
     cd6:	5a c0       	rjmp	.+180    	; 0xd8c <DIO_vSetPin+0xec>
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	71 f1       	breq	.+92     	; 0xd3e <DIO_vSetPin+0x9e>
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f1       	breq	.+122    	; 0xd66 <DIO_vSetPin+0xc6>
     cec:	4f c0       	rjmp	.+158    	; 0xd8c <DIO_vSetPin+0xec>
	{
	case  DIO_PORTA:
		setbit(PORTA,Copy_u8PinNumber);
     cee:	ab e3       	ldi	r26, 0x3B	; 59
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	eb e3       	ldi	r30, 0x3B	; 59
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_vSetPin+0x6c>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_vSetPin+0x68>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	3b c0       	rjmp	.+118    	; 0xd8c <DIO_vSetPin+0xec>
		break;
	case  DIO_PORTB:
			setbit(PORTB,Copy_u8PinNumber);
     d16:	a8 e3       	ldi	r26, 0x38	; 56
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e8 e3       	ldi	r30, 0x38	; 56
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_vSetPin+0x94>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_vSetPin+0x90>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	27 c0       	rjmp	.+78     	; 0xd8c <DIO_vSetPin+0xec>
			break;
	case  DIO_PORTC:
				setbit(PORTC,Copy_u8PinNumber);
     d3e:	a5 e3       	ldi	r26, 0x35	; 53
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e3       	ldi	r30, 0x35	; 53
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_vSetPin+0xbc>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_vSetPin+0xb8>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	13 c0       	rjmp	.+38     	; 0xd8c <DIO_vSetPin+0xec>
				break;
	case  DIO_PORTD:
				setbit(PORTD,Copy_u8PinNumber);
     d66:	a2 e3       	ldi	r26, 0x32	; 50
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e2 e3       	ldi	r30, 0x32	; 50
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_vSetPin+0xe4>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_vSetPin+0xe0>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
				break;
	}
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <DIO_vClearPin>:
 * Input: Port number , pin number
 * Output:
 * 2
 */
void DIO_vClearPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <DIO_vClearPin+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <DIO_vClearPin+0x8>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3c 83       	std	Y+4, r19	; 0x04
     db2:	2b 83       	std	Y+3, r18	; 0x03
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	59 f1       	breq	.+86     	; 0xe14 <DIO_vClearPin+0x7a>
     dbe:	2b 81       	ldd	r18, Y+3	; 0x03
     dc0:	3c 81       	ldd	r19, Y+4	; 0x04
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <DIO_vClearPin+0x38>
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f0       	breq	.+26     	; 0xdea <DIO_vClearPin+0x50>
     dd0:	5f c0       	rjmp	.+190    	; 0xe90 <DIO_vClearPin+0xf6>
     dd2:	2b 81       	ldd	r18, Y+3	; 0x03
     dd4:	3c 81       	ldd	r19, Y+4	; 0x04
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	89 f1       	breq	.+98     	; 0xe3e <DIO_vClearPin+0xa4>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_vClearPin+0x4e>
     de6:	40 c0       	rjmp	.+128    	; 0xe68 <DIO_vClearPin+0xce>
     de8:	53 c0       	rjmp	.+166    	; 0xe90 <DIO_vClearPin+0xf6>
	{
	case  DIO_PORTA:
		clearbit(PORTA,Copy_u8PinNumber);
     dea:	ab e3       	ldi	r26, 0x3B	; 59
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e3       	ldi	r30, 0x3B	; 59
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_vClearPin+0x6e>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_vClearPin+0x6a>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	3e c0       	rjmp	.+124    	; 0xe90 <DIO_vClearPin+0xf6>
		break;
	case  DIO_PORTB:
		clearbit(PORTB,Copy_u8PinNumber);
     e14:	a8 e3       	ldi	r26, 0x38	; 56
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e8 e3       	ldi	r30, 0x38	; 56
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_vClearPin+0x98>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_vClearPin+0x94>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <DIO_vClearPin+0xf6>
			break;
	case  DIO_PORTC:
		clearbit(PORTC,Copy_u8PinNumber);
     e3e:	a5 e3       	ldi	r26, 0x35	; 53
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e3       	ldi	r30, 0x35	; 53
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_vClearPin+0xc2>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_vClearPin+0xbe>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <DIO_vClearPin+0xf6>
				break;
	case  DIO_PORTD:
		clearbit(PORTD,Copy_u8PinNumber);
     e68:	a2 e3       	ldi	r26, 0x32	; 50
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_vClearPin+0xec>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_vClearPin+0xe8>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
				break;
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_vTogglePin>:
 * Input: Port number , pin number
 * Output:
 * 3
 */
void DIO_vTogglePin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_vTogglePin+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_vTogglePin+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3c 83       	std	Y+4, r19	; 0x04
     eb6:	2b 83       	std	Y+3, r18	; 0x03
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	49 f1       	breq	.+82     	; 0xf14 <DIO_vTogglePin+0x76>
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	3c 81       	ldd	r19, Y+4	; 0x04
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_vTogglePin+0x38>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	61 f0       	breq	.+24     	; 0xeec <DIO_vTogglePin+0x4e>
     ed4:	5a c0       	rjmp	.+180    	; 0xf8a <DIO_vTogglePin+0xec>
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	71 f1       	breq	.+92     	; 0xf3c <DIO_vTogglePin+0x9e>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	e9 f1       	breq	.+122    	; 0xf64 <DIO_vTogglePin+0xc6>
     eea:	4f c0       	rjmp	.+158    	; 0xf8a <DIO_vTogglePin+0xec>
	{
	case  DIO_PORTA:
		togglebit(PORTA,Copy_u8PinNumber);
     eec:	ab e3       	ldi	r26, 0x3B	; 59
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e3       	ldi	r30, 0x3B	; 59
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_vTogglePin+0x6c>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_vTogglePin+0x68>
     f0e:	84 27       	eor	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	3b c0       	rjmp	.+118    	; 0xf8a <DIO_vTogglePin+0xec>
		break;
	case  DIO_PORTB:
		togglebit(PORTB,Copy_u8PinNumber);
     f14:	a8 e3       	ldi	r26, 0x38	; 56
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e8 e3       	ldi	r30, 0x38	; 56
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_vTogglePin+0x94>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_vTogglePin+0x90>
     f36:	84 27       	eor	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	27 c0       	rjmp	.+78     	; 0xf8a <DIO_vTogglePin+0xec>
			break;
	case  DIO_PORTC:
		togglebit(PORTC,Copy_u8PinNumber);
     f3c:	a5 e3       	ldi	r26, 0x35	; 53
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e3       	ldi	r30, 0x35	; 53
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vTogglePin+0xbc>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vTogglePin+0xb8>
     f5e:	84 27       	eor	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	13 c0       	rjmp	.+38     	; 0xf8a <DIO_vTogglePin+0xec>
				break;
	case  DIO_PORTD:
		togglebit(PORTD,Copy_u8PinNumber);
     f64:	a2 e3       	ldi	r26, 0x32	; 50
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e2 e3       	ldi	r30, 0x32	; 50
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_vTogglePin+0xe4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_vTogglePin+0xe0>
     f86:	84 27       	eor	r24, r20
     f88:	8c 93       	st	X, r24
				break;
	}
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <DIO_vGetPin>:
 * Input: Port number , pin number
 * Output:return number of pin whether 0 or 1
 * 4
 */
u8 DIO_vGetPin(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <DIO_vGetPin+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_vGetPin+0x8>
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret;
	switch(Copy_u8PORTNumber)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 83       	std	Y+5, r19	; 0x05
     fb2:	2c 83       	std	Y+4, r18	; 0x04
     fb4:	4c 81       	ldd	r20, Y+4	; 0x04
     fb6:	5d 81       	ldd	r21, Y+5	; 0x05
     fb8:	41 30       	cpi	r20, 0x01	; 1
     fba:	51 05       	cpc	r21, r1
     fbc:	b1 f1       	breq	.+108    	; 0x102a <DIO_vGetPin+0x92>
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	91 05       	cpc	r25, r1
     fc6:	34 f4       	brge	.+12     	; 0xfd4 <DIO_vGetPin+0x3c>
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	3d 81       	ldd	r19, Y+5	; 0x05
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	71 f0       	breq	.+28     	; 0xfee <DIO_vGetPin+0x56>
     fd2:	84 c0       	rjmp	.+264    	; 0x10dc <DIO_vGetPin+0x144>
     fd4:	4c 81       	ldd	r20, Y+4	; 0x04
     fd6:	5d 81       	ldd	r21, Y+5	; 0x05
     fd8:	42 30       	cpi	r20, 0x02	; 2
     fda:	51 05       	cpc	r21, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_vGetPin+0x48>
     fde:	43 c0       	rjmp	.+134    	; 0x1066 <DIO_vGetPin+0xce>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <DIO_vGetPin+0x54>
     fea:	5b c0       	rjmp	.+182    	; 0x10a2 <DIO_vGetPin+0x10a>
     fec:	77 c0       	rjmp	.+238    	; 0x10dc <DIO_vGetPin+0x144>
	{
	case  DIO_PORTA:
		ret= getbit(PINA,Copy_u8PinNumber);
     fee:	e9 e3       	ldi	r30, 0x39	; 57
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_vGetPin+0x70>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	2a 95       	dec	r18
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_vGetPin+0x6c>
    100c:	9a 01       	movw	r18, r20
    100e:	28 23       	and	r18, r24
    1010:	39 23       	and	r19, r25
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_vGetPin+0x88>
    101c:	55 95       	asr	r21
    101e:	47 95       	ror	r20
    1020:	8a 95       	dec	r24
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_vGetPin+0x84>
    1024:	ca 01       	movw	r24, r20
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	59 c0       	rjmp	.+178    	; 0x10dc <DIO_vGetPin+0x144>

		break;
	case  DIO_PORTB:
		ret= getbit(PINB,Copy_u8PinNumber);
    102a:	e6 e3       	ldi	r30, 0x36	; 54
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_vGetPin+0xac>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	2a 95       	dec	r18
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_vGetPin+0xa8>
    1048:	9a 01       	movw	r18, r20
    104a:	28 23       	and	r18, r24
    104c:	39 23       	and	r19, r25
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_vGetPin+0xc4>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_vGetPin+0xc0>
    1060:	ca 01       	movw	r24, r20
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	3b c0       	rjmp	.+118    	; 0x10dc <DIO_vGetPin+0x144>
			break;
	case  DIO_PORTC:
		ret= getbit(PINC,Copy_u8PinNumber);
    1066:	e3 e3       	ldi	r30, 0x33	; 51
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_vGetPin+0xe8>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	2a 95       	dec	r18
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_vGetPin+0xe4>
    1084:	9a 01       	movw	r18, r20
    1086:	28 23       	and	r18, r24
    1088:	39 23       	and	r19, r25
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_vGetPin+0x100>
    1094:	55 95       	asr	r21
    1096:	47 95       	ror	r20
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_vGetPin+0xfc>
    109c:	ca 01       	movw	r24, r20
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	1d c0       	rjmp	.+58     	; 0x10dc <DIO_vGetPin+0x144>
				break;
	case  DIO_PORTD:
		ret= getbit(PIND,Copy_u8PinNumber);
    10a2:	e0 e3       	ldi	r30, 0x30	; 48
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_vGetPin+0x124>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	2a 95       	dec	r18
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_vGetPin+0x120>
    10c0:	9a 01       	movw	r18, r20
    10c2:	28 23       	and	r18, r24
    10c4:	39 23       	and	r19, r25
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_vGetPin+0x13c>
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_vGetPin+0x138>
    10d8:	ca 01       	movw	r24, r20
    10da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return ret;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <DIO_vSetPort>:
 * Input: Port number
 * Output:
 * 5
 */
void DIO_vSetPort(u8 Copy_u8PORTNumber)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_vSetPort+0x6>
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3b 83       	std	Y+3, r19	; 0x03
    1104:	2a 83       	std	Y+2, r18	; 0x02
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	d1 f0       	breq	.+52     	; 0x1144 <DIO_vSetPort+0x56>
    1110:	2a 81       	ldd	r18, Y+2	; 0x02
    1112:	3b 81       	ldd	r19, Y+3	; 0x03
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <DIO_vSetPort+0x36>
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	61 f0       	breq	.+24     	; 0x113a <DIO_vSetPort+0x4c>
    1122:	1e c0       	rjmp	.+60     	; 0x1160 <DIO_vSetPort+0x72>
    1124:	2a 81       	ldd	r18, Y+2	; 0x02
    1126:	3b 81       	ldd	r19, Y+3	; 0x03
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <DIO_vSetPort+0x60>
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	81 f0       	breq	.+32     	; 0x1158 <DIO_vSetPort+0x6a>
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <DIO_vSetPort+0x72>
	{
	case  DIO_PORTA:
		PORTA=0b11111111;
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	80 83       	st	Z, r24
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTB:
		PORTB=0b11111111;
    1144:	e8 e3       	ldi	r30, 0x38	; 56
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	80 83       	st	Z, r24
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTC:
		PORTC=0b11111111;
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	80 83       	st	Z, r24
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <DIO_vSetPort+0x72>
		break;
	case  DIO_PORTD:
		PORTD=0b11111111;
    1158:	e2 e3       	ldi	r30, 0x32	; 50
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	80 83       	st	Z, r24
		break;
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <DIO_vClearPort>:
 * Input: Port number
 * Output:
 * 6
 */
void DIO_vClearPort(u8 Copy_u8PORTNumber)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_vClearPort+0x6>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PORTNumber)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3b 83       	std	Y+3, r19	; 0x03
    1182:	2a 83       	std	Y+2, r18	; 0x02
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	c9 f0       	breq	.+50     	; 0x11c0 <DIO_vClearPort+0x54>
    118e:	2a 81       	ldd	r18, Y+2	; 0x02
    1190:	3b 81       	ldd	r19, Y+3	; 0x03
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <DIO_vClearPort+0x36>
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <DIO_vClearPort+0x4c>
    11a0:	1a c0       	rjmp	.+52     	; 0x11d6 <DIO_vClearPort+0x6a>
    11a2:	2a 81       	ldd	r18, Y+2	; 0x02
    11a4:	3b 81       	ldd	r19, Y+3	; 0x03
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	71 f0       	breq	.+28     	; 0x11c8 <DIO_vClearPort+0x5c>
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	69 f0       	breq	.+26     	; 0x11d0 <DIO_vClearPort+0x64>
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <DIO_vClearPort+0x6a>
	{
	case  DIO_PORTA:
		PORTA=0b00000000;
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	10 82       	st	Z, r1
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTB:
		PORTB=0b00000000;
    11c0:	e8 e3       	ldi	r30, 0x38	; 56
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTC:
		PORTC=0b00000000;
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	10 82       	st	Z, r1
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <DIO_vClearPort+0x6a>
		break;
	case  DIO_PORTD:
		PORTD=0b00000000;
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	10 82       	st	Z, r1
		break;
	}
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <DIO_vSetPinDirec>:
 * Input: Port number , pin number , Direc
 * Output:
 * 7
 */
void DIO_vSetPinDirec(u8 Copy_u8PORTNumber , u8 Copy_u8PinNumber,u8 Copy_u8Direc)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	2d 97       	sbiw	r28, 0x0d	; 13
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORTNumber)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 87       	std	Y+13, r19	; 0x0d
    1204:	2c 87       	std	Y+12, r18	; 0x0c
    1206:	8c 85       	ldd	r24, Y+12	; 0x0c
    1208:	9d 85       	ldd	r25, Y+13	; 0x0d
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <DIO_vSetPinDirec+0x30>
    1210:	4f c0       	rjmp	.+158    	; 0x12b0 <DIO_vSetPinDirec+0xce>
    1212:	2c 85       	ldd	r18, Y+12	; 0x0c
    1214:	3d 85       	ldd	r19, Y+13	; 0x0d
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_vSetPinDirec+0x44>
    121c:	8c 85       	ldd	r24, Y+12	; 0x0c
    121e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	71 f0       	breq	.+28     	; 0x1240 <DIO_vSetPinDirec+0x5e>
    1224:	ec c0       	rjmp	.+472    	; 0x13fe <DIO_vSetPinDirec+0x21c>
    1226:	2c 85       	ldd	r18, Y+12	; 0x0c
    1228:	3d 85       	ldd	r19, Y+13	; 0x0d
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <DIO_vSetPinDirec+0x50>
    1230:	77 c0       	rjmp	.+238    	; 0x1320 <DIO_vSetPinDirec+0x13e>
    1232:	8c 85       	ldd	r24, Y+12	; 0x0c
    1234:	9d 85       	ldd	r25, Y+13	; 0x0d
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_vSetPinDirec+0x5c>
    123c:	a9 c0       	rjmp	.+338    	; 0x1390 <DIO_vSetPinDirec+0x1ae>
    123e:	df c0       	rjmp	.+446    	; 0x13fe <DIO_vSetPinDirec+0x21c>
		{
		case  DIO_PORTA:
			switch(Copy_u8Direc)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3b 87       	std	Y+11, r19	; 0x0b
    1248:	2a 87       	std	Y+10, r18	; 0x0a
    124a:	8a 85       	ldd	r24, Y+10	; 0x0a
    124c:	9b 85       	ldd	r25, Y+11	; 0x0b
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	31 f0       	breq	.+12     	; 0x125e <DIO_vSetPinDirec+0x7c>
    1252:	2a 85       	ldd	r18, Y+10	; 0x0a
    1254:	3b 85       	ldd	r19, Y+11	; 0x0b
    1256:	21 30       	cpi	r18, 0x01	; 1
    1258:	31 05       	cpc	r19, r1
    125a:	b1 f0       	breq	.+44     	; 0x1288 <DIO_vSetPinDirec+0xa6>
    125c:	d0 c0       	rjmp	.+416    	; 0x13fe <DIO_vSetPinDirec+0x21c>
			{
			case DIO_INPUT:
				clearbit(DDRA,Copy_u8PinNumber);
    125e:	aa e3       	ldi	r26, 0x3A	; 58
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_vSetPinDirec+0x9a>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_vSetPinDirec+0x96>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	bb c0       	rjmp	.+374    	; 0x13fe <DIO_vSetPinDirec+0x21c>
				break;
			case DIO_OUTPUT:
				setbit(DDRA,Copy_u8PinNumber);
    1288:	aa e3       	ldi	r26, 0x3A	; 58
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea e3       	ldi	r30, 0x3A	; 58
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_vSetPinDirec+0xc4>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_vSetPinDirec+0xc0>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	a7 c0       	rjmp	.+334    	; 0x13fe <DIO_vSetPinDirec+0x21c>
				break;
			}
			break;
		case  DIO_PORTB:
			switch(Copy_u8Direc)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	39 87       	std	Y+9, r19	; 0x09
    12b8:	28 87       	std	Y+8, r18	; 0x08
    12ba:	88 85       	ldd	r24, Y+8	; 0x08
    12bc:	99 85       	ldd	r25, Y+9	; 0x09
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	31 f0       	breq	.+12     	; 0x12ce <DIO_vSetPinDirec+0xec>
    12c2:	28 85       	ldd	r18, Y+8	; 0x08
    12c4:	39 85       	ldd	r19, Y+9	; 0x09
    12c6:	21 30       	cpi	r18, 0x01	; 1
    12c8:	31 05       	cpc	r19, r1
    12ca:	b1 f0       	breq	.+44     	; 0x12f8 <DIO_vSetPinDirec+0x116>
    12cc:	98 c0       	rjmp	.+304    	; 0x13fe <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRB,Copy_u8PinNumber);
    12ce:	a7 e3       	ldi	r26, 0x37	; 55
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_vSetPinDirec+0x10a>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_vSetPinDirec+0x106>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	83 c0       	rjmp	.+262    	; 0x13fe <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRB,Copy_u8PinNumber);
    12f8:	a7 e3       	ldi	r26, 0x37	; 55
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e7 e3       	ldi	r30, 0x37	; 55
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_vSetPinDirec+0x134>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_vSetPinDirec+0x130>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	6f c0       	rjmp	.+222    	; 0x13fe <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTC:
			switch(Copy_u8Direc)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3f 83       	std	Y+7, r19	; 0x07
    1328:	2e 83       	std	Y+6, r18	; 0x06
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	31 f0       	breq	.+12     	; 0x133e <DIO_vSetPinDirec+0x15c>
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	21 30       	cpi	r18, 0x01	; 1
    1338:	31 05       	cpc	r19, r1
    133a:	b1 f0       	breq	.+44     	; 0x1368 <DIO_vSetPinDirec+0x186>
    133c:	60 c0       	rjmp	.+192    	; 0x13fe <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRC,Copy_u8PinNumber);
    133e:	a4 e3       	ldi	r26, 0x34	; 52
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e4 e3       	ldi	r30, 0x34	; 52
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_vSetPinDirec+0x17a>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_vSetPinDirec+0x176>
    1360:	80 95       	com	r24
    1362:	84 23       	and	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	4b c0       	rjmp	.+150    	; 0x13fe <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRC,Copy_u8PinNumber);
    1368:	a4 e3       	ldi	r26, 0x34	; 52
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e4 e3       	ldi	r30, 0x34	; 52
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_vSetPinDirec+0x1a4>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_vSetPinDirec+0x1a0>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	37 c0       	rjmp	.+110    	; 0x13fe <DIO_vSetPinDirec+0x21c>
							break;
						}
			break;
		case  DIO_PORTD:
			switch(Copy_u8Direc)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 83       	std	Y+5, r19	; 0x05
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	31 f0       	breq	.+12     	; 0x13ae <DIO_vSetPinDirec+0x1cc>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	21 30       	cpi	r18, 0x01	; 1
    13a8:	31 05       	cpc	r19, r1
    13aa:	b1 f0       	breq	.+44     	; 0x13d8 <DIO_vSetPinDirec+0x1f6>
    13ac:	28 c0       	rjmp	.+80     	; 0x13fe <DIO_vSetPinDirec+0x21c>
						{
						case DIO_INPUT:
							clearbit(DDRD,Copy_u8PinNumber);
    13ae:	a1 e3       	ldi	r26, 0x31	; 49
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e1 e3       	ldi	r30, 0x31	; 49
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_vSetPinDirec+0x1ea>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_vSetPinDirec+0x1e6>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	13 c0       	rjmp	.+38     	; 0x13fe <DIO_vSetPinDirec+0x21c>
							break;
						case DIO_OUTPUT:
							setbit(DDRD,Copy_u8PinNumber);
    13d8:	a1 e3       	ldi	r26, 0x31	; 49
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e1 e3       	ldi	r30, 0x31	; 49
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_vSetPinDirec+0x214>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_vSetPinDirec+0x210>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
							break;
						}
			break;
		}
}
    13fe:	2d 96       	adiw	r28, 0x0d	; 13
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <DIO_vToggletPort>:
 * Input: Port number
 * Output:
 * 8
 */
void DIO_vToggletPort(u8 Copy_u8PORTNumber)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2b 97       	sbiw	r28, 0x0b	; 11
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	89 87       	std	Y+9, r24	; 0x09
	switch(Copy_u8PORTNumber)
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3b 87       	std	Y+11, r19	; 0x0b
    142e:	2a 87       	std	Y+10, r18	; 0x0a
    1430:	8a 85       	ldd	r24, Y+10	; 0x0a
    1432:	9b 85       	ldd	r25, Y+11	; 0x0b
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	a9 f1       	breq	.+106    	; 0x14a4 <DIO_vToggletPort+0x94>
    143a:	2a 85       	ldd	r18, Y+10	; 0x0a
    143c:	3b 85       	ldd	r19, Y+11	; 0x0b
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	2c f4       	brge	.+10     	; 0x144e <DIO_vToggletPort+0x3e>
    1444:	8a 85       	ldd	r24, Y+10	; 0x0a
    1446:	9b 85       	ldd	r25, Y+11	; 0x0b
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	71 f0       	breq	.+28     	; 0x1468 <DIO_vToggletPort+0x58>
    144c:	84 c0       	rjmp	.+264    	; 0x1556 <DIO_vToggletPort+0x146>
    144e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1450:	3b 85       	ldd	r19, Y+11	; 0x0b
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_vToggletPort+0x4a>
    1458:	43 c0       	rjmp	.+134    	; 0x14e0 <DIO_vToggletPort+0xd0>
    145a:	8a 85       	ldd	r24, Y+10	; 0x0a
    145c:	9b 85       	ldd	r25, Y+11	; 0x0b
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_vToggletPort+0x56>
    1464:	5b c0       	rjmp	.+182    	; 0x151c <DIO_vToggletPort+0x10c>
    1466:	77 c0       	rjmp	.+238    	; 0x1556 <DIO_vToggletPort+0x146>
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1468:	18 86       	std	Y+8, r1	; 0x08
    146a:	1f 82       	std	Y+7, r1	; 0x07
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <DIO_vToggletPort+0x88>
		{
			togglebit(PORTA , Pin_Counter) ;
    146e:	ab e3       	ldi	r26, 0x3B	; 59
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	eb e3       	ldi	r30, 0x3B	; 59
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0f 80       	ldd	r0, Y+7	; 0x07
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_vToggletPort+0x76>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_vToggletPort+0x72>
    148a:	82 27       	eor	r24, r18
    148c:	8c 93       	st	X, r24
{
	switch(Copy_u8PORTNumber)
	{
	case DIO_PORTA :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	98 87       	std	Y+8, r25	; 0x08
    1496:	8f 83       	std	Y+7, r24	; 0x07
    1498:	8f 81       	ldd	r24, Y+7	; 0x07
    149a:	98 85       	ldd	r25, Y+8	; 0x08
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	91 05       	cpc	r25, r1
    14a0:	34 f3       	brlt	.-52     	; 0x146e <DIO_vToggletPort+0x5e>
    14a2:	59 c0       	rjmp	.+178    	; 0x1556 <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    14a4:	1e 82       	std	Y+6, r1	; 0x06
    14a6:	1d 82       	std	Y+5, r1	; 0x05
    14a8:	15 c0       	rjmp	.+42     	; 0x14d4 <DIO_vToggletPort+0xc4>
		{
			togglebit(PORTB , Pin_Counter) ;
    14aa:	a8 e3       	ldi	r26, 0x38	; 56
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e3       	ldi	r30, 0x38	; 56
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0d 80       	ldd	r0, Y+5	; 0x05
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_vToggletPort+0xb2>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_vToggletPort+0xae>
    14c6:	82 27       	eor	r24, r18
    14c8:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTB :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	91 05       	cpc	r25, r1
    14dc:	34 f3       	brlt	.-52     	; 0x14aa <DIO_vToggletPort+0x9a>
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    14e0:	1c 82       	std	Y+4, r1	; 0x04
    14e2:	1b 82       	std	Y+3, r1	; 0x03
    14e4:	15 c0       	rjmp	.+42     	; 0x1510 <DIO_vToggletPort+0x100>
		{
			togglebit(PORTC , Pin_Counter) ;
    14e6:	a5 e3       	ldi	r26, 0x35	; 53
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	28 2f       	mov	r18, r24
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0b 80       	ldd	r0, Y+3	; 0x03
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_vToggletPort+0xee>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_vToggletPort+0xea>
    1502:	82 27       	eor	r24, r18
    1504:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTC :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	91 05       	cpc	r25, r1
    1518:	34 f3       	brlt	.-52     	; 0x14e6 <DIO_vToggletPort+0xd6>
    151a:	1d c0       	rjmp	.+58     	; 0x1556 <DIO_vToggletPort+0x146>
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    151c:	1a 82       	std	Y+2, r1	; 0x02
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	15 c0       	rjmp	.+42     	; 0x154c <DIO_vToggletPort+0x13c>
		{
			togglebit(PORTD , Pin_Counter) ;
    1522:	a2 e3       	ldi	r26, 0x32	; 50
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	09 80       	ldd	r0, Y+1	; 0x01
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_vToggletPort+0x12a>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_vToggletPort+0x126>
    153e:	82 27       	eor	r24, r18
    1540:	8c 93       	st	X, r24
		}
		break;
	}
	case DIO_PORTD :
	{
		for(int Pin_Counter=0 ; Pin_Counter < 8 ; Pin_Counter++) // looping on ever pin in the port
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	88 30       	cpi	r24, 0x08	; 8
    1552:	91 05       	cpc	r25, r1
    1554:	34 f3       	brlt	.-52     	; 0x1522 <DIO_vToggletPort+0x112>
	}

	}


}
    1556:	2b 96       	adiw	r28, 0x0b	; 11
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_vSetPortvalue>:
 * Input: Port number , command
 * Output:
 * 9
 */
void DIO_vSetPortvalue(u8 Copy_u8PORTNumber,u8 Copy_u8value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_vSetPortvalue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_vSetPortvalue+0x8>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORTNumber)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3c 83       	std	Y+4, r19	; 0x04
    1580:	2b 83       	std	Y+3, r18	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	d1 f0       	breq	.+52     	; 0x15c0 <DIO_vSetPortvalue+0x58>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	2c f4       	brge	.+10     	; 0x15a0 <DIO_vSetPortvalue+0x38>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	61 f0       	breq	.+24     	; 0x15b6 <DIO_vSetPortvalue+0x4e>
    159e:	1e c0       	rjmp	.+60     	; 0x15dc <DIO_vSetPortvalue+0x74>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	81 f0       	breq	.+32     	; 0x15ca <DIO_vSetPortvalue+0x62>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <DIO_vSetPortvalue+0x6c>
    15b4:	13 c0       	rjmp	.+38     	; 0x15dc <DIO_vSetPortvalue+0x74>
		{
		case DIO_PORTA:
			PORTA=Copy_u8value;
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8value;
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	09 c0       	rjmp	.+18     	; 0x15dc <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8value;
    15ca:	e5 e3       	ldi	r30, 0x35	; 53
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <DIO_vSetPortvalue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8value;
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
			break;

		}
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <LCD_vWriteCommand>:
#include <avr/delay.h>



void LCD_vWriteCommand(u8 copy_u8command)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	2f 97       	sbiw	r28, 0x0f	; 15
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RSPin);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_vClearPin>
	// RW control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RWPin);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(DIO_PORTB,copy_u8command);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	6f 85       	ldd	r22, Y+15	; 0x0f
    1614:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_vSetPortvalue>
	//enable ->1
	DIO_vSetPin(DIO_PORTA,LCD_EnablePin);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	62 e0       	ldi	r22, 0x02	; 2
    161c:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPin>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e0       	ldi	r26, 0x00	; 0
    1626:	b0 e4       	ldi	r27, 0x40	; 64
    1628:	8b 87       	std	Y+11, r24	; 0x0b
    162a:	9c 87       	std	Y+12, r25	; 0x0c
    162c:	ad 87       	std	Y+13, r26	; 0x0d
    162e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	6b 85       	ldd	r22, Y+11	; 0x0b
    1632:	7c 85       	ldd	r23, Y+12	; 0x0c
    1634:	8d 85       	ldd	r24, Y+13	; 0x0d
    1636:	9e 85       	ldd	r25, Y+14	; 0x0e
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8f 83       	std	Y+7, r24	; 0x07
    164a:	98 87       	std	Y+8, r25	; 0x08
    164c:	a9 87       	std	Y+9, r26	; 0x09
    164e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <LCD_vWriteCommand+0x88>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <LCD_vWriteCommand+0x106>
	else if (__tmp > 65535)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <LCD_vWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	6b 85       	ldd	r22, Y+11	; 0x0b
    168c:	7c 85       	ldd	r23, Y+12	; 0x0c
    168e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1690:	9e 85       	ldd	r25, Y+14	; 0x0e
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <LCD_vWriteCommand+0xe8>
    16b4:	89 e1       	ldi	r24, 0x19	; 25
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_vWriteCommand+0xd6>
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <LCD_vWriteCommand+0xca>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <LCD_vWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_vWriteCommand+0x112>
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable ->0
	DIO_vClearPin(DIO_PORTA,LCD_EnablePin);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_vClearPin>
}
    170c:	2f 96       	adiw	r28, 0x0f	; 15
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <LCD_vWriteChar>:

void LCD_vWriteChar(u8 copy_u8Char)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	2f 97       	sbiw	r28, 0x0f	; 15
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	8f 87       	std	Y+15, r24	; 0x0f
	//RS control -> 1
	DIO_vSetPin(DIO_PORTA,LCD_RSPin);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPin>
	// RW control -> 0
	DIO_vClearPin(DIO_PORTA,LCD_RWPin);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_vClearPin>
	//Data output
	DIO_vSetPortvalue(DIO_PORTB,copy_u8Char);
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	6f 85       	ldd	r22, Y+15	; 0x0f
    1748:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_vSetPortvalue>
	//enable
	DIO_vSetPin(DIO_PORTA,LCD_EnablePin);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPin>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e0       	ldi	r26, 0x00	; 0
    175a:	b0 e4       	ldi	r27, 0x40	; 64
    175c:	8b 87       	std	Y+11, r24	; 0x0b
    175e:	9c 87       	std	Y+12, r25	; 0x0c
    1760:	ad 87       	std	Y+13, r26	; 0x0d
    1762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	53 e4       	ldi	r21, 0x43	; 67
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8f 83       	std	Y+7, r24	; 0x07
    177e:	98 87       	std	Y+8, r25	; 0x08
    1780:	a9 87       	std	Y+9, r26	; 0x09
    1782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	2c f4       	brge	.+10     	; 0x17a6 <LCD_vWriteChar+0x88>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	3f c0       	rjmp	.+126    	; 0x1824 <LCD_vWriteChar+0x106>
	else if (__tmp > 65535)
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	4c f5       	brge	.+82     	; 0x1810 <LCD_vWriteChar+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <LCD_vWriteChar+0xe8>
    17e8:	89 e1       	ldi	r24, 0x19	; 25
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_vWriteChar+0xd6>
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	69 f7       	brne	.-38     	; 0x17e8 <LCD_vWriteChar+0xca>
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <LCD_vWriteChar+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_vWriteChar+0x112>
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
	//delay
	_delay_ms(2);
	// disable
	DIO_vClearPin(DIO_PORTA,LCD_EnablePin);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_vClearPin>
}
    1840:	2f 96       	adiw	r28, 0x0f	; 15
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_vInitialize>:

void LCD_vInitialize(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	e8 97       	sbiw	r28, 0x38	; 56
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	aa ef       	ldi	r26, 0xFA	; 250
    186c:	b3 e4       	ldi	r27, 0x43	; 67
    186e:	8d ab       	std	Y+53, r24	; 0x35
    1870:	9e ab       	std	Y+54, r25	; 0x36
    1872:	af ab       	std	Y+55, r26	; 0x37
    1874:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	6d a9       	ldd	r22, Y+53	; 0x35
    1878:	7e a9       	ldd	r23, Y+54	; 0x36
    187a:	8f a9       	ldd	r24, Y+55	; 0x37
    187c:	98 ad       	ldd	r25, Y+56	; 0x38
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a e7       	ldi	r20, 0x7A	; 122
    1884:	53 e4       	ldi	r21, 0x43	; 67
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	89 ab       	std	Y+49, r24	; 0x31
    1890:	9a ab       	std	Y+50, r25	; 0x32
    1892:	ab ab       	std	Y+51, r26	; 0x33
    1894:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <LCD_vInitialize+0x66>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	98 ab       	std	Y+48, r25	; 0x30
    18b4:	8f a7       	std	Y+47, r24	; 0x2f
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <LCD_vInitialize+0xe4>
	else if (__tmp > 65535)
    18b8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ba:	7a a9       	ldd	r23, Y+50	; 0x32
    18bc:	8b a9       	ldd	r24, Y+51	; 0x33
    18be:	9c a9       	ldd	r25, Y+52	; 0x34
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <LCD_vInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	6d a9       	ldd	r22, Y+53	; 0x35
    18d2:	7e a9       	ldd	r23, Y+54	; 0x36
    18d4:	8f a9       	ldd	r24, Y+55	; 0x37
    18d6:	98 ad       	ldd	r25, Y+56	; 0x38
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	98 ab       	std	Y+48, r25	; 0x30
    18f6:	8f a7       	std	Y+47, r24	; 0x2f
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <LCD_vInitialize+0xc6>
    18fa:	89 e1       	ldi	r24, 0x19	; 25
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9e a7       	std	Y+46, r25	; 0x2e
    1900:	8d a7       	std	Y+45, r24	; 0x2d
    1902:	8d a5       	ldd	r24, Y+45	; 0x2d
    1904:	9e a5       	ldd	r25, Y+46	; 0x2e
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_vInitialize+0xb4>
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1910:	98 a9       	ldd	r25, Y+48	; 0x30
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	98 ab       	std	Y+48, r25	; 0x30
    1916:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8f a5       	ldd	r24, Y+47	; 0x2f
    191a:	98 a9       	ldd	r25, Y+48	; 0x30
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <LCD_vInitialize+0xa8>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <LCD_vInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	98 ab       	std	Y+48, r25	; 0x30
    1934:	8f a7       	std	Y+47, r24	; 0x2f
    1936:	8f a5       	ldd	r24, Y+47	; 0x2f
    1938:	98 a9       	ldd	r25, Y+48	; 0x30
    193a:	9c a7       	std	Y+44, r25	; 0x2c
    193c:	8b a7       	std	Y+43, r24	; 0x2b
    193e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1940:	9c a5       	ldd	r25, Y+44	; 0x2c
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_vInitialize+0xf0>
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
	//delay 500 ms
	_delay_ms(500);
	//writeCommand 0011 1000
	LCD_vWriteCommand(0b00111000);
    194a:	88 e3       	ldi	r24, 0x38	; 56
    194c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <LCD_vWriteCommand>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e0       	ldi	r26, 0x00	; 0
    1956:	b0 e4       	ldi	r27, 0x40	; 64
    1958:	8f a3       	std	Y+39, r24	; 0x27
    195a:	98 a7       	std	Y+40, r25	; 0x28
    195c:	a9 a7       	std	Y+41, r26	; 0x29
    195e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6f a1       	ldd	r22, Y+39	; 0x27
    1962:	78 a5       	ldd	r23, Y+40	; 0x28
    1964:	89 a5       	ldd	r24, Y+41	; 0x29
    1966:	9a a5       	ldd	r25, Y+42	; 0x2a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8b a3       	std	Y+35, r24	; 0x23
    197a:	9c a3       	std	Y+36, r25	; 0x24
    197c:	ad a3       	std	Y+37, r26	; 0x25
    197e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_vInitialize+0x150>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a a3       	std	Y+34, r25	; 0x22
    199e:	89 a3       	std	Y+33, r24	; 0x21
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_vInitialize+0x1ce>
	else if (__tmp > 65535)
    19a2:	6b a1       	ldd	r22, Y+35	; 0x23
    19a4:	7c a1       	ldd	r23, Y+36	; 0x24
    19a6:	8d a1       	ldd	r24, Y+37	; 0x25
    19a8:	9e a1       	ldd	r25, Y+38	; 0x26
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_vInitialize+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6f a1       	ldd	r22, Y+39	; 0x27
    19bc:	78 a5       	ldd	r23, Y+40	; 0x28
    19be:	89 a5       	ldd	r24, Y+41	; 0x29
    19c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9a a3       	std	Y+34, r25	; 0x22
    19e0:	89 a3       	std	Y+33, r24	; 0x21
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_vInitialize+0x1b0>
    19e4:	89 e1       	ldi	r24, 0x19	; 25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 a3       	std	Y+32, r25	; 0x20
    19ea:	8f 8f       	std	Y+31, r24	; 0x1f
    19ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ee:	98 a1       	ldd	r25, Y+32	; 0x20
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_vInitialize+0x19e>
    19f4:	98 a3       	std	Y+32, r25	; 0x20
    19f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_vInitialize+0x192>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <LCD_vInitialize+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a10:	8d a1       	ldd	r24, Y+37	; 0x25
    1a12:	9e a1       	ldd	r25, Y+38	; 0x26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9a a3       	std	Y+34, r25	; 0x22
    1a1e:	89 a3       	std	Y+33, r24	; 0x21
    1a20:	89 a1       	ldd	r24, Y+33	; 0x21
    1a22:	9a a1       	ldd	r25, Y+34	; 0x22
    1a24:	9e 8f       	std	Y+30, r25	; 0x1e
    1a26:	8d 8f       	std	Y+29, r24	; 0x1d
    1a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_vInitialize+0x1da>
    1a30:	9e 8f       	std	Y+30, r25	; 0x1e
    1a32:	8d 8f       	std	Y+29, r24	; 0x1d
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 1100
	LCD_vWriteCommand(0b00001100);
    1a34:	8c e0       	ldi	r24, 0x0C	; 12
    1a36:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <LCD_vWriteCommand>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e4       	ldi	r27, 0x40	; 64
    1a42:	89 8f       	std	Y+25, r24	; 0x19
    1a44:	9a 8f       	std	Y+26, r25	; 0x1a
    1a46:	ab 8f       	std	Y+27, r26	; 0x1b
    1a48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a e7       	ldi	r20, 0x7A	; 122
    1a58:	53 e4       	ldi	r21, 0x43	; 67
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8d 8b       	std	Y+21, r24	; 0x15
    1a64:	9e 8b       	std	Y+22, r25	; 0x16
    1a66:	af 8b       	std	Y+23, r26	; 0x17
    1a68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_vInitialize+0x23a>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_vInitialize+0x2b8>
	else if (__tmp > 65535)
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_vInitialize+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_vInitialize+0x29a>
    1ace:	89 e1       	ldi	r24, 0x19	; 25
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
    1ad6:	89 89       	ldd	r24, Y+17	; 0x11
    1ad8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_vInitialize+0x288>
    1ade:	9a 8b       	std	Y+18, r25	; 0x12
    1ae0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9c 8b       	std	Y+20, r25	; 0x14
    1aea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_vInitialize+0x27c>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_vInitialize+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	98 89       	ldd	r25, Y+16	; 0x10
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_vInitialize+0x2c4>
    1b1a:	98 8b       	std	Y+16, r25	; 0x10
    1b1c:	8f 87       	std	Y+15, r24	; 0x0f
	//delay 2 ms
	_delay_ms(2);
	//writeCommand 0000 0001
	LCD_vWriteCommand(0b00000001);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <LCD_vWriteCommand>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e4       	ldi	r27, 0x40	; 64
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	53 e4       	ldi	r21, 0x43	; 67
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_vInitialize+0x324>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_vInitialize+0x3a2>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_vInitialize+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_vInitialize+0x384>
    1bb8:	89 e1       	ldi	r24, 0x19	; 25
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_vInitialize+0x372>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_vInitialize+0x366>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_vInitialize+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_vInitialize+0x3ae>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	//delay 2 ms
	_delay_ms(2);
}
    1c08:	e8 96       	adiw	r28, 0x38	; 56
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <gotoXY>:

void gotoXY(u8 X,u8 Y)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <gotoXY+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <gotoXY+0x8>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(X)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3d 83       	std	Y+5, r19	; 0x05
    1c34:	2c 83       	std	Y+4, r18	; 0x04
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <gotoXY+0x30>
    1c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c40:	3d 81       	ldd	r19, Y+5	; 0x05
    1c42:	21 30       	cpi	r18, 0x01	; 1
    1c44:	31 05       	cpc	r19, r1
    1c46:	21 f0       	breq	.+8      	; 0x1c50 <gotoXY+0x36>
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <gotoXY+0x3c>
	{
	case 0:
		Address=Y;
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <gotoXY+0x3c>
		break;
	case 1:
		Address =Y+(0x40);
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	80 5c       	subi	r24, 0xC0	; 192
    1c54:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	setbit(Address,7);
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vWriteCommand(Address);
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <LCD_vWriteCommand>
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LCD_vWriteString>:

void LCD_vWriteString(u8 copy_u8Chararr[])
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	63 97       	sbiw	r28, 0x13	; 19
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9b 8b       	std	Y+19, r25	; 0x13
    1c88:	8a 8b       	std	Y+18, r24	; 0x12
	u8 lenght;
	lenght=strlen(copy_u8Chararr);
    1c8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8c:	9b 89       	ldd	r25, Y+19	; 0x13
    1c8e:	0e 94 07 11 	call	0x220e	; 0x220e <strlen>
    1c92:	89 8b       	std	Y+17, r24	; 0x11

	for(int i=0 ; i<lenght ;i++)
    1c94:	18 8a       	std	Y+16, r1	; 0x10
    1c96:	1f 86       	std	Y+15, r1	; 0x0f
    1c98:	81 c0       	rjmp	.+258    	; 0x1d9c <LCD_vWriteString+0x12a>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
    1c9a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c9c:	38 89       	ldd	r19, Y+16	; 0x10
    1c9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1ca0:	9b 89       	ldd	r25, Y+19	; 0x13
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	e2 0f       	add	r30, r18
    1ca6:	f3 1f       	adc	r31, r19
    1ca8:	80 81       	ld	r24, Z
    1caa:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_vWriteChar>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a8 e4       	ldi	r26, 0x48	; 72
    1cb4:	b2 e4       	ldi	r27, 0x42	; 66
    1cb6:	8b 87       	std	Y+11, r24	; 0x0b
    1cb8:	9c 87       	std	Y+12, r25	; 0x0c
    1cba:	ad 87       	std	Y+13, r26	; 0x0d
    1cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a e7       	ldi	r20, 0x7A	; 122
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8f 83       	std	Y+7, r24	; 0x07
    1cd8:	98 87       	std	Y+8, r25	; 0x08
    1cda:	a9 87       	std	Y+9, r26	; 0x09
    1cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_vWriteString+0x8e>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_vWriteString+0x10c>
	else if (__tmp > 65535)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_vWriteString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_vWriteString+0xee>
    1d42:	89 e1       	ldi	r24, 0x19	; 25
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_vWriteString+0xdc>
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_vWriteString+0xd0>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_vWriteString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_vWriteString+0x118>
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
void LCD_vWriteString(u8 copy_u8Chararr[])
{
	u8 lenght;
	lenght=strlen(copy_u8Chararr);

	for(int i=0 ; i<lenght ;i++)
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	98 89       	ldd	r25, Y+16	; 0x10
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	98 8b       	std	Y+16, r25	; 0x10
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	89 89       	ldd	r24, Y+17	; 0x11
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da4:	98 89       	ldd	r25, Y+16	; 0x10
    1da6:	82 17       	cp	r24, r18
    1da8:	93 07       	cpc	r25, r19
    1daa:	0c f4       	brge	.+2      	; 0x1dae <LCD_vWriteString+0x13c>
    1dac:	76 cf       	rjmp	.-276    	; 0x1c9a <LCD_vWriteString+0x28>
	{
		LCD_vWriteChar(copy_u8Chararr[i]);
		_delay_ms(50);
	}
}
    1dae:	63 96       	adiw	r28, 0x13	; 19
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <main>:

u8 count_OVF = 0;


void main(void)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirec(DIO_PORTB , 3 , DIO_OUTPUT);
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_vSetPinDirec>
	 LCD_vInitialize();
    1dd2:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_vInitialize>


}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <initialization_INT0>:

void initialization_INT0(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDirec(DIO_PORTD,2,DIO_INPUT);
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_vSetPinDirec>
	//mode      Any change
	clearbit(MCUCR,ISC01);
    1dee:	a5 e5       	ldi	r26, 0x55	; 85
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e5       	ldi	r30, 0x55	; 85
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8d 7f       	andi	r24, 0xFD	; 253
    1dfa:	8c 93       	st	X, r24
	setbit(MCUCR,ISC00);
    1dfc:	a5 e5       	ldi	r26, 0x55	; 85
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e5       	ldi	r30, 0x55	; 85
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	81 60       	ori	r24, 0x01	; 1
    1e08:	8c 93       	st	X, r24


	//enable int0
	setbit(GICR,6);
    1e0a:	ab e5       	ldi	r26, 0x5B	; 91
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e5       	ldi	r30, 0x5B	; 91
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 64       	ori	r24, 0x40	; 64
    1e16:	8c 93       	st	X, r24

	// enable global int0
	setbit(SREG,7);
    1e18:	af e5       	ldi	r26, 0x5F	; 95
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ef e5       	ldi	r30, 0x5F	; 95
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	80 68       	ori	r24, 0x80	; 128
    1e24:	8c 93       	st	X, r24


}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <__vector_1>:

ISR (INT0_vect)
{
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <__vector_1+0x30>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <__vector_1+0x32>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	u8 static read;
	u8 time;
	u8 freq;
	u8 Tof;
	u8 DC;
	if(counter==0)
    1e62:	80 91 70 01 	lds	r24, 0x0170
    1e66:	88 23       	and	r24, r24
    1e68:	71 f4       	brne	.+28     	; 0x1e86 <__vector_1+0x5a>
	{
		TCNT0=0;
    1e6a:	e2 e5       	ldi	r30, 0x52	; 82
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	10 82       	st	Z, r1
		read=DIO_vGetPin(DIO_PORTD , 2);
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_vGetPin>
    1e78:	80 93 6f 01 	sts	0x016F, r24
		counter++;
    1e7c:	80 91 70 01 	lds	r24, 0x0170
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	80 93 70 01 	sts	0x0170, r24
	}
	if(counter==2)
    1e86:	80 91 70 01 	lds	r24, 0x0170
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <__vector_1+0x64>
    1e8e:	7f c0       	rjmp	.+254    	; 0x1f8e <__vector_1+0x162>
	{
		time = TCNT0*Tcount+(count_OVF*255*Tcount);
    1e90:	e2 e5       	ldi	r30, 0x52	; 82
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	aa 27       	eor	r26, r26
    1e9c:	97 fd       	sbrc	r25, 7
    1e9e:	a0 95       	com	r26
    1ea0:	ba 2f       	mov	r27, r26
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	2d eb       	ldi	r18, 0xBD	; 189
    1eb4:	37 e3       	ldi	r19, 0x37	; 55
    1eb6:	46 e0       	ldi	r20, 0x06	; 6
    1eb8:	59 e3       	ldi	r21, 0x39	; 57
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	7c 01       	movw	r14, r24
    1ec4:	8d 01       	movw	r16, r26
    1ec6:	80 91 6e 01 	lds	r24, 0x016E
    1eca:	48 2f       	mov	r20, r24
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	ca 01       	movw	r24, r20
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	96 95       	lsr	r25
    1eda:	98 2f       	mov	r25, r24
    1edc:	88 27       	eor	r24, r24
    1ede:	97 95       	ror	r25
    1ee0:	87 95       	ror	r24
    1ee2:	82 1b       	sub	r24, r18
    1ee4:	93 0b       	sbc	r25, r19
    1ee6:	84 0f       	add	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	aa 27       	eor	r26, r26
    1eec:	97 fd       	sbrc	r25, 7
    1eee:	a0 95       	com	r26
    1ef0:	ba 2f       	mov	r27, r26
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	2d eb       	ldi	r18, 0xBD	; 189
    1f04:	37 e3       	ldi	r19, 0x37	; 55
    1f06:	46 e0       	ldi	r20, 0x06	; 6
    1f08:	59 e3       	ldi	r21, 0x39	; 57
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9c 01       	movw	r18, r24
    1f14:	ad 01       	movw	r20, r26
    1f16:	c8 01       	movw	r24, r16
    1f18:	b7 01       	movw	r22, r14
    1f1a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
		freq=1/time;
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
    1f40:	cb 01       	movw	r24, r22
    1f42:	8b 83       	std	Y+3, r24	; 0x03
		if(read>0){
    1f44:	80 91 6f 01 	lds	r24, 0x016F
    1f48:	88 23       	and	r24, r24
    1f4a:	39 f0       	breq	.+14     	; 0x1f5a <__vector_1+0x12e>
			DC=Tof/time;
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	69 2f       	mov	r22, r25
    1f52:	0e 94 9d 10 	call	0x213a	; 0x213a <__udivmodqi4>
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	12 c0       	rjmp	.+36     	; 0x1f7e <__vector_1+0x152>
		}
		else{
			DC=(time-Tof)/time;
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a9 01       	movw	r20, r18
    1f68:	48 1b       	sub	r20, r24
    1f6a:	59 0b       	sbc	r21, r25
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	ca 01       	movw	r24, r20
    1f74:	b9 01       	movw	r22, r18
    1f76:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	89 83       	std	Y+1, r24	; 0x01
		}
		LCD_vWriteString("DC = ");
    1f7e:	80 e6       	ldi	r24, 0x60	; 96
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_vWriteString>
		LCD_vWriteChar(DC+'0');
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	80 5d       	subi	r24, 0xD0	; 208
    1f8a:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_vWriteChar>
	}
	if(counter==1)
    1f8e:	80 91 70 01 	lds	r24, 0x0170
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <__vector_1+0x16c>
    1f96:	55 c0       	rjmp	.+170    	; 0x2042 <__vector_1+0x216>
	{
		Tof = TCNT0 * Tcount+(count_OVF*255*Tcount);
    1f98:	e2 e5       	ldi	r30, 0x52	; 82
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	aa 27       	eor	r26, r26
    1fa4:	97 fd       	sbrc	r25, 7
    1fa6:	a0 95       	com	r26
    1fa8:	ba 2f       	mov	r27, r26
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	2d eb       	ldi	r18, 0xBD	; 189
    1fbc:	37 e3       	ldi	r19, 0x37	; 55
    1fbe:	46 e0       	ldi	r20, 0x06	; 6
    1fc0:	59 e3       	ldi	r21, 0x39	; 57
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	7c 01       	movw	r14, r24
    1fcc:	8d 01       	movw	r16, r26
    1fce:	80 91 6e 01 	lds	r24, 0x016E
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	9c 01       	movw	r18, r24
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	c9 01       	movw	r24, r18
    1fe0:	96 95       	lsr	r25
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	88 27       	eor	r24, r24
    1fe6:	97 95       	ror	r25
    1fe8:	87 95       	ror	r24
    1fea:	82 1b       	sub	r24, r18
    1fec:	93 0b       	sbc	r25, r19
    1fee:	84 0f       	add	r24, r20
    1ff0:	95 1f       	adc	r25, r21
    1ff2:	aa 27       	eor	r26, r26
    1ff4:	97 fd       	sbrc	r25, 7
    1ff6:	a0 95       	com	r26
    1ff8:	ba 2f       	mov	r27, r26
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	2d eb       	ldi	r18, 0xBD	; 189
    200c:	37 e3       	ldi	r19, 0x37	; 55
    200e:	46 e0       	ldi	r20, 0x06	; 6
    2010:	59 e3       	ldi	r21, 0x39	; 57
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9c 01       	movw	r18, r24
    201c:	ad 01       	movw	r20, r26
    201e:	c8 01       	movw	r24, r16
    2020:	b7 01       	movw	r22, r14
    2022:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8a 83       	std	Y+2, r24	; 0x02
		counter++;
    2038:	80 91 70 01 	lds	r24, 0x0170
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	80 93 70 01 	sts	0x0170, r24
	}

}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	bf 91       	pop	r27
    2054:	af 91       	pop	r26
    2056:	9f 91       	pop	r25
    2058:	8f 91       	pop	r24
    205a:	7f 91       	pop	r23
    205c:	6f 91       	pop	r22
    205e:	5f 91       	pop	r21
    2060:	4f 91       	pop	r20
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <TIMER_intial_fast_PWM>:

void TIMER_intial_fast_PWM(void)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	/* pwm mode */
	setbit(TCCR0,3);
    2080:	a3 e5       	ldi	r26, 0x53	; 83
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e3 e5       	ldi	r30, 0x53	; 83
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 60       	ori	r24, 0x08	; 8
    208c:	8c 93       	st	X, r24
	setbit(TCCR0,6);
    208e:	a3 e5       	ldi	r26, 0x53	; 83
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e3 e5       	ldi	r30, 0x53	; 83
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 64       	ori	r24, 0x40	; 64
    209a:	8c 93       	st	X, r24

	/*Compare Output Mode, Fast PWM Mode*/
	setbit(TCCR0 , 4);
    209c:	a3 e5       	ldi	r26, 0x53	; 83
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e3 e5       	ldi	r30, 0x53	; 83
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 61       	ori	r24, 0x10	; 16
    20a8:	8c 93       	st	X, r24
    setbit(TCCR0 , 5);
    20aa:	a3 e5       	ldi	r26, 0x53	; 83
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e3 e5       	ldi	r30, 0x53	; 83
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 62       	ori	r24, 0x20	; 32
    20b6:	8c 93       	st	X, r24

   OCR0=150;
    20b8:	ec e5       	ldi	r30, 0x5C	; 92
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	86 e9       	ldi	r24, 0x96	; 150
    20be:	80 83       	st	Z, r24

   /* enable OVf interrupt  */
   	setbit(TIMSK,0);
    20c0:	a9 e5       	ldi	r26, 0x59	; 89
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 e5       	ldi	r30, 0x59	; 89
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	81 60       	ori	r24, 0x01	; 1
    20cc:	8c 93       	st	X, r24

   	/* enable global */
   	setbit(SREG  , SREG_I);
    20ce:	af e5       	ldi	r26, 0x5F	; 95
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ef e5       	ldi	r30, 0x5F	; 95
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	8c 93       	st	X, r24

    /* Clock Select */
    	setbit(TCCR0 , 0);
    20dc:	a3 e5       	ldi	r26, 0x53	; 83
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e3 e5       	ldi	r30, 0x53	; 83
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	81 60       	ori	r24, 0x01	; 1
    20e8:	8c 93       	st	X, r24
    	clearbit(TCCR0 , 1);
    20ea:	a3 e5       	ldi	r26, 0x53	; 83
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e3 e5       	ldi	r30, 0x53	; 83
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8d 7f       	andi	r24, 0xFD	; 253
    20f6:	8c 93       	st	X, r24
    	setbit(TCCR0 , 2);
    20f8:	a3 e5       	ldi	r26, 0x53	; 83
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e3 e5       	ldi	r30, 0x53	; 83
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	84 60       	ori	r24, 0x04	; 4
    2104:	8c 93       	st	X, r24
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    210c:	1f 92       	push	r1
    210e:	0f 92       	push	r0
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	0f 92       	push	r0
    2114:	11 24       	eor	r1, r1
    2116:	8f 93       	push	r24
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	count_OVF++;
    2120:	80 91 6e 01 	lds	r24, 0x016E
    2124:	8f 5f       	subi	r24, 0xFF	; 255
    2126:	80 93 6e 01 	sts	0x016E, r24
}
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	8f 91       	pop	r24
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <__udivmodqi4>:
    213a:	99 1b       	sub	r25, r25
    213c:	79 e0       	ldi	r23, 0x09	; 9
    213e:	04 c0       	rjmp	.+8      	; 0x2148 <__udivmodqi4_ep>

00002140 <__udivmodqi4_loop>:
    2140:	99 1f       	adc	r25, r25
    2142:	96 17       	cp	r25, r22
    2144:	08 f0       	brcs	.+2      	; 0x2148 <__udivmodqi4_ep>
    2146:	96 1b       	sub	r25, r22

00002148 <__udivmodqi4_ep>:
    2148:	88 1f       	adc	r24, r24
    214a:	7a 95       	dec	r23
    214c:	c9 f7       	brne	.-14     	; 0x2140 <__udivmodqi4_loop>
    214e:	80 95       	com	r24
    2150:	08 95       	ret

00002152 <__divmodhi4>:
    2152:	97 fb       	bst	r25, 7
    2154:	09 2e       	mov	r0, r25
    2156:	07 26       	eor	r0, r23
    2158:	0a d0       	rcall	.+20     	; 0x216e <__divmodhi4_neg1>
    215a:	77 fd       	sbrc	r23, 7
    215c:	04 d0       	rcall	.+8      	; 0x2166 <__divmodhi4_neg2>
    215e:	0c d0       	rcall	.+24     	; 0x2178 <__udivmodhi4>
    2160:	06 d0       	rcall	.+12     	; 0x216e <__divmodhi4_neg1>
    2162:	00 20       	and	r0, r0
    2164:	1a f4       	brpl	.+6      	; 0x216c <__divmodhi4_exit>

00002166 <__divmodhi4_neg2>:
    2166:	70 95       	com	r23
    2168:	61 95       	neg	r22
    216a:	7f 4f       	sbci	r23, 0xFF	; 255

0000216c <__divmodhi4_exit>:
    216c:	08 95       	ret

0000216e <__divmodhi4_neg1>:
    216e:	f6 f7       	brtc	.-4      	; 0x216c <__divmodhi4_exit>
    2170:	90 95       	com	r25
    2172:	81 95       	neg	r24
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	08 95       	ret

00002178 <__udivmodhi4>:
    2178:	aa 1b       	sub	r26, r26
    217a:	bb 1b       	sub	r27, r27
    217c:	51 e1       	ldi	r21, 0x11	; 17
    217e:	07 c0       	rjmp	.+14     	; 0x218e <__udivmodhi4_ep>

00002180 <__udivmodhi4_loop>:
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	a6 17       	cp	r26, r22
    2186:	b7 07       	cpc	r27, r23
    2188:	10 f0       	brcs	.+4      	; 0x218e <__udivmodhi4_ep>
    218a:	a6 1b       	sub	r26, r22
    218c:	b7 0b       	sbc	r27, r23

0000218e <__udivmodhi4_ep>:
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	5a 95       	dec	r21
    2194:	a9 f7       	brne	.-22     	; 0x2180 <__udivmodhi4_loop>
    2196:	80 95       	com	r24
    2198:	90 95       	com	r25
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	08 95       	ret

000021a0 <__prologue_saves__>:
    21a0:	2f 92       	push	r2
    21a2:	3f 92       	push	r3
    21a4:	4f 92       	push	r4
    21a6:	5f 92       	push	r5
    21a8:	6f 92       	push	r6
    21aa:	7f 92       	push	r7
    21ac:	8f 92       	push	r8
    21ae:	9f 92       	push	r9
    21b0:	af 92       	push	r10
    21b2:	bf 92       	push	r11
    21b4:	cf 92       	push	r12
    21b6:	df 92       	push	r13
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	ca 1b       	sub	r28, r26
    21ca:	db 0b       	sbc	r29, r27
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	09 94       	ijmp

000021d8 <__epilogue_restores__>:
    21d8:	2a 88       	ldd	r2, Y+18	; 0x12
    21da:	39 88       	ldd	r3, Y+17	; 0x11
    21dc:	48 88       	ldd	r4, Y+16	; 0x10
    21de:	5f 84       	ldd	r5, Y+15	; 0x0f
    21e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    21e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    21e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    21e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    21e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    21ea:	b9 84       	ldd	r11, Y+9	; 0x09
    21ec:	c8 84       	ldd	r12, Y+8	; 0x08
    21ee:	df 80       	ldd	r13, Y+7	; 0x07
    21f0:	ee 80       	ldd	r14, Y+6	; 0x06
    21f2:	fd 80       	ldd	r15, Y+5	; 0x05
    21f4:	0c 81       	ldd	r16, Y+4	; 0x04
    21f6:	1b 81       	ldd	r17, Y+3	; 0x03
    21f8:	aa 81       	ldd	r26, Y+2	; 0x02
    21fa:	b9 81       	ldd	r27, Y+1	; 0x01
    21fc:	ce 0f       	add	r28, r30
    21fe:	d1 1d       	adc	r29, r1
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	ed 01       	movw	r28, r26
    220c:	08 95       	ret

0000220e <strlen>:
    220e:	fc 01       	movw	r30, r24
    2210:	01 90       	ld	r0, Z+
    2212:	00 20       	and	r0, r0
    2214:	e9 f7       	brne	.-6      	; 0x2210 <strlen+0x2>
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
    221a:	8e 0f       	add	r24, r30
    221c:	9f 1f       	adc	r25, r31
    221e:	08 95       	ret

00002220 <_exit>:
    2220:	f8 94       	cli

00002222 <__stop_program>:
    2222:	ff cf       	rjmp	.-2      	; 0x2222 <__stop_program>
